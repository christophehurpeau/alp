{"version":3,"sources":["../src/ParamValidator.js"],"names":[],"mappings":";;AACA;;AACA;;AAFA;AAIA,MAAM,iBAAN,EAAyB,MAAM;AAC7B,OAAK,kBAAL,EAAyB,MAAM;AAC7B,UAAM,iBAAiB,sBAAvB;AACA,6BAAY,eAAe,SAAf,EAAZ,EAAwC,SAAxC;AACA,6BAAY,eAAe,SAAf,EAAZ,EAAwC,KAAxC;AACA,6BAAY,eAAe,OAAf,EAAZ,EAAsC,IAAtC;AACD,GALD;;AAQA,OAAK,WAAL,EAAkB,MAAM;AACtB,UAAM,iBAAiB,sBAAvB;AACA,mBAAe,MAAf,CAAsB,MAAtB,EAA8B,UAA9B,EAA0C,EAA1C;AACA,6BAAY,eAAe,SAAf,EAAZ,EAAwC,IAAxC;AACA,6BAAY,eAAe,OAAf,EAAZ,EAAsC,KAAtC;AACA,2BAAU,eAAe,SAAf,EAAV,EAAsC,EAAE,MAAM,EAAE,OAAO,UAAT,EAAqB,OAAO,EAA5B,EAAR,EAAtC;AACD,GAND;;AAQA,OAAK,iBAAL,EAAwB,MAAM;AAC5B,UAAM,iBAAiB,qBAAmB;AACxC,aAAQ,IAAD,IAAU;AADuB,KAAnB,CAAvB;;AAIA,mBAAe,MAAf,CAAsB,MAAtB,EAA8B,QAA9B;AACA,6BAAY,eAAe,SAAf,EAAZ,EAAwC,IAAxC;AACA,6BAAY,eAAe,OAAf,EAAZ,EAAsC,KAAtC;AACA,2BAAU,eAAe,SAAf,EAAV,EAAsC,EAAE,MAAM,EAAE,OAAO,UAAT,EAAqB,OAAO,EAA5B,EAAR,EAAtC;AACD,GATD;;AAWA,OAAK,qBAAL,EAA4B,MAAM;AAChC,UAAM,iBAAiB,qBAAmB;AACxC,aAAQ,IAAD,IAAU;AADuB,KAAnB,CAAvB;;AAIA,mBAAe,MAAf,CAAsB,MAAtB,EAA8B,QAA9B;AACA,6BAAY,eAAe,SAAf,EAAZ,EAAwC,KAAxC;AACA,6BAAY,eAAe,OAAf,EAAZ,EAAsC,IAAtC;AACA,6BAAY,eAAe,SAAf,EAAZ,EAAwC,SAAxC;AACD,GATD;AAUD,CAtCD","file":"ParamValidator.js","sourcesContent":["/* global suite, test */\nimport { strictEqual, deepEqual } from 'assert';\nimport { ParamValidator } from '../../';\n\nsuite('param validator', () => {\n  test('on init is valid', () => {\n    const paramValidator = new ParamValidator();\n    strictEqual(paramValidator.getErrors(), undefined);\n    strictEqual(paramValidator.hasErrors(), false);\n    strictEqual(paramValidator.isValid(), true);\n  });\n\n\n  test('has error', () => {\n    const paramValidator = new ParamValidator();\n    paramValidator._error('slug', 'notEmpty', '');\n    strictEqual(paramValidator.hasErrors(), true);\n    strictEqual(paramValidator.isValid(), false);\n    deepEqual(paramValidator.getErrors(), { slug: { error: 'notEmpty', value: '' } });\n  });\n\n  test('.string() empty', () => {\n    const paramValidator = new ParamValidator({\n      param: (name) => '',\n    });\n\n    paramValidator.string('slug').notEmpty();\n    strictEqual(paramValidator.hasErrors(), true);\n    strictEqual(paramValidator.isValid(), false);\n    deepEqual(paramValidator.getErrors(), { slug: { error: 'notEmpty', value: '' } });\n  });\n\n  test('.string() not empty', () => {\n    const paramValidator = new ParamValidator({\n      param: (name) => 'testValue',\n    });\n\n    paramValidator.string('slug').notEmpty();\n    strictEqual(paramValidator.hasErrors(), false);\n    strictEqual(paramValidator.isValid(), true);\n    strictEqual(paramValidator.getErrors(), undefined);\n  });\n});\n"]}