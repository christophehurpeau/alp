{"version":3,"sources":["../../src/index.js"],"names":[],"mappings":";;;;;;;;kBAcwB,S;;AAdxB;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,SAAS,YAAT,CAAsB,OAAtB,EAAuC,IAAvC,EAAqD;AACjD,WAAO,yBAAc,OAAd,GAAwB,IAAxB,WAAP;AACH;;AAED,SAAS,UAAT,CAAoB,OAApB,EAAqC,IAArC,EAAmD;AAC/C,QAAI,UAAU,2BAAgB,OAAhB,GAA0B,IAA1B,WAAd;AACA,WAAO,oCAAU,OAAV,CAAP;AACH;;AAEc,SAAS,SAAT,CAAmB,OAAnB,EAA0D;AAAA,QAAtB,OAAsB,yDAAJ,EAAI;;AACrE,cAAU,QAAQ,OAAR,CAAgB,MAAhB,EAAwB,GAAxB,CAAV;;AAEA,cAAU,OAAO,MAAP,CAAc,EAAd,EAAkB,OAAlB,EAA2B;AACjC,cAAM;AAD2B,KAA3B,CAAV;;AAIA,WAAO,eAAO;AACV,YAAI,YAAJ,GAAmB,UAAC,IAAD;AAAA,mBAAU,aAAa,OAAb,EAAsB,IAAtB,CAAV;AAAA,SAAnB;AACA,YAAI,UAAJ,GAAiB,UAAC,IAAD;AAAA,mBAAU,WAAW,OAAX,EAAoB,IAApB,CAAV;AAAA,SAAjB;;AAEA,YAAM,SAAS,WAAW,OAAX,EAAoB,QAApB,CAAf;AAJU;AAAA;AAAA;;AAAA;AAKV,iCAAyB,WAAW,OAAX,EAAoB,IAAI,GAAxB,CAAzB,8HAAuD;AAAA;;AAAA,oBAA7C,GAA6C;AAAA,oBAAxC,KAAwC;;AACnD,uBAAO,GAAP,CAAW,GAAX,EAAgB,KAAhB;AACH;AAPS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASV,YAAI,aAAa,OAAb,EAAsB,OAAtB,CAAJ,EAAoC;AAAA;AAAA;AAAA;;AAAA;AAChC,sCAAyB,WAAW,OAAX,EAAoB,OAApB,CAAzB,mIAAuD;AAAA;;AAAA,wBAA7C,GAA6C;AAAA,wBAAxC,KAAwC;;AACnD,2BAAO,GAAP,CAAW,GAAX,EAAgB,KAAhB;AACH;AAH+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAInC;;AAED,YAAI,CAAC,OAAO,GAAP,CAAW,SAAX,CAAL,EAA4B;AACxB,mBAAO,GAAP,CAAW,SAAX,EAAsB,uBAAK,OAAL,IAAgB,QAAQ,aAAR,CAAsB,OAA5D;AACH;;AAED,YAAI,aAAa,uBAAK,aAAL,KAAuB,uBAAK,UAA7C;AACA,YAAI,UAAJ,EAAgB;AACZ,mBAAO,GAAP,CAAW,YAAX,EAAyB,UAAzB;AACH,SAFD,MAEO,IAAI,uBAAK,IAAT,EAAe;AAClB,mBAAO,GAAP,CAAW,MAAX,EAAmB,uBAAK,IAAxB;AACA,mBAAO,MAAP,CAAc,YAAd;AACH;;AAED,gBAAQ,IAAR,CAAa,OAAb,CAAqB,eAAO;AACxB,gBAAI,uBAAK,GAAL,MAAc,SAAlB,EAA6B;AACzB,uBAAO,GAAP,CAAW,GAAX,EAAgB,uBAAK,GAAL,CAAhB;AACH;AACJ,SAJD;;AAMA,YAAI,MAAJ,GAAa,MAAb;AACA,YAAI,OAAJ,CAAY,MAAZ,GAAqB,MAArB;;AAEA,eAAO,4BAAW,MAAX,CAAP;AACH,KArCD;AAsCH","file":"index.js","sourcesContent":["import argv from 'minimist-argv';\nimport deepFreeze from 'deep-freeze-es6';\nimport parseJSON from 'parse-json-object-as-map';\nimport { existsSync, readFileSync } from 'fs';\n\nfunction existsConfig(dirname: string, name: string) {\n    return existsSync(`${dirname}${name}.json`);\n}\n\nfunction loadConfig(dirname: string, name: string) {\n    let content = readFileSync(`${dirname}${name}.json`);\n    return parseJSON(content);\n}\n\nexport default function alpConfig(dirname: string, options: Object = {}) {\n    dirname = dirname.replace(/\\/*$/, '/');\n\n    options = Object.assign({}, options, {\n        argv: [],\n    });\n\n    return app => {\n        app.existsConfig = (name) => existsConfig(dirname, name);\n        app.loadConfig = (name) => loadConfig(dirname, name);\n\n        const config = loadConfig(dirname, 'common');\n        for (let [key, value] of loadConfig(dirname, app.env)) {\n            config.set(key, value);\n        }\n\n        if (existsConfig(dirname, 'local')) {\n            for (let [key, value] of loadConfig(dirname, 'local')) {\n                config.set(key, value);\n            }\n        }\n\n        if (!config.has('version')) {\n            config.set('version', argv.version || options.packageConfig.version);\n        }\n\n        let socketPath = argv['socket-path'] || argv.socketPath;\n        if (socketPath) {\n            config.set('socketPath', socketPath);\n        } else if (argv.port) {\n            config.set('port', argv.port);\n            config.delete('socketPath');\n        }\n\n        options.argv.forEach(key => {\n            if (argv[key] !== undefined) {\n                config.set(key, argv[key]);\n            }\n        });\n\n        app.config = config;\n        app.context.config = config;\n\n        return deepFreeze(config);\n    };\n}\n"]}