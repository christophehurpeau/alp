{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;kBAcwB;;AAdxB;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,SAAS,YAAT,CAAsB,OAAtB,EAA+B,IAA/B,EAAqC;AACjC,WAAO,oBAAW,CAAC,GAAE,OAAH,EAAW,GAAE,IAAb,EAAkB,KAAlB,CAAX,CAAP,CADiC;CAArC;;;;;;EAIA,SAAS,UAAT,CAAoB,OAApB,EAA6B,IAA7B,EAAmC;AAC/B,QAAI,UAAU,sBAAa,CAAC,GAAE,OAAH,EAAW,GAAE,IAAb,EAAkB,KAAlB,CAAb,CAAV,CAD2B;AAE/B,WAAO,oCAAU,OAAV,CAAP,CAF+B;CAAnC;;;;;;EAKe,SAAS,SAAT,CAAmB,OAAnB,EAA0C;QAAd,gEAAU,kBAAI;;AACrD,cAAU,QAAQ,OAAR,CAAgB,MAAhB,EAAwB,GAAxB,CAAV,CADqD;;AAGrD,cAAU,OAAO,MAAP,CAAc,EAAd,EAAkB,OAAlB,EAA2B;AACjC,cAAM,EAAN;KADM,CAAV,CAHqD;;AAOrD,WAAO,OAAO;AACV,YAAI,YAAJ,GAAmB,QAAU,aAAa,OAAb,EAAsB,IAAtB,CAAV,CADT;AAEV,YAAI,UAAJ,GAAiB,QAAU,WAAW,OAAX,EAAoB,IAApB,CAAV,CAFP;;AAIV,cAAM,SAAS,WAAW,OAAX,EAAoB,QAApB,CAAT,CAJI;AAKV,yBAAyB,WAAW,OAAX,EAAoB,IAAI,GAAJ,CAA7C,EAAuD;;;gBAA7C,eAA6C;gBAAxC,iBAAwC;;AACnD,mBAAO,GAAP,CAAW,GAAX,EAAgB,KAAhB,EADmD;SAAvD;;AAIA,YAAI,aAAa,OAAb,EAAsB,OAAtB,CAAJ,EAAoC;AAChC,8BAAyB,WAAW,OAAX,EAAoB,OAApB,CAAzB,EAAuD;;;oBAA7C,eAA6C;oBAAxC,iBAAwC;;AACnD,uBAAO,GAAP,CAAW,GAAX,EAAgB,KAAhB,EADmD;aAAvD;SADJ;;AAMA,YAAI,CAAC,OAAO,GAAP,CAAW,SAAX,CAAD,EAAwB;AACxB,mBAAO,GAAP,CAAW,SAAX,EAAsB,uBAAK,OAAL,IAAgB,QAAQ,aAAR,CAAsB,OAAtB,CAAtC,CADwB;SAA5B;;AAIA,YAAI,aAAa,uBAAK,aAAL,KAAuB,uBAAK,UAAL,CAnB9B;AAoBV,YAAI,UAAJ,EAAgB;AACZ,mBAAO,GAAP,CAAW,YAAX,EAAyB,UAAzB,EADY;SAAhB,MAEO,IAAI,uBAAK,IAAL,EAAW;AAClB,mBAAO,GAAP,CAAW,MAAX,EAAmB,uBAAK,IAAL,CAAnB,CADkB;AAElB,mBAAO,MAAP,CAAc,YAAd,EAFkB;SAAf;;AAKP,gBAAQ,IAAR,CAAa,OAAb,CAAqB,OAAO;AACxB,gBAAI,uBAAK,GAAL,MAAc,SAAd,EAAyB;AACzB,uBAAO,GAAP,CAAW,GAAX,EAAgB,uBAAK,GAAL,CAAhB,EADyB;aAA7B;SADiB,CAArB,CA3BU;;AAiCV,YAAI,MAAJ,GAAa,MAAb,CAjCU;AAkCV,YAAI,OAAJ,CAAY,MAAZ,GAAqB,MAArB,CAlCU;AAmCV,YAAI,OAAJ,CAAY,UAAZ,GAAyB,CAAC,CAAC,OAAO,GAAP,CAAW,YAAX,CAAD,CAnChB;;AAqCV,eAAO,4BAAW,MAAX,CAAP,CArCU;KAAP,CAP8C;CAA1C","file":"index.js","sourcesContent":["import argv from 'minimist-argv';\nimport deepFreeze from 'deep-freeze-es6';\nimport parseJSON from 'parse-json-object-as-map';\nimport { existsSync, readFileSync } from 'fs';\n\nfunction existsConfig(dirname, name) {\n    return existsSync(`${dirname}${name}.json`);\n}\n\nfunction loadConfig(dirname, name) {\n    let content = readFileSync(`${dirname}${name}.json`);\n    return parseJSON(content);\n}\n\nexport default function alpConfig(dirname, options = {}) {\n    dirname = dirname.replace(/\\/*$/, '/');\n\n    options = Object.assign({}, options, {\n        argv: [],\n    });\n\n    return app => {\n        app.existsConfig = (name) => existsConfig(dirname, name);\n        app.loadConfig = (name) => loadConfig(dirname, name);\n\n        const config = loadConfig(dirname, 'common');\n        for (let [key, value] of loadConfig(dirname, app.env)) {\n            config.set(key, value);\n        }\n\n        if (existsConfig(dirname, 'local')) {\n            for (let [key, value] of loadConfig(dirname, 'local')) {\n                config.set(key, value);\n            }\n        }\n\n        if (!config.has('version')) {\n            config.set('version', argv.version || options.packageConfig.version);\n        }\n\n        let socketPath = argv['socket-path'] || argv.socketPath;\n        if (socketPath) {\n            config.set('socketPath', socketPath);\n        } else if (argv.port) {\n            config.set('port', argv.port);\n            config.delete('socketPath');\n        }\n\n        options.argv.forEach(key => {\n            if (argv[key] !== undefined) {\n                config.set(key, argv[key]);\n            }\n        });\n\n        app.config = config;\n        app.context.config = config;\n        app.context.production = !!config.get('production');\n\n        return deepFreeze(config);\n    };\n}\n"]}