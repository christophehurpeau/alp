{"version":3,"sources":["../src/browser.js"],"names":[],"mappings":"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","file":"browser.js","sourcesContent":["/* global fetch */\nimport * as storedConfig from './browserStoredConfig';\nimport parseJSON from 'parse-json-object-as-map';\n\nfunction fetchConfig(path) {\n    return fetch(`${path}.json`)\n        .then(res => res.text())\n        .then(text => parseJSON(text))\n        .catch(() => false);\n}\n\n/**\n * @param {string} path\n * @returns {Promise|Map}\n */\nfunction getConfig(path) {\n    if (storedConfig.has(path)) {\n        return storedConfig.get(path);\n    }\n    return fetchConfig(path);\n}\n\n/**\n * @param {string} path\n * @returns {Promise|Boolean}\n */\nfunction existsConfig(path) {\n    if (storedConfig.has(path)) {\n        return storedConfig.get(path) !== false;\n    }\n    return fetchConfig(path);\n}\n\nconst getOrFetchAppConfig = async function (version, environment, configPath) {\n    if (storedConfig.getVersion() === version && storedConfig.has('_appConfig')) {\n        return storedConfig.get('_appConfig');\n    }\n\n    storedConfig.clear(version);\n\n    const jsonConfig = await Promise.all([\n        getConfig(`${configPath}common`),\n        environment && getConfig(`${configPath}environment`),\n        getConfig(`${configPath}local`),\n    ]);\n    const config = jsonConfig[0] || new Map();\n    jsonConfig.slice(1).filter(Boolean).forEach(jsonConfig => {\n        for (let [key, value] of jsonConfig) {\n            config.set(key, value);\n        }\n    });\n\n    storedConfig.set('_appConfig', config);\n    return config;\n};\n\nexport default function alpConfig(configPath) {\n    configPath = configPath.replace(/\\/*$/, '/');\n    return async function (app) {\n        app.existsConfig = (name) => existsConfig(`${configPath}${name}`);\n        app.loadConfig = (name) => getConfig(`${configPath}${name}`);\n\n        const version = app.appVersion;\n\n        if (!version) {\n            throw new Error('Missing appVersion');\n        }\n\n        const config = await getOrFetchAppConfig(version, app.environment, configPath);\n        app.config = config;\n        app.context.config = config;\n        app.context.production = !!config.get('production');\n        return config;\n    };\n}\n"]}