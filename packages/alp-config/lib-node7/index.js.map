{"version":3,"sources":["../src/index.js"],"names":["alpConfig","_existsConfigSync","dirname","name","_loadConfigSync","content","Config","constructor","_map","Map","_dirname","replace","loadSync","options","env","process","CONFIG_ENV","NODE_ENV","argv","argvOverrides","packageConfig","version","config","loadConfigSync","key","value","set","existsConfigSync","has","Error","socketPath","port","delete","PORT","Number","forEach","splitted","split","length","reduce","partialKey","undefined","last","pop","map","get","app","existsConfig","loadConfig","context"],"mappings":"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","file":"index.js","sourcesContent":["import { deprecate } from 'util';\nimport argv from 'minimist-argv';\nimport deepFreeze from 'deep-freeze-es6';\nimport parseJSON from 'parse-json-object-as-map';\nimport { existsSync, readFileSync } from 'fs';\n\nfunction _existsConfigSync(dirname: string, name: string) {\n  return existsSync(`${dirname}${name}.json`);\n}\n\nfunction _loadConfigSync(dirname: string, name: string) {\n  let content = readFileSync(`${dirname}${name}.json`);\n  return parseJSON(content);\n}\n\ntype ConfigOptions = {|\n    argv: ?Array<string>,\n    packageConfig: ?Object,\n    version: ?string,\n|}\n\nexport class Config {\n  _map: Map<string, any>;\n  _dirname: string;\n  packageConfig: Object;\n\n  constructor(dirname: string) {\n    this._map = new Map();\n    this._dirname = dirname.replace(/\\/*$/, '/');\n  }\n\n  loadSync(options: ConfigOptions = {}): Map<string, any> {\n    const env = process.env.CONFIG_ENV || process.env.NODE_ENV || 'development';\n    const { argv: argvOverrides = [], packageConfig, version } = options;\n    this.packageConfig = packageConfig;\n\n    const config = this.loadConfigSync('common');\n    // eslint-disable-next-line no-restricted-syntax\n    for (let [key, value] of this.loadConfigSync(env)) {\n      config.set(key, value);\n    }\n\n    if (this.existsConfigSync('local')) {\n      // eslint-disable-next-line no-restricted-syntax\n      for (let [key, value] of this.loadConfigSync('local')) {\n        config.set(key, value);\n      }\n    }\n\n    if (config.has('version')) {\n      throw new Error('Cannot have \"version\", in config.');\n    }\n\n    config.set('version', version || argv.version || packageConfig.version);\n\n    let socketPath = argv['socket-path'] || argv.socketPath;\n    if (socketPath) {\n      config.set('socketPath', socketPath);\n    } else if (argv.port) {\n      config.set('port', argv.port);\n      config.delete('socketPath');\n    } else if (process.env.PORT) {\n      config.set('port', Number(process.env.PORT));\n      config.delete('socketPath');\n    }\n\n    argvOverrides.forEach(key => {\n      const splitted = key.split('.');\n      const value = splitted.length !== 0\n                && splitted.reduce((config, partialKey) => config && config[partialKey], argv);\n      if (value !== undefined) {\n        const last = splitted.pop();\n        const map = splitted.length === 0 ? config\n                    : splitted.reduce((config, partialKey) => config.get(partialKey), config);\n        map.set(last, value);\n      }\n    });\n\n    return this._map = deepFreeze(config);\n  }\n\n  get(key: string): any {\n    return this._map.get(key);\n  }\n\n  existsConfigSync(name: string): boolean {\n    return _existsConfigSync(this._dirname, name);\n  }\n\n  loadConfigSync(name: string): Map<string, any> {\n    return _loadConfigSync(this._dirname, name);\n  }\n}\n\nexport default function alpConfig(dirname: ?string, options: ConfigOptions = {}) {\n  return (app, config: ?Config) => {\n    if (!config) {\n      config = new Config(dirname);\n      config.loadSync(options);\n    }\n\n    app.existsConfig = deprecate((name) => config.existsConfigSync(name), 'use app.existsConfigSync');\n    app.loadConfig = deprecate((name) => config.loadConfigSync(name), 'use app.loadConfigSync');\n\n    app.existsConfigSync = name => config.existsConfigSync(name);\n    app.loadConfigSync = name => config.loadConfigSync(name);\n\n    app.config = config;\n    app.context.config = config;\n\n    return config;\n  };\n}\n"]}