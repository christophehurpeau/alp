{"version":3,"sources":["../src/index.js"],"names":["deprecate","argv","deepFreeze","parseJSON","existsSync","readFileSync","_existsConfigSync","dirname","name","_loadConfigSync","content","Config","constructor","_map","Map","_dirname","replace","loadSync","options","env","process","CONFIG_ENV","NODE_ENV","argvOverrides","packageConfig","version","config","loadConfigSync","key","value","set","existsConfigSync","has","Error","socketPath","port","delete","forEach","splitted","split","length","reduce","partialKey","undefined","last","pop","map","get","alpConfig","app","existsConfig","loadConfig","context"],"mappings":"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","file":"index.js","sourcesContent":["import { deprecate } from 'util';\nimport argv from 'minimist-argv';\nimport deepFreeze from 'deep-freeze-es6';\nimport parseJSON from 'parse-json-object-as-map';\nimport { existsSync, readFileSync } from 'fs';\n\nfunction _existsConfigSync(dirname: string, name: string) {\n  return existsSync(`${dirname}${name}.json`);\n}\n\nfunction _loadConfigSync(dirname: string, name: string) {\n  let content = readFileSync(`${dirname}${name}.json`);\n  return parseJSON(content);\n}\n\ntype ConfigOptions = {\n    argv?: Array<string>,\n    packageConfig?: Object,\n    version?: string,\n}\n\nexport class Config {\n  _map: Map;\n  _dirname: string;\n  packageConfig: Object;\n\n  constructor(dirname: string) {\n    this._map = new Map();\n    this._dirname = dirname.replace(/\\/*$/, '/');\n  }\n\n  loadSync(options: ConfigOptions = {}): Map {\n    const env = process.env.CONFIG_ENV || process.env.NODE_ENV || 'development';\n    const { argv: argvOverrides = [], packageConfig, version } = options;\n    this.packageConfig = packageConfig;\n\n    const config = this.loadConfigSync('common');\n    // eslint-disable-next-line no-restricted-syntax\n    for (let [key, value] of this.loadConfigSync(env)) {\n      config.set(key, value);\n    }\n\n    if (this.existsConfigSync('local')) {\n      // eslint-disable-next-line no-restricted-syntax\n      for (let [key, value] of this.loadConfigSync('local')) {\n        config.set(key, value);\n      }\n    }\n\n    if (config.has('version')) {\n      throw new Error('Cannot have \"version\", in config.');\n    }\n\n    config.set('version', version || argv.version || packageConfig.version);\n\n    let socketPath = argv['socket-path'] || argv.socketPath;\n    if (socketPath) {\n      config.set('socketPath', socketPath);\n    } else if (argv.port) {\n      config.set('port', argv.port);\n      config.delete('socketPath');\n    }\n\n    argvOverrides.forEach(key => {\n      const splitted = key.split('.');\n      const value = splitted.length !== 0\n                && splitted.reduce((config, partialKey) => config && config[partialKey], argv);\n      if (value !== undefined) {\n        const last = splitted.pop();\n        const map = splitted.length === 0 ? config\n                    : splitted.reduce((config, partialKey) => config.get(partialKey), config);\n        map.set(last, value);\n      }\n    });\n\n    return this._map = deepFreeze(config);\n  }\n\n  get(key: string): any {\n    return this._map.get(key);\n  }\n\n  existsConfigSync(name: string): boolean {\n    return _existsConfigSync(this._dirname, name);\n  }\n\n  loadConfigSync(name: string): Map {\n    return _loadConfigSync(this._dirname, name);\n  }\n}\n\nexport default function alpConfig(dirname: ?string, options: ConfigOptions = {}) {\n  return (app, config: ?Config) => {\n    if (!config) {\n      config = new Config(dirname, options);\n      config.loadSync(options);\n    }\n\n    app.existsConfig = deprecate((name) => config.existsConfigSync(name), 'use app.existsConfigSync');\n    app.loadConfig = deprecate((name) => config.loadConfigSync(name), 'use app.loadConfigSync');\n\n    app.existsConfigSync = name => config.existsConfigSync(name);\n    app.loadConfigSync = name => config.loadConfigSync(name);\n\n    app.config = config;\n    app.context.config = config;\n\n    return config;\n  };\n}\n"]}