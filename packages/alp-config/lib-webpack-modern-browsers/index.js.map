{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { deprecate } from 'util';\nimport argv from 'minimist-argv';\nimport deepFreeze from 'deep-freeze-es6';\nimport parseJSON from 'parse-json-object-as-map';\nimport { existsSync, readFileSync } from 'fs';\n\nfunction _existsConfigSync(dirname: string, name: string) {\n    return existsSync(`${dirname}${name}.json`);\n}\n\nfunction _loadConfigSync(dirname: string, name: string) {\n    let content = readFileSync(`${dirname}${name}.json`);\n    return parseJSON(content);\n}\n\ntype ConfigOptions = {\n    argv?: Array<string>,\n    packageConfig?: Object,\n    version?: string,\n}\n\nexport class Config {\n    _map: Map;\n    _dirname: string;\n\n    constructor(dirname: string) {\n        this._map = new Map();\n        this._dirname = dirname.replace(/\\/*$/, '/');\n    }\n\n    loadSync(options: ConfigOptions = {}): Map {\n        const env = process.env.CONFIG_ENV || process.env.NODE_ENV || 'development';\n        const { argv: argvOverrides = [], packageConfig, version } = options;\n\n        const config = this.loadConfigSync('common');\n        for (let [key, value] of this.loadConfigSync(env)) {\n            config.set(key, value);\n        }\n\n        if (this.existsConfigSync('local')) {\n            for (let [key, value] of this.loadConfigSync('local')) {\n                config.set(key, value);\n            }\n        }\n\n        if (!config.has('version')) {\n            config.set('version', version || argv.version || packageConfig.version);\n        }\n\n        let socketPath = argv['socket-path'] || argv.socketPath;\n        if (socketPath) {\n            config.set('socketPath', socketPath);\n        } else if (argv.port) {\n            config.set('port', argv.port);\n            config.delete('socketPath');\n        }\n\n        argvOverrides.forEach(key => {\n            const splitted = key.split('.');\n            const value = splitted.length !== 0\n                && splitted.reduce((config, partialKey) => config && config[partialKey], argv);\n            if (value !== undefined) {\n                const last = splitted.pop();\n                const map = splitted.length === 0 ? config\n                    : splitted.reduce((config, partialKey) => config.get(partialKey), config);\n                map.set(last, value);\n            }\n        });\n\n        return this._map = deepFreeze(config);\n    }\n\n    get(key: string): any {\n        return this._map.get(key);\n    }\n\n    existsConfigSync(name: string): boolean {\n        return _existsConfigSync(this._dirname, name);\n    }\n\n    loadConfigSync(name: string): Map {\n        return _loadConfigSync(this._dirname, name);\n    }\n}\n\nexport default function alpConfig(dirname: ?string, options: ConfigOptions = {}) {\n    return (app, config: ?Config) => {\n        if (!config) {\n            config = new Config(dirname, options);\n            config.loadSync(options);\n        }\n\n        app.existsConfig = deprecate((name) => config.existsConfigSync(name), 'use app.existsConfigSync');\n        app.loadConfig = deprecate((name) => config.loadConfigSync(name), 'use app.loadConfigSync');\n\n        app.existsConfigSync = name => config.existsConfigSync(name);\n        app.loadConfigSync = name => config.loadConfigSync(name);\n\n        app.config = config;\n        app.context.config = config;\n\n        return config;\n    };\n}\n"]}