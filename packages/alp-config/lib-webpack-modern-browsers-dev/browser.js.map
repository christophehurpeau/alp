{"version":3,"sources":["../src/browser.js"],"names":[],"mappings":"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","file":"browser.js","sourcesContent":["/* global fetch */\nimport * as storedConfig from './browserStoredConfig';\nimport parseJSON from 'parse-json-object-as-map';\n\nfunction fetchConfig(path) {\n    return fetch(`${path}.json`)\n        .then(res => res.text())\n        .then(text => parseJSON(text))\n        .catch(() => false);\n}\n\n/**\n * @param {string} path\n * @returns {Promise|Map}\n */\nfunction getConfig(path) {\n    if (storedConfig.has(path)) {\n        return storedConfig.get(path);\n    }\n    return fetchConfig(path);\n}\n\n/**\n * @param {string} path\n * @returns {Promise|Boolean}\n */\nfunction existsConfig(path) {\n    if (storedConfig.has(path)) {\n        return storedConfig.get(path) !== false;\n    }\n    return fetchConfig(path);\n}\n\nconst getOrFetchAppConfig = async function (version, environment, configPath) {\n    if (storedConfig.getVersion() === version && storedConfig.has('_appConfig')) {\n        return storedConfig.get('_appConfig');\n    }\n\n    storedConfig.clear(version);\n\n    const jsonConfig = await Promise.all([\n        getConfig(`${configPath}common`),\n        environment && getConfig(`${configPath}environment`),\n        getConfig(`${configPath}local`),\n    ]);\n    const config = jsonConfig[0] || new Map();\n    jsonConfig.slice(1).filter(Boolean).forEach(jsonConfig => {\n        for (let [key, value] of jsonConfig) {\n            config.set(key, value);\n        }\n    });\n\n    storedConfig.set('_appConfig', config);\n    return config;\n};\n\nexport default function alpConfig(configPath) {\n    configPath = configPath.replace(/\\/*$/, '/');\n    return async function (app) {\n        app.existsConfig = (name) => existsConfig(`${configPath}${name}`);\n        app.loadConfig = (name) => getConfig(`${configPath}${name}`);\n\n        const version = app.appVersion;\n\n        if (!version) {\n            throw new Error('Missing appVersion');\n        }\n\n        const config = await getOrFetchAppConfig(version, app.environment, configPath);\n        app.config = config;\n        app.context.config = config;\n        app.context.production = !!config.get('production');\n        return config;\n    };\n}\n"]}