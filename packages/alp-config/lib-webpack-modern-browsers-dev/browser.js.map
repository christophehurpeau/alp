{"version":3,"sources":["../src/browser.js"],"names":[],"mappings":"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","file":"browser.js","sourcesContent":["/* global fetch */\nimport * as storedConfig from './browserStoredConfig';\nimport parseJSON from 'parse-json-object-as-map';\n\nfunction fetchConfig(path) {\n    return fetch(`${path}.json`)\n        .then(res => res.text())\n        .then(text => parseJSON(text))\n        .catch(() => false);\n}\n\n/**\n * @param {string} path\n * @returns {Promise|Map}\n */\nfunction getConfig(path) {\n    if (storedConfig.has(path)) {\n        return storedConfig.get(path);\n    }\n    return fetchConfig(path);\n}\n\n/**\n * @param {string} path\n * @returns {Promise|Boolean}\n */\nfunction existsConfig(path) {\n    if (storedConfig.has(path)) {\n        return storedConfig.get(path) !== false;\n    }\n    return fetchConfig(path);\n}\n\nconst getOrFetchAppConfig = function (version, environment, configPath) {\n    if (storedConfig.getVersion() === version && storedConfig.has('_appConfig')) {\n        return Promise.resolve(storedConfig.get('_appConfig'));\n    }\n\n    storedConfig.clear(version);\n\n    return Promise.all([\n        getConfig(`${configPath}common`),\n        environment && getConfig(`${configPath}environment`),\n        getConfig(`${configPath}local`),\n    ]).then(([config, ...others]) => {\n        if (!config) config = new Map();\n\n        others.filter(Boolean).forEach(jsonConfig => {\n            jsonConfig.forEach((value, key) => config.set(key, value));\n        });\n\n        storedConfig.set('_appConfig', config);\n\n        return config;\n    });\n};\n\nexport default function alpConfig(configPath) {\n    configPath = configPath.replace(/\\/*$/, '/');\n    return function (app) {\n        app.existsConfig = (name) => existsConfig(`${configPath}${name}`);\n        app.loadConfig = (name) => getConfig(`${configPath}${name}`);\n\n        const version = app.appVersion;\n\n        if (!version) {\n            throw new Error('Missing appVersion');\n        }\n\n        return getOrFetchAppConfig(version, app.environment, configPath).then(config => {\n            app.config = config;\n            app.context.config = config;\n            app.context.production = !!config.get('production');\n            return config;\n        });\n    };\n}\n"]}