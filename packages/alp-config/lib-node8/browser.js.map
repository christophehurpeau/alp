{"version":3,"sources":["../src/browser.js"],"names":["alpConfig","storedConfig","fetchConfig","path","fetch","then","res","text","catch","getConfig","has","get","existsConfig","getOrFetchAppConfig","version","environment","configPath","getVersion","Promise","resolve","clear","all","config","others","Map","set","filter","Boolean","forEach","jsonConfig","value","key","replace","app","name","loadConfig","appVersion","Error","context"],"mappings":";;;;;kBA0DwBA,S;;AAzDxB;;;;AACA;;IAAYC,Y;;;;;;AAFZ;AAIA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,SAAOC,MAAO,GAAED,IAAK,OAAd,EACJE,IADI,CACCC,OAAOA,IAAIC,IAAJ,EADR,EAEJF,IAFI,CAECE,QAAQ,oCAAUA,IAAV,CAFT,EAGJC,KAHI,CAGE,MAAM,KAHR,CAAP;AAID;;AAED;;;;AAIA,SAASC,SAAT,CAAmBN,IAAnB,EAAyB;AAAA,SACnBF,aAAaS,GAAb,CAAiBP,IAAjB,CADmB,GAEdF,aAAaU,GAAb,CAAiBR,IAAjB,CAFc,GAIhBD,YAAYC,IAAZ,CAJgB;AAKxB;;AAED;;;;AAIA,SAASS,YAAT,CAAsBT,IAAtB,EAA4B;AAAA,SACtBF,aAAaS,GAAb,CAAiBP,IAAjB,CADsB,GAEjBF,aAAaU,GAAb,CAAiBR,IAAjB,MAA2B,KAFV,GAInBD,YAAYC,IAAZ,CAJmB;AAK3B;;AAED,MAAMU,sBAAsB,UAASC,OAAT,EAAkBC,WAAlB,EAA+BC,UAA/B,EAA2C;AAAA,SACjEf,aAAagB,UAAb,OAA8BH,OAA9B,IAAyCb,aAAaS,GAAb,CAAiB,YAAjB,CADwB,GAE5DQ,QAAQC,OAAR,CAAgBlB,aAAaU,GAAb,CAAiB,YAAjB,CAAhB,CAF4D,IAKrEV,aAAamB,KAAb,CAAmBN,OAAnB,CALqE,EAO9DI,QAAQG,GAAR,CAAY,CACjBZ,UAAW,GAAEO,UAAW,QAAxB,CADiB,EAEjBD,eAAeN,UAAW,GAAEO,UAAW,aAAxB,CAFE,EAGjBP,UAAW,GAAEO,UAAW,OAAxB,CAHiB,CAAZ,EAIJX,IAJI,CAIC,CAAC,CAACiB,MAAD,EAAS,GAAGC,MAAZ,CAAD,MACDD,MADC,KACOA,SAAS,IAAIE,GAAJ,EADhB,GAENF,OAAOG,GAAP,CAAW,SAAX,EAAsBX,OAAtB,CAFM,EAINS,OAAOG,MAAP,CAAcC,OAAd,EAAuBC,OAAvB,CAA+BC,cAAc;AAC3CA,eAAWD,OAAX,CAAmB,CAACE,KAAD,EAAQC,GAAR,KAAgBT,OAAOG,GAAP,CAAWM,GAAX,EAAgBD,KAAhB,CAAnC,CAD2C;AAE5C,GAFD,CAJM,EAQN7B,aAAawB,GAAb,CAAiB,YAAjB,EAA+BH,MAA/B,CARM,EAUCA,MAVD,CAJD,CAP8D;AAuBtE,CAvBD;;AAyBe,SAAStB,SAAT,CAAmBgB,UAAnB,EAA+B;AAE5C,SADAA,aAAaA,WAAWgB,OAAX,CAAmB,MAAnB,EAA2B,GAA3B,CACb,EAAO,UAASC,GAAT,EAAc;AACnBA,QAAIrB,YAAJ,GAAmBsB,QAAQtB,aAAc,GAAEI,UAAW,GAAEkB,IAAK,EAAlC,CADR,EAEnBD,IAAIE,UAAJ,GAAiBD,QAAQzB,UAAW,GAAEO,UAAW,GAAEkB,IAAK,EAA/B,CAFN;;;AAInB,UAAMpB,UAAUmB,IAAIG,UAApB;;AAEA,QAAI,CAACtB,OAAL,EACE,MAAM,IAAIuB,KAAJ,CAAU,oBAAV,CAAN;;AAGF,WAAOxB,oBAAoBC,OAApB,EAA6BmB,IAAIlB,WAAjC,EAA8CC,UAA9C,EAA0DX,IAA1D,CAA+DiB,WACpEW,IAAIX,MAAJ,GAAaA,MADuD,EAEpEW,IAAIK,OAAJ,CAAYhB,MAAZ,GAAqBA,MAF+C,EAG7DA,MAH6D,CAA/D,CAAP;AAKD,GAfD;AAgBD","file":"browser.js","sourcesContent":["/* global fetch */\nimport parseJSON from 'parse-json-object-as-map';\nimport * as storedConfig from './browserStoredConfig';\n\nfunction fetchConfig(path) {\n  return fetch(`${path}.json`)\n    .then(res => res.text())\n    .then(text => parseJSON(text))\n    .catch(() => false);\n}\n\n/**\n * @param {string} path\n * @returns {Promise|Map}\n */\nfunction getConfig(path) {\n  if (storedConfig.has(path)) {\n    return storedConfig.get(path);\n  }\n  return fetchConfig(path);\n}\n\n/**\n * @param {string} path\n * @returns {Promise|Boolean}\n */\nfunction existsConfig(path) {\n  if (storedConfig.has(path)) {\n    return storedConfig.get(path) !== false;\n  }\n  return fetchConfig(path);\n}\n\nconst getOrFetchAppConfig = function(version, environment, configPath) {\n  if (storedConfig.getVersion() === version && storedConfig.has('_appConfig')) {\n    return Promise.resolve(storedConfig.get('_appConfig'));\n  }\n\n  storedConfig.clear(version);\n\n  return Promise.all([\n    getConfig(`${configPath}common`),\n    environment && getConfig(`${configPath}environment`),\n    getConfig(`${configPath}local`),\n  ]).then(([config, ...others]) => {\n    if (!config) config = new Map();\n    config.set('version', version);\n\n    others.filter(Boolean).forEach(jsonConfig => {\n      jsonConfig.forEach((value, key) => config.set(key, value));\n    });\n\n    storedConfig.set('_appConfig', config);\n\n    return config;\n  });\n};\n\nexport default function alpConfig(configPath) {\n  configPath = configPath.replace(/\\/*$/, '/');\n  return function(app) {\n    app.existsConfig = name => existsConfig(`${configPath}${name}`);\n    app.loadConfig = name => getConfig(`${configPath}${name}`);\n\n    const version = app.appVersion;\n\n    if (!version) {\n      throw new Error('Missing appVersion');\n    }\n\n    return getOrFetchAppConfig(version, app.environment, configPath).then(config => {\n      app.config = config;\n      app.context.config = config;\n      return config;\n    });\n  };\n}\n"]}