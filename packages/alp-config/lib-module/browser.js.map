{"version":3,"sources":["../src/browser.js"],"names":["parseJSON","storedConfig","fetchConfig","path","fetch","then","res","text","catch","getConfig","has","get","existsConfig","getOrFetchAppConfig","version","environment","configPath","getVersion","Promise","resolve","clear","all","config","others","Map","set","filter","Boolean","forEach","jsonConfig","value","key","alpConfig","replace","app","name","loadConfig","appVersion","Error","context"],"mappings":"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","file":"browser.js","sourcesContent":["/* global fetch */\nimport parseJSON from 'parse-json-object-as-map';\nimport * as storedConfig from './browserStoredConfig';\n\nfunction fetchConfig(path) {\n  return fetch(`${path}.json`)\n        .then(res => res.text())\n        .then(text => parseJSON(text))\n        .catch(() => false);\n}\n\n/**\n * @param {string} path\n * @returns {Promise|Map}\n */\nfunction getConfig(path) {\n  if (storedConfig.has(path)) {\n    return storedConfig.get(path);\n  }\n  return fetchConfig(path);\n}\n\n/**\n * @param {string} path\n * @returns {Promise|Boolean}\n */\nfunction existsConfig(path) {\n  if (storedConfig.has(path)) {\n    return storedConfig.get(path) !== false;\n  }\n  return fetchConfig(path);\n}\n\nconst getOrFetchAppConfig = function (version, environment, configPath) {\n  if (storedConfig.getVersion() === version && storedConfig.has('_appConfig')) {\n    return Promise.resolve(storedConfig.get('_appConfig'));\n  }\n\n  storedConfig.clear(version);\n\n  return Promise.all([\n    getConfig(`${configPath}common`),\n    environment && getConfig(`${configPath}environment`),\n    getConfig(`${configPath}local`),\n  ]).then(([config, ...others]) => {\n    if (!config) config = new Map();\n    config.set('version', version);\n\n    others.filter(Boolean).forEach(jsonConfig => {\n      jsonConfig.forEach((value, key) => config.set(key, value));\n    });\n\n    storedConfig.set('_appConfig', config);\n\n    return config;\n  });\n};\n\nexport default function alpConfig(configPath) {\n  configPath = configPath.replace(/\\/*$/, '/');\n  return function (app) {\n    app.existsConfig = (name) => existsConfig(`${configPath}${name}`);\n    app.loadConfig = (name) => getConfig(`${configPath}${name}`);\n\n    const version = app.appVersion;\n\n    if (!version) {\n      throw new Error('Missing appVersion');\n    }\n\n    return getOrFetchAppConfig(version, app.environment, configPath).then(config => {\n      app.config = config;\n      app.context.config = config;\n      return config;\n    });\n  };\n}\n"]}