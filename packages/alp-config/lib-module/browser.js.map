{"version":3,"sources":["../src/browser.js"],"names":["parseJSON","storedConfig","fetchConfig","path","fetch","then","res","text","catch","getConfig","has","get","existsConfig","getOrFetchAppConfig","version","environment","configPath","getVersion","Promise","resolve","clear","all","config","others","Map","set","filter","Boolean","forEach","jsonConfig","value","key","alpConfig","replace","app","name","loadConfig","appVersion","Error","context"],"mappings":";;AAAA;AACA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAO,KAAKC,YAAZ,MAA8B,uBAA9B;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,SAAOC,MAASD,IAAT,YACJE,IADI,CACC;AAAA,WAAOC,IAAIC,IAAJ,EAAP;AAAA,GADD,EAEJF,IAFI,CAEC;AAAA,WAAQL,UAAUO,IAAV,CAAR;AAAA,GAFD,EAGJC,KAHI,CAGE;AAAA,WAAM,KAAN;AAAA,GAHF,CAAP;AAID;;AAED;;;;AAIA,SAASC,SAAT,CAAmBN,IAAnB,EAAyB;AAAA,SACnBF,aAAaS,GAAb,CAAiBP,IAAjB,CADmB,GAEdF,aAAaU,GAAb,CAAiBR,IAAjB,CAFc,GAIhBD,YAAYC,IAAZ,CAJgB;AAKxB;;AAED;;;;AAIA,SAASS,YAAT,CAAsBT,IAAtB,EAA4B;AAAA,SACtBF,aAAaS,GAAb,CAAiBP,IAAjB,CADsB,GAEjBF,aAAaU,GAAb,CAAiBR,IAAjB,MAA2B,KAFV,GAInBD,YAAYC,IAAZ,CAJmB;AAK3B;;AAED,IAAMU,sBAAsB,SAAtBA,mBAAsB,CAASC,OAAT,EAAkBC,WAAlB,EAA+BC,UAA/B,EAA2C;AAAA,SACjEf,aAAagB,UAAb,OAA8BH,OAA9B,IAAyCb,aAAaS,GAAb,CAAiB,YAAjB,CADwB,GAE5DQ,QAAQC,OAAR,CAAgBlB,aAAaU,GAAb,CAAiB,YAAjB,CAAhB,CAF4D,IAKrEV,aAAamB,KAAb,CAAmBN,OAAnB,CALqE,EAO9DI,QAAQG,GAAR,CAAY,CACjBZ,UAAaO,UAAb,YADiB,EAEjBD,eAAeN,UAAaO,UAAb,iBAFE,EAGjBP,UAAaO,UAAb,WAHiB,CAAZ,EAIJX,IAJI,CAIC,gBAAyB;AAAA;AAAA,QAAvBiB,MAAuB;AAAA,QAAZC,MAAY;;AAU/B,WATKD,MASL,KATaA,SAAS,IAAIE,GAAJ,EAStB,GARAF,OAAOG,GAAP,CAAW,SAAX,EAAsBX,OAAtB,CAQA,EANAS,OAAOG,MAAP,CAAcC,OAAd,EAAuBC,OAAvB,CAA+B,sBAAc;AAC3CC,iBAAWD,OAAX,CAAmB,UAACE,KAAD,EAAQC,GAAR;AAAA,eAAgBT,OAAOG,GAAP,CAAWM,GAAX,EAAgBD,KAAhB,CAAhB;AAAA,OAAnB,CAD2C;AAE5C,KAFD,CAMA,EAFA7B,aAAawB,GAAb,CAAiB,YAAjB,EAA+BH,MAA/B,CAEA,EAAOA,MAAP;AACD,GAfM,CAP8D;AAuBtE,CAvBD;;AAyBA,eAAe,SAASU,SAAT,CAAmBhB,UAAnB,EAA+B;AAE5C,SADAA,aAAaA,WAAWiB,OAAX,CAAmB,MAAnB,EAA2B,GAA3B,CACb,EAAO,UAASC,GAAT,EAAc;AACnBA,QAAItB,YAAJ,GAAmB;AAAA,aAAQA,kBAAgBI,UAAhB,GAA6BmB,IAA7B,CAAR;AAAA,KADA,EAEnBD,IAAIE,UAAJ,GAAiB;AAAA,aAAQ3B,eAAaO,UAAb,GAA0BmB,IAA1B,CAAR;AAAA,KAFE;;;AAInB,QAAMrB,UAAUoB,IAAIG,UAApB;;AAEA,QAAI,CAACvB,OAAL,EACE,MAAM,IAAIwB,KAAJ,CAAU,oBAAV,CAAN;;AAGF,WAAOzB,oBAAoBC,OAApB,EAA6BoB,IAAInB,WAAjC,EAA8CC,UAA9C,EAA0DX,IAA1D,CAA+D,kBAAU;AAG9E,aAFA6B,IAAIZ,MAAJ,GAAaA,MAEb,EADAY,IAAIK,OAAJ,CAAYjB,MAAZ,GAAqBA,MACrB,EAAOA,MAAP;AACD,KAJM,CAAP;AAKD,GAfD;AAgBD","file":"browser.js","sourcesContent":["/* global fetch */\nimport parseJSON from 'parse-json-object-as-map';\nimport * as storedConfig from './browserStoredConfig';\n\nfunction fetchConfig(path) {\n  return fetch(`${path}.json`)\n    .then(res => res.text())\n    .then(text => parseJSON(text))\n    .catch(() => false);\n}\n\n/**\n * @param {string} path\n * @returns {Promise|Map}\n */\nfunction getConfig(path) {\n  if (storedConfig.has(path)) {\n    return storedConfig.get(path);\n  }\n  return fetchConfig(path);\n}\n\n/**\n * @param {string} path\n * @returns {Promise|Boolean}\n */\nfunction existsConfig(path) {\n  if (storedConfig.has(path)) {\n    return storedConfig.get(path) !== false;\n  }\n  return fetchConfig(path);\n}\n\nconst getOrFetchAppConfig = function(version, environment, configPath) {\n  if (storedConfig.getVersion() === version && storedConfig.has('_appConfig')) {\n    return Promise.resolve(storedConfig.get('_appConfig'));\n  }\n\n  storedConfig.clear(version);\n\n  return Promise.all([\n    getConfig(`${configPath}common`),\n    environment && getConfig(`${configPath}environment`),\n    getConfig(`${configPath}local`),\n  ]).then(([config, ...others]) => {\n    if (!config) config = new Map();\n    config.set('version', version);\n\n    others.filter(Boolean).forEach(jsonConfig => {\n      jsonConfig.forEach((value, key) => config.set(key, value));\n    });\n\n    storedConfig.set('_appConfig', config);\n\n    return config;\n  });\n};\n\nexport default function alpConfig(configPath) {\n  configPath = configPath.replace(/\\/*$/, '/');\n  return function(app) {\n    app.existsConfig = name => existsConfig(`${configPath}${name}`);\n    app.loadConfig = name => getConfig(`${configPath}${name}`);\n\n    const version = app.appVersion;\n\n    if (!version) {\n      throw new Error('Missing appVersion');\n    }\n\n    return getOrFetchAppConfig(version, app.environment, configPath).then(config => {\n      app.config = config;\n      app.context.config = config;\n      return config;\n    });\n  };\n}\n"]}