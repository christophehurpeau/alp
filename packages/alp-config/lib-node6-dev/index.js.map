{"version":3,"sources":["../src/index.js"],"names":["alpConfig","_existsConfigSync","dirname","name","_loadConfigSync","content","ConfigOptions","argv","packageConfig","version","Config","constructor","_map","Map","_dirname","replace","loadSync","options","env","process","CONFIG_ENV","NODE_ENV","argvOverrides","config","loadConfigSync","key","value","set","existsConfigSync","has","Error","socketPath","port","delete","forEach","splitted","split","length","reduce","partialKey","undefined","last","pop","map","get","app","existsConfig","loadConfig","context"],"mappings":"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","file":"index.js","sourcesContent":["import { deprecate } from 'util';\nimport argv from 'minimist-argv';\nimport deepFreeze from 'deep-freeze-es6';\nimport parseJSON from 'parse-json-object-as-map';\nimport { existsSync, readFileSync } from 'fs';\n\nfunction _existsConfigSync(dirname: string, name: string) {\n  return existsSync(`${dirname}${name}.json`);\n}\n\nfunction _loadConfigSync(dirname: string, name: string) {\n  let content = readFileSync(`${dirname}${name}.json`);\n  return parseJSON(content);\n}\n\ntype ConfigOptions = {\n    argv?: Array<string>,\n    packageConfig?: Object,\n    version?: string,\n}\n\nexport class Config {\n  _map: Map;\n  _dirname: string;\n  packageConfig: Object;\n\n  constructor(dirname: string) {\n    this._map = new Map();\n    this._dirname = dirname.replace(/\\/*$/, '/');\n  }\n\n  loadSync(options: ConfigOptions = {}): Map {\n    const env = process.env.CONFIG_ENV || process.env.NODE_ENV || 'development';\n    const { argv: argvOverrides = [], packageConfig, version } = options;\n    this.packageConfig = packageConfig;\n\n    const config = this.loadConfigSync('common');\n    // eslint-disable-next-line no-restricted-syntax\n    for (let [key, value] of this.loadConfigSync(env)) {\n      config.set(key, value);\n    }\n\n    if (this.existsConfigSync('local')) {\n      // eslint-disable-next-line no-restricted-syntax\n      for (let [key, value] of this.loadConfigSync('local')) {\n        config.set(key, value);\n      }\n    }\n\n    if (config.has('version')) {\n      throw new Error('Cannot have \"version\", in config.');\n    }\n\n    config.set('version', version || argv.version || packageConfig.version);\n\n    let socketPath = argv['socket-path'] || argv.socketPath;\n    if (socketPath) {\n      config.set('socketPath', socketPath);\n    } else if (argv.port) {\n      config.set('port', argv.port);\n      config.delete('socketPath');\n    }\n\n    argvOverrides.forEach(key => {\n      const splitted = key.split('.');\n      const value = splitted.length !== 0\n                && splitted.reduce((config, partialKey) => config && config[partialKey], argv);\n      if (value !== undefined) {\n        const last = splitted.pop();\n        const map = splitted.length === 0 ? config\n                    : splitted.reduce((config, partialKey) => config.get(partialKey), config);\n        map.set(last, value);\n      }\n    });\n\n    return this._map = deepFreeze(config);\n  }\n\n  get(key: string): any {\n    return this._map.get(key);\n  }\n\n  existsConfigSync(name: string): boolean {\n    return _existsConfigSync(this._dirname, name);\n  }\n\n  loadConfigSync(name: string): Map {\n    return _loadConfigSync(this._dirname, name);\n  }\n}\n\nexport default function alpConfig(dirname: ?string, options: ConfigOptions = {}) {\n  return (app, config: ?Config) => {\n    if (!config) {\n      config = new Config(dirname, options);\n      config.loadSync(options);\n    }\n\n    app.existsConfig = deprecate((name) => config.existsConfigSync(name), 'use app.existsConfigSync');\n    app.loadConfig = deprecate((name) => config.loadConfigSync(name), 'use app.loadConfigSync');\n\n    app.existsConfigSync = name => config.existsConfigSync(name);\n    app.loadConfigSync = name => config.loadConfigSync(name);\n\n    app.config = config;\n    app.context.config = config;\n\n    return config;\n  };\n}\n"]}