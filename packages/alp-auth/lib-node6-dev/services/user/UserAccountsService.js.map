{"version":3,"sources":["../../../src/services/user/UserAccountsService.js"],"names":[],"mappings":"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","file":"UserAccountsService.js","sourcesContent":["/* global fetch */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport UsersManager from '../../models/user/UsersManager';\nimport userAccountGoogleService from './userAccountGoogleService';\n\ntype TokensObject = {\n    accessToken: string,\n    refreshToken?: string,\n};\n\nconst logger = new Logger('alp-auth.services.userAccounts');\n\nexport default class UserAccountsService extends EventEmitter {\n    static strategyToService = {\n        google: userAccountGoogleService,\n    };\n\n    constructor(usersManager: UsersManager) {\n        super();\n        this.usersManager = usersManager;\n    }\n\n    getScope(strategy: string, scopeKey: string, user, accountId) {\n        logger.debug('getScope', { strategy, userId: user && user._id });\n        const service = this.constructor.strategyToService[strategy];\n        const newScope = service.constructor.scopeKeyToScope[scopeKey];\n        if (!user || !accountId) {\n            return newScope;\n        }\n        const account = user.accounts\n            .find(account => account.provider === strategy && account.accountId === accountId);\n\n        if (!account) {\n            throw new Error('Could not found associated account');\n        }\n        return service.getScope(account.scope, newScope).join(' ');\n    }\n\n    async update(user, strategy, tokens, scope, subservice) {\n        const service = this.constructor.strategyToService[strategy];\n        const profile = await service.getProfile(tokens);\n        const account = user.accounts\n            .find(account => account.provider === strategy && service.isAccount(account, profile));\n        if (!account) {\n            // TODO check if already exists in other user => merge\n            // TODO else add a new account in this user\n            throw new Error('Could not found associated account');\n        }\n        account.status = 'valid';\n        account.accessToken = tokens.accessToken;\n        if (tokens.refreshToken) {\n            account.refreshToken = tokens.refreshToken;\n        }\n        if (tokens.expireDate) {\n            account.tokenExpireDate = tokens.expireDate;\n        }\n        account.scope = service.getScope(account.scope, scope);\n        account.subservices = account.subservices || [];\n        if (subservice && account.subservices.indexOf(subservice) === -1) {\n            account.subservices.push(subservice);\n        }\n\n        await this.usersManager.update(user);\n        return user;\n    }\n\n    /**\n     * @param  {Object} profile\n     * @param  {String} token\n     * @param  {String} tokenSecret\n     * @return {Promise}\n     */\n    async findOrCreateFromGoogle(strategy: string, tokens: TokensObject, scope: string, subservice) {\n        if (strategy !== 'google') {\n            throw new Error('Not supported at the moment');\n        }\n\n        const service = this.constructor.strategyToService[strategy];\n\n        const profile = await service.getProfile(tokens);\n\n        const plusProfile = await fetch(\n            `https://www.googleapis.com/plus/v1/people/me?access_token=${tokens.accessToken}`\n        ).then((response) => response.json());\n\n        const emails = service.getEmails(profile, plusProfile);\n\n\n        let user = await this.usersManager.findOneByAccountOrEmails({\n            provider: service.providerKey,\n            accountId: service.getId(profile),\n            emails,\n        });\n\n        if (!user) {\n            user = {};\n        }\n\n        Object.assign(user, {\n            displayName: service.getDisplayName(profile),\n            fullName: service.getFullName(profile),\n            status: this.usersManager.STATUSES.VALIDATED,\n        });\n\n        if (!user.accounts) user.accounts = [];\n\n        const accountId = service.getId(profile);\n\n        let account = user.accounts.find(account => (\n            account.provider === strategy && account.accountId === accountId\n        ));\n\n        if (!account) {\n            account = { provider: strategy, accountId: accountId };\n            user.accounts.push(account);\n        }\n\n        account.name = service.getAccountName(profile);\n        account.status = 'valid';\n        account.profile = profile;\n        account.accessToken = tokens.accessToken;\n        if (tokens.refreshToken) {\n            account.refreshToken = tokens.refreshToken;\n        }\n        if (tokens.expireDate) {\n            account.tokenExpireDate = tokens.expireDate;\n        }\n        account.scope = service.getScope(account.scope, scope);\n\n        if (!account.subservices) account.subservices = [];\n        if (subservice && !account.subservices.includes(subservice)) {\n            account.subservices.push(subservice);\n        }\n\n        if (!user.emails) user.emails = [];\n        const userEmails = user.emails;\n        emails.forEach((email) => {\n            if (!userEmails.includes(email)) {\n                userEmails.push(email);\n            }\n        });\n\n        await this.usersManager[user._id ? 'updateOne' : 'insertOne'](user);\n        return user;\n    }\n\n    updateAccount(user, account) {\n        return this.usersManager.updateAccount(user, account).then(() => user);\n    }\n}\n"]}