{"version":3,"sources":["../../src/controllers/createAuthController.server.js"],"names":[],"mappings":";;;;;kBAEwB,oB;;AAFxB;;;;;;;;AAEe,SAAS,oBAAT,OAQZ;AAAA,QAPC,qBAOD,QAPC,qBAOD;AAAA,QANC,qBAMD,QANC,qBAMD;AAAA,kCALC,aAKD;AAAA,QALC,aAKD,sCALiB,MAKjB;;AAAA,+CAHC,qBAGD,4DAFC,qBAED,YAFwB,MAExB,kBADC,aACD,gCADC,aACD;AAAA;AAAA;;AACC,WAAO;AACG,aAAN,CAAY,GAAZ,EAAiB;AAAA;AACb,oBAAI,IAAI,KAAJ,CAAU,SAAd,EAAyB;AACrB,wBAAI,QAAJ,CAAa,IAAI,YAAJ,CAAiB,aAAjB,CAAb;AACH;;AAED,sBAAM,WAAW,IAAI,UAAJ,CAAe,UAAf,CAAjB;AACA,oBAAI,QAAJ,EAAc;AACV,0BAAM,sBAAsB,eAAtB,CAAsC,GAAtC,EAA2C,QAA3C,CAAN;AACA;AACH;;AAED,sBAAM,IAAI,MAAJ,CAAW,qBAAX,CAAN;AAXa;AAYhB,SAbE;;AAeG,qBAAN,CAAoB,GAApB,EAAyB;AAAA;AACrB,oBAAI,IAAI,KAAJ,CAAU,SAAd,EAAyB;AACrB,wBAAI,QAAJ,CAAa,IAAI,YAAJ,CAAiB,aAAjB,CAAb;AACH;;AAED,sBAAM,WAAW,IAAI,UAAJ,CAAe,UAAf,CAAjB;AACA,oBAAI,MAAJ,CAAW,QAAX;;AAEA,sBAAM,gBAAgB,MAAM,sBAAsB,cAAtB,CAAqC,GAArC,EAA0C,QAA1C,CAA5B;AACA,sBAAM,IAAI,YAAJ,CAAiB,cAAc,GAA/B,EAAoC,aAApC,CAAN;AACA,oBAAI,KAAJ,CAAU,SAAV,GAAsB,aAAtB;AACA,sBAAM,IAAI,QAAJ,CAAa,IAAI,YAAJ,CAAiB,aAAjB,CAAb,CAAN;AAXqB;AAYxB,SA3BE;;AA6BG,cAAN,CAAa,GAAb,EAAkB;AAAA;AACd,oBAAI,MAAJ;AACA,sBAAM,IAAI,QAAJ,CAAa,IAAI,YAAJ,CAAiB,aAAjB,CAAb,CAAN;AAFc;AAGjB;AAhCE,KAAP;AAkCH","file":"createAuthController.server.js","sourcesContent":["import AuthenticationService from '../services/AuthenticationService';\n\nexport default function createAuthController({\n    authenticationService,\n    loginModuleDescriptor,\n    homeRouterKey = 'home',\n}: {\n    authenticationService: AuthenticationService,\n    loginModuleDescriptor: Object,\n    homeRouterKey: ?string,\n}) {\n    return {\n        async login(ctx) {\n            if (ctx.state.connected) {\n                ctx.redirect(ctx.urlGenerator(homeRouterKey));\n            }\n\n            const strategy = ctx.namedParam('strategy');\n            if (strategy) {\n                await authenticationService.redirectAuthUrl(ctx, strategy);\n                return;\n            }\n\n            await ctx.render(loginModuleDescriptor);\n        },\n\n        async loginResponse(ctx) {\n            if (ctx.state.connected) {\n                ctx.redirect(ctx.urlGenerator(homeRouterKey));\n            }\n\n            const strategy = ctx.namedParam('strategy');\n            ctx.assert(strategy);\n\n            const connectedUser = await authenticationService.accessResponse(ctx, strategy);\n            await ctx.setConnected(connectedUser._id, connectedUser);\n            ctx.state.connected = connectedUser;\n            await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n        },\n\n        async logout(ctx) {\n            ctx.logout();\n            await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n        },\n    };\n}\n"]}