{"version":3,"sources":["../../src/controllers/createAuthController.server.js"],"names":["createAuthController","usersManager","authenticationService","loginModuleDescriptor","homeRouterKey","login","ctx","state","connected","redirect","urlGenerator","strategy","namedParam","redirectAuthUrl","render","loginResponse","assert","connectedUser","accessResponse","keyPath","store","setConnected","logout"],"mappings":";;;;;kBAEwBA,oB;;;;;;AAFxB;;;;;;;;AAEe,SAASA,oBAAT,CAA8B;AAC3CC,cAD2C;AAE3CC,uBAF2C;AAG3CC,uBAH2C;AAI3CC,kBAAgB;AAJ2B,CAA9B,EAUZ;AAAA;AATDH,gBASC;AARDC,yBAQC;AAPDC,yBAOC;AANDC;AAMC;AAJDH,gBAIC;AAHDC,yBAGC;AAFDC,yBAEC;AADDC,iBACC;AAAA;;AACD,SAAO;AACCC,SAAN,CAAYC,GAAZ,EAAiB;AAAA;AACf,YAAIA,IAAIC,KAAJ,CAAUC,SAAd,EAAyB;AACvBF,cAAIG,QAAJ,CAAaH,IAAII,YAAJ,CAAiBN,aAAjB,CAAb;AACD;;AAED,cAAMO,WAAWL,IAAIM,UAAJ,CAAe,UAAf,CAAjB;AACA,YAAID,QAAJ,EAAc;AACZ,gBAAMT,sBAAsBW,eAAtB,CAAsCP,GAAtC,EAA2CK,QAA3C,CAAN;AACA;AACD;;AAED,cAAML,IAAIQ,MAAJ,CAAWX,qBAAX,CAAN;AAXe;AAYhB,KAbI;;AAeCY,iBAAN,CAAoBT,GAApB,EAAyB;AAAA;AACvB,YAAIA,IAAIC,KAAJ,CAAUC,SAAd,EAAyB;AACvBF,cAAIG,QAAJ,CAAaH,IAAII,YAAJ,CAAiBN,aAAjB,CAAb;AACD;;AAED,cAAMO,WAAWL,IAAIM,UAAJ,CAAe,UAAf,CAAjB;AACAN,YAAIU,MAAJ,CAAWL,QAAX;;AAEA,cAAMM,gBAAgB,MAAMf,sBAAsBgB,cAAtB,CAAqCZ,GAArC,EAA0CK,QAA1C,CAA5B;AACA,cAAMQ,kBAAkBlB,aAAamB,KAAb,CAAmBD,OAArC,0CAAN;AACA,cAAMb,IAAIe,YAAJ,CAAiBJ,cAAcE,OAAd,CAAjB,EAAyCF,aAAzC,CAAN;AACAX,YAAIC,KAAJ,CAAUC,SAAV,GAAsBS,aAAtB;AACA,cAAMX,IAAIG,QAAJ,CAAaH,IAAII,YAAJ,CAAiBN,aAAjB,CAAb,CAAN;AAZuB;AAaxB,KA5BI;;AA8BCkB,UAAN,CAAahB,GAAb,EAAkB;AAAA;AAChBA,YAAIgB,MAAJ;AACA,cAAMhB,IAAIG,QAAJ,CAAaH,IAAII,YAAJ,CAAiBN,aAAjB,CAAb,CAAN;AAFgB;AAGjB;AAjCI,GAAP;AAmCD","file":"createAuthController.server.js","sourcesContent":["import AuthenticationService from '../services/AuthenticationService';\n\nexport default function createAuthController({\n  usersManager,\n  authenticationService,\n  loginModuleDescriptor,\n  homeRouterKey = 'home',\n}: {\n  usersManager: Object,\n  authenticationService: AuthenticationService,\n  loginModuleDescriptor: Object,\n  homeRouterKey: ?string,\n}) {\n  return {\n    async login(ctx) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      if (strategy) {\n        await authenticationService.redirectAuthUrl(ctx, strategy);\n        return;\n      }\n\n      await ctx.render(loginModuleDescriptor);\n    },\n\n    async loginResponse(ctx) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(ctx, strategy);\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx) {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n"]}