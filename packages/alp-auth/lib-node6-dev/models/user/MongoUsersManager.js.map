{"version":3,"sources":["../../../src/models/user/mongoUsersManager.js"],"names":["mongoUsersManager","Object","create","assign","findOneByAccountOrEmails","provider","accountId","emails","query","length","$or","$in","store","findOne","updateAccount","user","account","accountIndex","accounts","indexOf","Error","partialUpdateOne"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA,MAAMA,oBAAoBC,OAAOC,MAAP,gCAA1B;kBACeF,iB;;;AAEfC,OAAOE,MAAP,CAAcH,iBAAd,EAAiC;AAC/BI,iCAMsB;AAAA;AAJlBC,cAIkB;AAHlBC,eAGkB;AAFlBC,YAEkB;AAAA;;AAAA,QALlBF,QAKkB,YALlBA,QAKkB;AAAA,QALRC,SAKQ,YALRA,SAKQ;AAAA,QALGC,MAKH,YALGA,MAKH;;AAAA;AALlBF,cAKkB;AALRC,eAKQ;AALGC;AAKH;AAJlBF,cAIkB;AAHlBC,eAGkB;AAFlBC,YAEkB;AAAA;;AAAA;AACpB,UAAIC,QAAQ;AACV,6BAAqBH,QADX;AAEV,8BAAsBC;AAFZ,OAAZ;;AAKA,UAAIC,UAAUA,OAAOE,MAArB,EAA6B;AAC3BD,gBAAQ;AACNE,eAAK,CACHF,KADG,EAEH;AACED,oBAAQ,EAAEI,KAAKJ,MAAP;AADV,WAFG;AADC,SAAR;AAQD;;AAED,aAAO,KAAKK,KAAL,CAAWC,OAAX,CAAmBL,KAAnB,CAAP;AAjBoB;AAkBrB,GAzB8B;;AA2B/BM,gBAAcC,IAAd,EAA8BC,OAA9B,EAAoD;AAAA,YAAtCD,IAAsC;;AAAA,YAAtBC,OAAsB;;AAClD,QAAIC,eAAeF,KAAKG,QAAL,CAAcC,OAAd,CAAsBH,OAAtB,CAAnB;AACA,QAAIC,iBAAiB,CAAC,CAAtB,EAAyB;AACvB,YAAM,IAAIG,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,WAAO,KAAKR,KAAL,CAAWS,gBAAX,CAA4BN,IAA5B,EAAkC,EAAE,CAAE,aAAWE,YAAa,GAA1B,GAA8BD,OAAhC,EAAlC,CAAP;AACD;AAlC8B,CAAjC","file":"mongoUsersManager.js","sourcesContent":["import abstractUsersManager from './abstractUsersManager';\nimport type { UserType, AccountType } from './types/index';\n\nconst mongoUsersManager = Object.create(abstractUsersManager);\nexport default mongoUsersManager;\n\nObject.assign(mongoUsersManager, {\n  findOneByAccountOrEmails(\n    { provider, accountId, emails }: {\n      provider: string,\n      accountId: string|number,\n      emails: ?Array<string>,\n    },\n  ): Promise<?UserType> {\n    let query = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    return this.store.findOne(query);\n  },\n\n  updateAccount(user: UserType, account: AccountType) {\n    let accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, { [`accounts.${accountIndex}`]: account });\n  },\n});\n"]}