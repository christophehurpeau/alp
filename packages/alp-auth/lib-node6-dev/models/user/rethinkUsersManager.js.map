{"version":3,"sources":["../../../src/models/user/rethinkUsersManager.js"],"names":["mongoUsersManager","Object","create","assign","findOneByAccountOrEmails","provider","accountId","emails","r","store","filter","row","contains","and","eq","length","or","expr","query","findOne","updateAccount","user","account","accountIndex","accounts","indexOf","Error","partialUpdateOne","changeAt"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA,MAAMA,oBAAoBC,OAAOC,MAAP,gCAA1B;kBACeF,iB;;;AAEfC,OAAOE,MAAP,CAAcH,iBAAd,EAAiC;AAC/BI,iCAMsB;AAAA,qDAAX,+BAAC,mCAAD,CAAW;;AAAA,QALpB,EAAEC,QAAF,EAAYC,SAAZ,EAAuBC,MAAvB,EAKoB,GALW,6BAC7B,2CAAU,8BAAV,CAD6B,EAE7B,4CAAW,4DAAO,8BAAP,CAAX,CAF6B,EAG7B,yCAAQ,+BAAC,4BAAM,8BAAN,CAAD,CAAR,CAH6B,CAKX;;AACpB,UAAMC,IAAI,KAAKC,KAAL,CAAWD,CAArB;AACA,QAAIE,SAASF,EAAEG,GAAF,CAAM,UAAN,EAAkBC,QAAlB,CAA2BD,OAAOH,EAAEK,GAAF,CAC7CF,IAAI,UAAJ,EAAgBG,EAAhB,CAAmBT,QAAnB,CAD6C,EAE7CM,IAAI,WAAJ,EAAiBG,EAAjB,CAAoBR,SAApB,CAF6C,CAAlC,CAAb;;AAKA,QAAIC,UAAUA,OAAOQ,MAArB,EAA6B;AAC3BL,eAASF,EAAEQ,EAAF,CACPN,MADO,EAEPF,EAAEG,GAAF,CAAM,QAAN,EAAgBC,QAAhB,CAAyBD,OAAOH,EAAES,IAAF,CAAOV,MAAP,EAAeK,QAAf,CAAwBD,GAAxB,CAAhC,CAFO,CAAT;AAID;;AAED,QAAIO,QAAQ,KAAKT,KAAL,CAAWS,KAAX,GAAmBR,MAAnB,CAA0BA,MAA1B,CAAZ;AACA,WAAO,KAAKD,KAAL,CAAWU,OAAX,CAAmBD,KAAnB,CAAP;AACD,GAvB8B;;AAyB/BE,gBAAcC,IAAd,EAA8BC,OAA9B,EAAoD;AAAA,oBAAlC,mCAAkC;;AAAA,uBAAf,sCAAe;;AAAA;;AAAA;;AAClD,QAAIC,eAAeF,KAAKG,QAAL,CAAcC,OAAd,CAAsBH,OAAtB,CAAnB;AACA,QAAIC,iBAAiB,CAAC,CAAtB,EAAyB;AACvB,YAAM,IAAIG,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,WAAO,KAAKjB,KAAL,CAAWkB,gBAAX,CAA4BN,IAA5B,EAAkC;AACvCG,gBAAU,KAAKf,KAAL,CAAWD,CAAX,CAAaG,GAAb,CAAiB,UAAjB,EAA6BiB,QAA7B,CAAsCL,YAAtC,EAAoDD,OAApD;AAD6B,KAAlC,CAAP;AAGD;AAlC8B,CAAjC","file":"rethinkUsersManager.js","sourcesContent":["import abstractUsersManager from './abstractUsersManager';\nimport type { UserType, AccountType } from './types/index';\n\nconst mongoUsersManager = Object.create(abstractUsersManager);\nexport default mongoUsersManager;\n\nObject.assign(mongoUsersManager, {\n  findOneByAccountOrEmails(\n    { provider, accountId, emails }: {\n      provider: string,\n      accountId: string|number,\n      emails: ?Array<string>,\n    },\n  ): Promise<?UserType> {\n    const r = this.store.r;\n    let filter = r.row('accounts').contains(row => r.and(\n      row('provider').eq(provider),\n      row('accountId').eq(accountId),\n    ));\n\n    if (emails && emails.length) {\n      filter = r.or(\n        filter,\n        r.row('emails').contains(row => r.expr(emails).contains(row)),\n      );\n    }\n\n    let query = this.store.query().filter(filter);\n    return this.store.findOne(query);\n  },\n\n  updateAccount(user: UserType, account: AccountType) {\n    let accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, {\n      accounts: this.store.r.row('accounts').changeAt(accountIndex, account),\n    });\n  },\n});\n"]}