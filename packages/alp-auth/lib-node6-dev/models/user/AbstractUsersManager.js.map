{"version":3,"sources":["../../../src/models/user/abstractUsersManager.js"],"names":["STATUSES","VALIDATED","DELETED","findOneByAccountOrEmails","provider","accountId","emails","Error","findConnected","connected","store","findByKey","insertOne","user","updateOne","transformForBrowser","id","_id","displayName","fullName","status","emailDomains","accounts","map","account","name","profile"],"mappings":";;;;;;AAAA;;;;;;;;;;;;kBAEe;AACbA,YAAU;AACRC,eAAW,WADH;AAERC,aAAS;AAFD,GADG;;AAMbC,iCAQuB;AAAA,iCAAX,+BAAC,mCAAD,CAAW;;AAAA,QARE;AACvBC,cADuB;AAEvBC,eAFuB;AAGvBC;AAHuB,KAQF,GAJtB,6BACC,2CAAU,8BAAV,CADD,EAEC,4CAAW,4DAAS,8BAAT,CAAX,CAFD,EAGC,yCAAQ,+BAAC,4BAAM,8BAAN,CAAD,CAAR,CAHD,CAIsB;;AACrB,UAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD,GAhBY;;AAkBbC,gBAAcC,SAAd,EAA6C;AAAA,sDAAX,+BAAC,mCAAD,CAAW;;AAC3C,WAAO,KAAKC,KAAL,CAAWC,SAAX,CAAqBF,SAArB,CAAP;AACD,GApBY;;AAsBbG,YAAUC,IAAV,EAA8B;AAAA,sDAAL,2BAAK;;AAC5B,WAAO,KAAKH,KAAL,CAAWE,SAAX,CAAqBC,IAArB,CAAP;AACD,GAxBY;;AA0BbC,YAAUD,IAAV,EAA8B;AAAA,sDAAL,2BAAK;;AAC5B,WAAO,KAAKH,KAAL,CAAWI,SAAX,CAAqBD,IAArB,CAAP;AACD,GA5BY;;AA8BbE,sBAAoBF,IAApB,EAA2C;AAAA,sDAAhB,0CAAgB;;AACzC,+BAAO;AACLG,UAAIH,KAAKG,EADJ;AAELC,WAAKJ,KAAKI,GAFL;AAGLC,mBAAaL,KAAKK,WAHb;AAILC,gBAAUN,KAAKM,QAJV;AAKLC,cAAQP,KAAKO,MALR;AAMLd,cAAQO,KAAKP,MANR;AAOLe,oBAAcR,KAAKQ,YAPd;AAQLC,gBAAUT,KAAKS,QAAL,CAAcC,GAAd,CAAkBC,YAAY;AACtCpB,kBAAUoB,QAAQpB,QADoB;AAEtCC,mBAAWmB,QAAQnB,SAFmB;AAGtCoB,cAAMD,QAAQC,IAHwB;AAItCL,gBAAQI,QAAQJ,MAJsB;AAKtCM,iBAASF,QAAQE;AALqB,OAAZ,CAAlB;AARL,KAAP;AAgBD;AA/CY,C","file":"abstractUsersManager.js","sourcesContent":["import type { UserType, UserBrowserType } from './types';\n\nexport default {\n  STATUSES: {\n    VALIDATED: 'validated',\n    DELETED: 'deleted',\n  },\n\n  findOneByAccountOrEmails({\n    provider,\n    accountId,\n    emails,\n  }: {\n    provider: string,\n    accountId: string | number,\n    emails: ?Array<string>,\n  }): Promise<?UserType> {\n    throw new Error('Not implemented');\n  },\n\n  findConnected(connected): Promise<?UserType> {\n    return this.store.findByKey(connected);\n  },\n\n  insertOne(user): Promise<any> {\n    return this.store.insertOne(user);\n  },\n\n  updateOne(user): Promise<any> {\n    return this.store.updateOne(user);\n  },\n\n  transformForBrowser(user): UserBrowserType {\n    return {\n      id: user.id,\n      _id: user._id,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map(account => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  },\n};\n"]}