{"version":3,"sources":["../src/createAuthController.js"],"names":["AuthenticationService","createAuthController","usersManager","authenticationService","homeRouterKey","login","ctx","strategy","namedParam","Error","redirectAuthUrl","loginResponse","state","connected","redirect","urlGenerator","assert","connectedUser","accessResponse","store","keyPath","setConnected","logout"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,kCAAlC;;;AAEA,eAAe,SAASC,oBAAT,OAQZ;AAAA,MAR0C;AAC3CC,gBAD2C;AAE3CC,yBAF2C;AAG3CC,oBAAgB;AAH2B,GAQ1C,GAJF,SACC,2BAAc,UAAd,CADD,EAEC,oCAAuB,4BAAvB,CAFD,EAGC,4BAAe,WAAC,UAAD,CAAf,CAHD,CAIE;;AACD,SAAO;AACL,UAAMC,KAAN,CAAYC,GAAZ,EAAiB;AACf,YAAMC,WAAWD,IAAIE,UAAJ,CAAe,UAAf,CAAjB;AACA,UAAI,CAACD,QAAL,EAAe,MAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AACf,YAAMN,sBAAsBO,eAAtB,CAAsCJ,GAAtC,EAA2CC,QAA3C,CAAN;AACD,KALI;;AAOL,UAAMI,aAAN,CAAoBL,GAApB,EAAyB;AACvB,UAAIA,IAAIM,KAAJ,CAAUC,SAAd,EAAyB;AACvBP,YAAIQ,QAAJ,CAAaR,IAAIS,YAAJ,CAAiBX,aAAjB,CAAb;AACD;;AAED,YAAMG,WAAWD,IAAIE,UAAJ,CAAe,UAAf,CAAjB;AACAF,UAAIU,MAAJ,CAAWT,QAAX;;AAEA,YAAMU,gBAAgB,MAAMd,sBAAsBe,cAAtB,CAAqCZ,GAArC,EAA0CC,QAA1C,CAA5B;AACA,sBAAa,UAAb,QAAwBL,aAAaiB,KAAb,CAAmBC,OAA3C;AACA,YAAMd,IAAIe,YAAJ,CAAiBJ,cAAcG,OAAd,CAAjB,EAAyCH,aAAzC,CAAN;AACAX,UAAIM,KAAJ,CAAUC,SAAV,GAAsBI,aAAtB;AACA,YAAMX,IAAIQ,QAAJ,CAAaR,IAAIS,YAAJ,CAAiBX,aAAjB,CAAb,CAAN;AACD,KApBI;;AAsBL,UAAMkB,MAAN,CAAahB,GAAb,EAAkB;AAChBA,UAAIgB,MAAJ;AACA,YAAMhB,IAAIQ,QAAJ,CAAaR,IAAIS,YAAJ,CAAiBX,aAAjB,CAAb,CAAN;AACD;AAzBI,GAAP;AA2BD","file":"createAuthController.js","sourcesContent":["import AuthenticationService from './services/AuthenticationService';\n\nexport default function createAuthController({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n}: {\n  usersManager: Object,\n  authenticationService: AuthenticationService,\n  homeRouterKey: ?string,\n}) {\n  return {\n    async login(ctx) {\n      const strategy = ctx.namedParam('strategy');\n      if (!strategy) throw new Error('Strategy missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy);\n    },\n\n    async loginResponse(ctx) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(ctx, strategy);\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx) {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n"]}