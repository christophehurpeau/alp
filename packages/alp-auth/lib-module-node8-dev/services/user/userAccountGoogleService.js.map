{"version":3,"sources":["../../../src/services/user/userAccountGoogleService.js"],"names":["EventEmitter","providerKey","getProfile","tokens","fetch","accessToken","then","response","json","isAccount","account","profile","googleId","id","getId","getAccountName","email","getEmails","plusProfile","emails","push","forEach","indexOf","value","getDisplayName","name","getFullName","givenName","given_name","familyName","family_name","getDefaultScope","newScope","getScope","oldScope","concat","split","filter","item","i","ar","scopeKeyToScope","login"],"mappings":";;AAAA;AACA,OAAOA,YAAP,MAAyB,QAAzB;;AAEA,eAAe,uBAAI,cAAuCA,YAAvC,CAAoD;AAAA;AAAA;;AAAA,wCAKrEC,WALqE,GAKvD,QALuD;AAAA;;AAOrEC,aAAWC,MAAX,EAAmB;AACjB,WAAOC,MACJ,8DAA6DD,OAAOE,WAAY,EAD5E,EAELC,IAFK,CAEAC,YAAYA,SAASC,IAAT,EAFZ,CAAP;AAGD;;AAEDC,YAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AAC1B,WAAOD,QAAQE,QAAR,KAAqBD,QAAQE,EAApC;AACD;;AAEDC,QAAMH,OAAN,EAAe;AACb,WAAOA,QAAQE,EAAf;AACD;;AAEDE,iBAAeJ,OAAf,EAAwB;AACtB,WAAOA,QAAQK,KAAf;AACD;;AAEDC,YAAUN,OAAV,EAAmBO,WAAnB,EAAgC;AAC9B,UAAMC,WAAN;;AAcA,WAZIR,QAAQK,KAYZ,IAXEG,OAAOC,IAAP,CAAYT,QAAQK,KAApB,CAWF,EARIE,YAAYC,MAQhB,IAPED,YAAYC,MAAZ,CAAmBE,OAAnB,CAA2BL,SAAS;AAC9BG,aAAOG,OAAP,CAAeN,MAAMO,KAArB,MAAgC,CAAC,CADH,IAEhCJ,OAAOC,IAAP,CAAYJ,MAAMO,KAAlB,CAFgC;AAInC,KAJD,CAOF,EAAOJ,MAAP;AACD;;AAEDK,iBAAeb,OAAf,EAAwB;AACtB,WAAOA,QAAQc,IAAf;AACD;;AAEDC,cAAYf,OAAZ,EAAqB;AACnB,WAAO;AACLgB,iBAAWhB,QAAQiB,UADd;AAELC,kBAAYlB,QAAQmB;AAFf,KAAP;AAID;;AAEDC,kBAAgBC,QAAhB,EAA0B;AACxB,WAAO,KAAKC,QAAL,CAAcD,QAAd,CAAP;AACD;;AAEDC,WAASC,QAAT,EAAmBF,QAAnB,EAA6B;AAC3B,WAAQE,QAAD,GAEHA,SAASC,MAAT,CAAgBH,SAASI,KAAT,CAAe,GAAf,CAAhB,EAAqCC,MAArC,CAA4C,CAACC,IAAD,EAAOC,CAAP,EAAUC,EAAV,KAAiBA,GAAGlB,OAAH,CAAWgB,IAAX,MAAqBC,CAAlF,CAFG,GACHP,SAASI,KAAT,CAAe,GAAf,CADJ;AAGD;AA9DoE,CAAxD,SACNK,eADM,GACY;AACvBC,SAAO;AADgB,CADZ,WAAf","file":"userAccountGoogleService.js","sourcesContent":["/* global fetch */\nimport EventEmitter from 'events';\n\nexport default new class UserAccountGoogleService extends EventEmitter {\n  static scopeKeyToScope = {\n    login: 'openid profile email https://www.googleapis.com/auth/plus.profile.emails.read',\n  };\n\n  providerKey = 'google';\n\n  getProfile(tokens) {\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokens.accessToken}`,\n    ).then(response => response.json());\n  }\n\n  isAccount(account, profile) {\n    return account.googleId === profile.id;\n  }\n\n  getId(profile) {\n    return profile.id;\n  }\n\n  getAccountName(profile) {\n    return profile.email;\n  }\n\n  getEmails(profile, plusProfile) {\n    const emails = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    if (plusProfile.emails) {\n      plusProfile.emails.forEach(email => {\n        if (emails.indexOf(email.value) === -1) {\n          emails.push(email.value);\n        }\n      });\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile) {\n    return profile.name;\n  }\n\n  getFullName(profile) {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope) {\n    return this.getScope(newScope);\n  }\n\n  getScope(oldScope, newScope) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope.concat(newScope.split(' ')).filter((item, i, ar) => ar.indexOf(item) === i);\n  }\n}();\n"]}