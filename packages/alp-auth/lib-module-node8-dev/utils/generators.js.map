{"version":3,"sources":["../../src/utils/generators.js"],"names":["randomBytes","promiseCallback","randomBase64","size","done","then","buffer","toString","randomHex"],"mappings":"AAAA,SAASA,WAAT,QAA4B,QAA5B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;;;AAEA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAAqD;AAAA,kBAA3B,UAA2B;;AAAA,+BAAR,UAAQ;;AAC1D,kDAAOF,gBAAgBG,QAAQJ,YAAYG,IAAZ,EAAkBC,IAAlB,CAAxB,EAAiDC,IAAjD,CAAsDC,UAAUA,OAAOC,QAAP,CAAgB,QAAhB,CAAhE,CAAP;AACD;;AAED,OAAO,SAASC,SAAT,CAAmBL,IAAnB,EAAkD;AAAA,mBAA3B,UAA2B;;AAAA,gCAAR,UAAQ;;AACvD,mDAAOF,gBAAgBG,QAAQJ,YAAYG,IAAZ,EAAkBC,IAAlB,CAAxB,EAAiDC,IAAjD,CAAsDC,UAAUA,OAAOC,QAAP,CAAgB,KAAhB,CAAhE,CAAP;AACD","file":"generators.js","sourcesContent":["import { randomBytes } from 'crypto';\nimport promiseCallback from 'promise-callback-factory';\n\nexport function randomBase64(size: number): Promise<string> {\n  return promiseCallback(done => randomBytes(size, done)).then(buffer => buffer.toString('base64'));\n}\n\nexport function randomHex(size: number): Promise<string> {\n  return promiseCallback(done => randomBytes(size, done)).then(buffer => buffer.toString('hex'));\n}\n"]}