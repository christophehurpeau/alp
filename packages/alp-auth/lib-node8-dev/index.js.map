{"version":3,"sources":["../src/index.js"],"names":["init","abstractUsersManager","mongoUsersManager","rethinkUsersManager","COOKIE_NAME","logger","usersManager","strategies","homeRouterKey","app","userAccountsService","authenticationService","config","controller","context","setConnected","connected","user","debug","Error","state","token","done","time","Date","now","get","algorithm","audience","request","headers","expiresIn","cookies","set","httpOnly","secure","logout","expires","registerBrowserStateTransformer","initialBrowserState","ctx","transformForBrowser","decodeJwt","userAgent","result","websocket","Cookies","require","users","Map","use","socket","next","handshakeData","keys","err","info","findConnected","client","id","on","delete","routes","login","segment","add","loginResponse","defaultRoute","middleware"],"mappings":"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","file":"index.js","sourcesContent":["import { sign, verify } from 'jsonwebtoken';\nimport promiseCallback from 'promise-callback-factory';\nimport Logger from 'nightingale-logger/src';\nimport abstractUsersManager from './models/user/abstractUsersManager';\nimport mongoUsersManager from './models/user/mongoUsersManager';\nimport rethinkUsersManager from './models/user/rethinkUsersManager';\nimport AuthenticationService from './services/AuthenticationService';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport createAuthController from './createAuthController';\n\nexport { abstractUsersManager, mongoUsersManager, rethinkUsersManager };\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nexport default function init({\n  usersManager,\n  strategies,\n  homeRouterKey,\n}: {\n  usersManager: Object,\n  strategies: Object,\n  homeRouterKey: ?string,\n}) {\n  return app => {\n    const userAccountsService = new UserAccountsService(usersManager);\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n    });\n\n    app.context.setConnected = async function(connected: number | string, user: Object) {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await promiseCallback(done =>\n        sign(\n          { connected, time: Date.now() },\n          this.config.get('authentication').get('secretKey'),\n          {\n            algorithm: 'HS512',\n            audience: this.request.headers['user-agent'],\n            expiresIn: '30 days',\n          },\n          done,\n        ),\n      );\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function() {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    app.registerBrowserStateTransformer((initialBrowserState, ctx) => {\n      if (ctx.state.connected) {\n        initialBrowserState.connected = ctx.state.connected || null;\n        initialBrowserState.user = usersManager.transformForBrowser(ctx.state.user);\n      }\n    });\n\n    const decodeJwt = (token, userAgent) => {\n      const result = verify(token, app.config.get('authentication').get('secretKey'), {\n        algorithm: 'HS512',\n        audience: userAgent,\n      });\n      return result && result.connected;\n    };\n\n    if (app.websocket) {\n      logger.debug('app has websocket');\n      // eslint-disable-next-line global-require\n      const Cookies = require('cookies');\n\n      const users = new Map();\n      app.websocket.users = users;\n\n      app.websocket.use(async (socket, next) => {\n        const handshakeData = socket.request;\n        const cookies = new Cookies(handshakeData, null, { keys: app.keys });\n        let token = cookies.get(COOKIE_NAME);\n        logger.debug('middleware websocket', { token });\n\n        if (!token) return next();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, handshakeData.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentication', { err });\n          return next();\n        }\n        logger.debug('middleware websocket', { connected });\n\n        if (!connected) return next();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) return next();\n\n        socket.user = user;\n        users.set(socket.client.id, user);\n\n        socket.on('disconnected', () => users.delete(socket.client.id));\n\n        await next();\n      });\n    }\n\n    return {\n      routes: {\n        login: [\n          '/login/:strategy',\n          segment => {\n            segment.add('/response', controller.loginResponse, 'loginResponse');\n            segment.defaultRoute(controller.login, 'login');\n          },\n        ],\n        logout: ['/logout', controller.logout],\n      },\n\n      middleware: async (ctx, next) => {\n        let token = ctx.cookies.get(COOKIE_NAME);\n        logger.debug('middleware', { token });\n\n        if (!token) return next();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, ctx.request.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentification', { err });\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return next();\n        }\n        logger.debug('middleware', { connected });\n\n        if (!connected) return next();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) {\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return next();\n        }\n\n        ctx.state.connected = connected;\n        ctx.state.user = user;\n\n        await next();\n      },\n    };\n  };\n}\n"]}