{"version":3,"sources":["../../../src/services/user/UserAccountsService.js"],"names":["logger","UserAccountsService","constructor","usersManager","getScope","strategy","scopeKey","user","accountId","debug","userId","_id","service","strategyToService","newScope","scopeKeyToScope","account","accounts","find","provider","Error","scope","join","update","tokens","subservice","profile","getProfile","isAccount","status","accessToken","refreshToken","expireDate","tokenExpireDate","subservices","indexOf","push","findOrCreateFromGoogle","plusProfile","fetch","then","response","json","emails","getEmails","findOneByAccountOrEmails","providerKey","getId","info","Object","assign","displayName","getDisplayName","fullName","getFullName","STATUSES","VALIDATED","name","getAccountName","includes","userEmails","forEach","email","emailDomains","Array","from","reduce","domains","add","split","Set","keyPath","store","updateAccount","google"],"mappings":"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","file":"UserAccountsService.js","sourcesContent":["/* global fetch */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport userAccountGoogleService from './userAccountGoogleService';\n\ntype TokensObject = {\n  accessToken: string,\n  refreshToken?: string,\n  expireDate: Date,\n  tokenType: string,\n  idToken: string,\n};\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport default class UserAccountsService extends EventEmitter {\n  static strategyToService = {\n    google: userAccountGoogleService,\n  };\n\n  constructor(usersManager) {\n    super();\n    this.usersManager = usersManager;\n  }\n\n  getScope(strategy: string, scopeKey: string, user, accountId) {\n    logger.debug('getScope', { strategy, userId: user && user._id });\n    const service = this.constructor.strategyToService[strategy];\n    const newScope = service.constructor.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts\n      .find(account => account.provider === strategy && account.accountId === accountId);\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(user, strategy, tokens, scope, subservice) {\n    const service = this.constructor.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const account = user.accounts\n            .find(account => account.provider === strategy && service.isAccount(account, profile));\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && account.subservices.indexOf(subservice) === -1) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.update(user);\n    return user;\n  }\n\n  async findOrCreateFromGoogle(strategy: string, tokens: TokensObject, scope: string, subservice) {\n    if (strategy !== 'google') {\n      throw new Error('Not supported at the moment');\n    }\n\n    const service = this.constructor.strategyToService[strategy];\n\n    const profile = await service.getProfile(tokens);\n\n    const plusProfile = await fetch(\n      `https://www.googleapis.com/plus/v1/people/me?access_token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n\n    const emails = service.getEmails(profile, plusProfile);\n\n\n    let user = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId: service.getId(profile),\n      emails,\n    });\n\n    logger.info('create user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: this.usersManager.STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    const accountId = service.getId(profile);\n\n    let account = user.accounts.find(account => (\n      account.provider === strategy && account.accountId === accountId\n    ));\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach((email) => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = Array.from(user.emails.reduce(\n      (domains, email) => domains.add(email.split('@', 2)[1]),\n      new Set(),\n    ));\n\n    const keyPath: string = this.usersManager.store.keyPath;\n    await this.usersManager[user[keyPath] ? 'updateOne' : 'insertOne'](user);\n    return user;\n  }\n\n  updateAccount(user, account) {\n    return this.usersManager.updateAccount(user, account).then(() => user);\n  }\n}\n"]}