{"version":3,"sources":["../../../src/models/user/abstractUsersManager.js"],"names":["STATUSES","VALIDATED","DELETED","findOneByAccountOrEmails","provider","accountId","emails","Error","findConnected","connected","store","findByKey","insertOne","user","updateOne","transformForBrowser","displayName","fullName","status","accounts","map","account","name","profile"],"mappings":";;;;;kBAEe;AACbA,YAAU;AACRC,eAAW,WADH;AAERC,aAAS;AAFD,GADG;;AAMbC,iCAMsB;AAAA,QALlBC,QAKkB,QALlBA,QAKkB;AAAA,QALRC,SAKQ,QALRA,SAKQ;AAAA,QALGC,MAKH,QALGA,MAKH;;AACpB,UAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD,GAdY;;AAgBbC,gBAAcC,SAAd,EAA6C;AAC3C,WAAO,KAAKC,KAAL,CAAWC,SAAX,CAAqBF,SAArB,CAAP;AACD,GAlBY;;AAoBbG,YAAUC,IAAV,EAAyB;AACvB,WAAO,KAAKH,KAAL,CAAWE,SAAX,CAAqBC,IAArB,CAAP;AACD,GAtBY;;AAwBbC,YAAUD,IAAV,EAAyB;AACvB,WAAO,KAAKH,KAAL,CAAWI,SAAX,CAAqBD,IAArB,CAAP;AACD,GA1BY;;AA4BbE,sBAAoBF,IAApB,EAA0B;AACxB,WAAO;AACLG,mBAAaH,KAAKG,WADb;AAELC,gBAAUJ,KAAKI,QAFV;AAGLC,cAAQL,KAAKK,MAHR;AAILZ,cAAQO,KAAKP,MAJR;AAKLa,gBAAUN,KAAKM,QAAL,CAAcC,GAAd,CAAkBC,YAAY;AACtCjB,kBAAUiB,QAAQjB,QADoB;AAEtCC,mBAAWgB,QAAQhB,SAFmB;AAGtCiB,cAAMD,QAAQC,IAHwB;AAItCJ,gBAAQG,QAAQH,MAJsB;AAKtCK,iBAASF,QAAQE;AALqB,OAAZ,CAAlB;AALL,KAAP;AAaD;AA1CY,C","file":"abstractUsersManager.js","sourcesContent":["import type { UserType } from './types';\n\nexport default {\n  STATUSES: {\n    VALIDATED: 'validated',\n    DELETED: 'deleted',\n  },\n\n  findOneByAccountOrEmails(\n    { provider, accountId, emails }: {\n      provider: string,\n      accountId: string|number,\n      emails: ?Array<string>,\n    },\n  ): Promise<?UserType> {\n    throw new Error('Not implemented');\n  },\n\n  findConnected(connected): Promise<?UserType> {\n    return this.store.findByKey(connected);\n  },\n\n  insertOne(user): Promise {\n    return this.store.insertOne(user);\n  },\n\n  updateOne(user): Promise {\n    return this.store.updateOne(user);\n  },\n\n  transformForBrowser(user) {\n    return {\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      accounts: user.accounts.map(account => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  },\n};\n"]}