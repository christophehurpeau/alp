{"version":3,"sources":["../../../src/services/user/UserAccountsService.js"],"names":["logger","UserAccountsService","constructor","usersManager","getScope","strategy","scopeKey","user","accountId","debug","userId","_id","service","strategyToService","newScope","scopeKeyToScope","account","accounts","find","provider","Error","scope","join","update","tokens","subservice","profile","getProfile","isAccount","status","accessToken","refreshToken","expireDate","tokenExpireDate","subservices","indexOf","push","findOrCreateFromGoogle","plusProfile","fetch","then","response","json","emails","getEmails","findOneByAccountOrEmails","providerKey","getId","info","Object","assign","displayName","getDisplayName","fullName","getFullName","STATUSES","VALIDATED","name","getAccountName","includes","userEmails","forEach","email","emailDomains","Array","from","reduce","domains","add","split","Set","keyPath","store","updateAccount","google"],"mappings":"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","file":"UserAccountsService.js","sourcesContent":["/* global fetch */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport userAccountGoogleService from './userAccountGoogleService';\n\ntype TokensObject = {\n  accessToken: string,\n  refreshToken?: string,\n  expireDate: Date,\n  tokenType: string,\n  idToken: string,\n};\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport default class UserAccountsService extends EventEmitter {\n  static strategyToService = {\n    google: userAccountGoogleService,\n  };\n\n  constructor(usersManager) {\n    super();\n    this.usersManager = usersManager;\n  }\n\n  getScope(strategy: string, scopeKey: string, user, accountId) {\n    logger.debug('getScope', { strategy, userId: user && user._id });\n    const service = this.constructor.strategyToService[strategy];\n    const newScope = service.constructor.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      account => account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(user, strategy, tokens, scope, subservice) {\n    const service = this.constructor.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const account = user.accounts.find(\n      account => account.provider === strategy && service.isAccount(account, profile),\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && account.subservices.indexOf(subservice) === -1) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.update(user);\n    return user;\n  }\n\n  async findOrCreateFromGoogle(strategy: string, tokens: TokensObject, scope: string, subservice) {\n    if (strategy !== 'google') {\n      throw new Error('Not supported at the moment');\n    }\n\n    const service = this.constructor.strategyToService[strategy];\n\n    const profile = await service.getProfile(tokens);\n\n    const plusProfile = await fetch(\n      `https://www.googleapis.com/plus/v1/people/me?access_token=${tokens.accessToken}`,\n    ).then(response => response.json());\n\n    const emails = service.getEmails(profile, plusProfile);\n\n    let user = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId: service.getId(profile),\n      emails,\n    });\n\n    logger.info('create user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: this.usersManager.STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    const accountId = service.getId(profile);\n\n    let account = user.accounts.find(\n      account => account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach(email => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = Array.from(\n      user.emails.reduce((domains, email) => domains.add(email.split('@', 2)[1]), new Set()),\n    );\n\n    const keyPath: string = this.usersManager.store.keyPath;\n    await this.usersManager[user[keyPath] ? 'updateOne' : 'insertOne'](user);\n    return user;\n  }\n\n  updateAccount(user, account) {\n    return this.usersManager.updateAccount(user, account).then(() => user);\n  }\n}\n"]}