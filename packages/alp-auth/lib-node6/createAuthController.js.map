{"version":3,"sources":["../src/createAuthController.js"],"names":["createAuthController","usersManager","authenticationService","homeRouterKey","login","ctx","strategy","namedParam","Error","redirectAuthUrl","loginResponse","state","connected","redirect","urlGenerator","assert","connectedUser","accessResponse","keyPath","store","setConnected","logout"],"mappings":";;;;;kBAEwBA,oB;;;;AAAT,SAASA,oBAAT,CAA8B;AAC3CC,cAD2C;AAE3CC,uBAF2C;AAG3CC,kBAAgB;AAH2B,CAA9B,EAQZ;AACD,SAAO;AACCC,SAAN,CAAYC,GAAZ,EAAiB;AAAA;AACf,cAAMC,WAAWD,IAAIE,UAAJ,CAAe,UAAf,CAAjB;AACA,YAAI,CAACD,QAAL,EAAe,MAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AACf,cAAMN,sBAAsBO,eAAtB,CAAsCJ,GAAtC,EAA2CC,QAA3C,CAAN;AAHe;AAIhB,KALI;;AAOCI,iBAAN,CAAoBL,GAApB,EAAyB;AAAA;AACvB,YAAIA,IAAIM,KAAJ,CAAUC,SAAd,EAAyB;AACvBP,cAAIQ,QAAJ,CAAaR,IAAIS,YAAJ,CAAiBX,aAAjB,CAAb;AACD;;AAED,cAAMG,WAAWD,IAAIE,UAAJ,CAAe,UAAf,CAAjB;AACAF,YAAIU,MAAJ,CAAWT,QAAX;;AAEA,cAAMU,gBAAgB,MAAMd,sBAAsBe,cAAtB,CAAqCZ,GAArC,EAA0CC,QAA1C,CAA5B;AACA,cAAMY,UAAkBjB,aAAakB,KAAb,CAAmBD,OAA3C;AACA,cAAMb,IAAIe,YAAJ,CAAiBJ,cAAcE,OAAd,CAAjB,EAAyCF,aAAzC,CAAN;AACAX,YAAIM,KAAJ,CAAUC,SAAV,GAAsBI,aAAtB;AACA,cAAMX,IAAIQ,QAAJ,CAAaR,IAAIS,YAAJ,CAAiBX,aAAjB,CAAb,CAAN;AAZuB;AAaxB,KApBI;;AAsBCkB,UAAN,CAAahB,GAAb,EAAkB;AAAA;AAChBA,YAAIgB,MAAJ;AACA,cAAMhB,IAAIQ,QAAJ,CAAaR,IAAIS,YAAJ,CAAiBX,aAAjB,CAAb,CAAN;AAFgB;AAGjB;AAzBI,GAAP;AA2BD","file":"createAuthController.js","sourcesContent":["import AuthenticationService from './services/AuthenticationService';\n\nexport default function createAuthController({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n}: {\n  usersManager: Object,\n  authenticationService: AuthenticationService,\n  homeRouterKey?: ?string,\n}) {\n  return {\n    async login(ctx) {\n      const strategy = ctx.namedParam('strategy');\n      if (!strategy) throw new Error('Strategy missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy);\n    },\n\n    async loginResponse(ctx) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(ctx, strategy);\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx) {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n"]}