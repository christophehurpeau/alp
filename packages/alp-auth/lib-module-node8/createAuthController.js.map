{"version":3,"sources":["../src/createAuthController.js"],"names":["createAuthController","usersManager","authenticationService","homeRouterKey","login","ctx","strategy","namedParam","Error","redirectAuthUrl","loginResponse","state","connected","redirect","urlGenerator","assert","connectedUser","accessResponse","keyPath","store","setConnected","logout"],"mappings":";;AAEA,eAAe,SAASA,oBAAT,CAA8B;AAC3CC,cAD2C;AAE3CC,uBAF2C;AAG3CC,kBAAgB;AAH2B,CAA9B,EAQZ;AACD,SAAO;AACL,UAAMC,KAAN,CAAYC,GAAZ,EAAiB;AACf,YAAMC,WAAWD,IAAIE,UAAJ,CAAe,UAAf,CAAjB;AACA,UAAI,CAACD,QAAL,EAAe,MAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AACf,YAAMN,sBAAsBO,eAAtB,CAAsCJ,GAAtC,EAA2CC,QAA3C,CAHS;AAIhB,KALI;;AAOL,UAAMI,aAAN,CAAoBL,GAApB,EAAyB;AACnBA,UAAIM,KAAJ,CAAUC,SADS,IAErBP,IAAIQ,QAAJ,CAAaR,IAAIS,YAAJ,CAAiBX,aAAjB,CAAb,CAFqB;;;AAKvB,YAAMG,WAAWD,IAAIE,UAAJ,CAAe,UAAf,CAAjB;AACAF,UAAIU,MAAJ,CAAWT,QAAX,CANuB;;;AAQvB,YAAMU,gBAAgB,MAAMd,sBAAsBe,cAAtB,CAAqCZ,GAArC,EAA0CC,QAA1C,CAA5B;AACA,YAAMY,UAAkBjB,aAAakB,KAAb,CAAmBD,OAA3C;AACA,YAAMb,IAAIe,YAAJ,CAAiBJ,cAAcE,OAAd,CAAjB,EAAyCF,aAAzC,CAViB,EAWvBX,IAAIM,KAAJ,CAAUC,SAAV,GAAsBI,aAXC,EAYvB,MAAMX,IAAIQ,QAAJ,CAAaR,IAAIS,YAAJ,CAAiBX,aAAjB,CAAb,CAZiB;AAaxB,KApBI;;AAsBL,UAAMkB,MAAN,CAAahB,GAAb,EAAkB;AAChBA,UAAIgB,MAAJ,EADgB,EAEhB,MAAMhB,IAAIQ,QAAJ,CAAaR,IAAIS,YAAJ,CAAiBX,aAAjB,CAAb,CAFU;AAGjB;AAzBI,GAAP;AA2BD","file":"createAuthController.js","sourcesContent":["import AuthenticationService from './services/AuthenticationService';\n\nexport default function createAuthController({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n}: {\n  usersManager: Object,\n  authenticationService: AuthenticationService,\n  homeRouterKey: ?string,\n}) {\n  return {\n    async login(ctx) {\n      const strategy = ctx.namedParam('strategy');\n      if (!strategy) throw new Error('Strategy missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy);\n    },\n\n    async loginResponse(ctx) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(ctx, strategy);\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx) {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n"]}