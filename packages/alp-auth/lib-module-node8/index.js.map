{"version":3,"sources":["../src/index.js"],"names":["sign","verify","promiseCallback","Logger","abstractUsersManager","mongoUsersManager","rethinkUsersManager","AuthenticationService","UserAccountsService","createAuthController","COOKIE_NAME","logger","init","usersManager","strategies","homeRouterKey","app","userAccountsService","authenticationService","config","controller","reduxReducers","user","state","connected","context","setConnected","debug","Error","token","done","time","Date","now","get","algorithm","audience","request","headers","expiresIn","cookies","set","httpOnly","secure","logout","expires","decodeJwt","userAgent","result","websocket","Cookies","require","users","Map","use","socket","next","handshakeData","keys","err","info","findConnected","client","id","on","delete","routes","login","segment","add","loginResponse","defaultRoute","middleware","ctx","setState","reduxInitialContext","transformForBrowser","notConnected"],"mappings":"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","file":"index.js","sourcesContent":["import { sign, verify } from 'jsonwebtoken';\nimport promiseCallback from 'promise-callback-factory';\nimport Logger from 'nightingale-logger/src';\nimport abstractUsersManager from './models/user/abstractUsersManager';\nimport mongoUsersManager from './models/user/mongoUsersManager';\nimport rethinkUsersManager from './models/user/rethinkUsersManager';\nimport AuthenticationService from './services/AuthenticationService';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport createAuthController from './createAuthController';\n\nexport { abstractUsersManager, mongoUsersManager, rethinkUsersManager };\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nexport default function init({\n  usersManager,\n  strategies,\n  homeRouterKey,\n}: {\n  usersManager: Object,\n  strategies: Object,\n  homeRouterKey: ?string,\n}) {\n  return app => {\n    const userAccountsService = new UserAccountsService(usersManager);\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n    });\n\n    app.reduxReducers.user = (state = null) => state;\n    app.reduxReducers.connected = (state = null) => state;\n\n    app.context.setConnected = async function(connected: number | string, user: Object) {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await promiseCallback(done =>\n        sign(\n          { connected, time: Date.now() },\n          this.config.get('authentication').get('secretKey'),\n          {\n            algorithm: 'HS512',\n            audience: this.request.headers['user-agent'],\n            expiresIn: '30 days',\n          },\n          done,\n        ),\n      );\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function() {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    const decodeJwt = (token, userAgent) => {\n      const result = verify(token, app.config.get('authentication').get('secretKey'), {\n        algorithm: 'HS512',\n        audience: userAgent,\n      });\n      return result && result.connected;\n    };\n\n    if (app.websocket) {\n      logger.debug('app has websocket');\n      // eslint-disable-next-line global-require\n      const Cookies = require('cookies');\n\n      const users = new Map();\n      app.websocket.users = users;\n\n      app.websocket.use(async (socket, next) => {\n        const handshakeData = socket.request;\n        const cookies = new Cookies(handshakeData, null, { keys: app.keys });\n        let token = cookies.get(COOKIE_NAME);\n        logger.debug('middleware websocket', { token });\n\n        if (!token) return next();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, handshakeData.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentication', { err });\n          return next();\n        }\n        logger.debug('middleware websocket', { connected });\n\n        if (!connected) return next();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) return next();\n\n        socket.user = user;\n        users.set(socket.client.id, user);\n\n        socket.on('disconnected', () => users.delete(socket.client.id));\n\n        await next();\n      });\n    }\n\n    return {\n      routes: {\n        login: [\n          '/login/:strategy',\n          segment => {\n            segment.add('/response', controller.loginResponse, 'loginResponse');\n            segment.defaultRoute(controller.login, 'login');\n          },\n        ],\n        logout: ['/logout', controller.logout],\n      },\n\n      middleware: async (ctx, next) => {\n        let token = ctx.cookies.get(COOKIE_NAME);\n        logger.debug('middleware', { token });\n\n        const setState = (connected, user) => {\n          ctx.state.connected = connected;\n          ctx.state.user = user;\n          if (ctx.reduxInitialContext) {\n            ctx.reduxInitialContext.connected = connected;\n            ctx.reduxInitialContext.user = user && usersManager.transformForBrowser(user);\n          }\n        };\n\n        const notConnected = () => {\n          setState(null, null);\n          return next();\n        };\n\n        if (!token) return notConnected();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, ctx.request.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentification', { err });\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n        logger.debug('middleware', { connected });\n\n        if (!connected) return notConnected();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) {\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n\n        setState(connected, user);\n        return next();\n      },\n    };\n  };\n}\n"]}