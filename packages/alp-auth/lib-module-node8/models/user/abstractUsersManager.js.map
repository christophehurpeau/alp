{"version":3,"sources":["../../../src/models/user/abstractUsersManager.js"],"names":["STATUSES","VALIDATED","DELETED","findOneByAccountOrEmails","provider","accountId","emails","Error","findConnected","connected","store","findByKey","insertOne","user","updateOne","transformForBrowser","id","displayName","fullName","status","emailDomains","accounts","map","account","name","profile"],"mappings":";;AAEA,eAAe;AACbA,YAAU;AACRC,eAAW,WADH;AAERC,aAAS;AAFD,GADG;;AAMbC,2BAAyB;AACvBC,YADuB;AAEvBC,aAFuB;AAGvBC;AAHuB,GAAzB,EAQuB;AACrB,UAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD,GAhBY;;AAkBbC,gBAAcC,SAAd,EAA6C;AAC3C,WAAO,KAAKC,KAAL,CAAWC,SAAX,CAAqBF,SAArB,CAAP;AACD,GApBY;;AAsBbG,YAAUC,IAAV,EAA8B;AAC5B,WAAO,KAAKH,KAAL,CAAWE,SAAX,CAAqBC,IAArB,CAAP;AACD,GAxBY;;AA0BbC,YAAUD,IAAV,EAA8B;AAC5B,WAAO,KAAKH,KAAL,CAAWI,SAAX,CAAqBD,IAArB,CAAP;AACD,GA5BY;;AA8BbE,sBAAoBF,IAApB,EAA0B;AACxB,WAAO;AACLG,UAAIH,KAAKG,EADJ;AAELC,mBAAaJ,KAAKI,WAFb;AAGLC,gBAAUL,KAAKK,QAHV;AAILC,cAAQN,KAAKM,MAJR;AAKLb,cAAQO,KAAKP,MALR;AAMLc,oBAAcP,KAAKO,YANd;AAOLC,gBAAUR,KAAKQ,QAAL,CAAcC,GAAd,CAAkBC,YAAY;AACtCnB,kBAAUmB,QAAQnB,QADoB;AAEtCC,mBAAWkB,QAAQlB,SAFmB;AAGtCmB,cAAMD,QAAQC,IAHwB;AAItCL,gBAAQI,QAAQJ,MAJsB;AAKtCM,iBAASF,QAAQE;AALqB,OAAZ,CAAlB;AAPL,KAAP;AAeD;AA9CY,CAAf","file":"abstractUsersManager.js","sourcesContent":["import type { UserType } from './types';\n\nexport default {\n  STATUSES: {\n    VALIDATED: 'validated',\n    DELETED: 'deleted',\n  },\n\n  findOneByAccountOrEmails({\n    provider,\n    accountId,\n    emails,\n  }: {\n    provider: string,\n    accountId: string | number,\n    emails: ?Array<string>,\n  }): Promise<?UserType> {\n    throw new Error('Not implemented');\n  },\n\n  findConnected(connected): Promise<?UserType> {\n    return this.store.findByKey(connected);\n  },\n\n  insertOne(user): Promise<any> {\n    return this.store.insertOne(user);\n  },\n\n  updateOne(user): Promise<any> {\n    return this.store.updateOne(user);\n  },\n\n  transformForBrowser(user) {\n    return {\n      id: user.id,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map(account => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  },\n};\n"]}