{"version":3,"sources":["../../../src/services/user/UserAccountsService.js"],"names":[],"mappings":"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","file":"UserAccountsService.js","sourcesContent":["/* global fetch */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport UsersManager from '../../models/user/UsersManager';\nimport userAccountGoogleService from './userAccountGoogleService';\n\ntype TokensObject = {\n    accessToken: string,\n    refreshToken?: string,\n};\n\nconst logger = new Logger('alp-auth.services.userAccounts');\n\nexport default class UserAccountsService extends EventEmitter {\n    static strategyToService = {\n        google: userAccountGoogleService,\n    };\n\n    constructor(usersManager: UsersManager) {\n        super();\n        this.usersManager = usersManager;\n    }\n\n    getScope(strategy: string, scopeKey: string, user, accountId) {\n        logger.debug('getScope', { strategy, userId: user && user._id });\n        const service = this.constructor.strategyToService[strategy];\n        const newScope = service.constructor.scopeKeyToScope[scopeKey];\n        if (!user || !accountId) {\n            return newScope;\n        }\n        const account = user.accounts\n            .find(account => account.provider === strategy && account.accountId === accountId);\n\n        if (!account) {\n            throw new Error('Could not found associated account');\n        }\n        return service.getScope(account.scope, newScope).join(' ');\n    }\n\n    async update(user, strategy, tokens, scope, subservice) {\n        const service = this.constructor.strategyToService[strategy];\n        const profile = await service.getProfile(tokens);\n        const account = user.accounts\n            .find(account => account.provider === strategy && service.isAccount(account, profile));\n        if (!account) {\n            // TODO check if already exists in other user => merge\n            // TODO else add a new account in this user\n            throw new Error('Could not found associated account');\n        }\n        account.status = 'valid';\n        account.accessToken = tokens.accessToken;\n        if (tokens.refreshToken) {\n            account.refreshToken = tokens.refreshToken;\n        }\n        if (tokens.expireDate) {\n            account.tokenExpireDate = tokens.expireDate;\n        }\n        account.scope = service.getScope(account.scope, scope);\n        account.subservices = account.subservices || [];\n        if (subservice && account.subservices.indexOf(subservice) === -1) {\n            account.subservices.push(subservice);\n        }\n\n        await this.usersManager.update(user);\n        return user;\n    }\n\n    /**\n     * @param  {Object} profile\n     * @param  {String} token\n     * @param  {String} tokenSecret\n     * @return {Promise}\n     */\n    async findOrCreateFromGoogle(strategy: string, tokens: TokensObject, scope: string, subservice) {\n        if (strategy !== 'google') {\n            throw new Error('Not supported at the moment');\n        }\n\n        const service = this.constructor.strategyToService[strategy];\n\n        const profile = await service.getProfile(tokens);\n\n        const plusProfile = await fetch(\n            `https://www.googleapis.com/plus/v1/people/me?access_token=${tokens.accessToken}`\n        ).then((response) => response.json());\n\n        const emails = service.getEmails(profile, plusProfile);\n\n\n        let user = await this.usersManager.findOneByAccountOrEmails({\n            provider: service.providerKey,\n            accountId: service.getId(profile),\n            emails,\n        });\n\n        if (!user) {\n            user = {};\n        }\n\n        Object.assign(user, {\n            displayName: service.getDisplayName(profile),\n            fullName: service.getFullName(profile),\n            status: this.usersManager.STATUSES.VALIDATED,\n        });\n\n        if (!user.accounts) user.accounts = [];\n\n        const accountId = service.getId(profile);\n\n        let account = user.accounts.find(account => (\n            account.provider === strategy && account.accountId === accountId\n        ));\n\n        if (!account) {\n            account = { provider: strategy, accountId: accountId };\n            user.accounts.push(account);\n        }\n\n        account.name = service.getAccountName(profile);\n        account.status = 'valid';\n        account.profile = profile;\n        account.accessToken = tokens.accessToken;\n        if (tokens.refreshToken) {\n            account.refreshToken = tokens.refreshToken;\n        }\n        if (tokens.expireDate) {\n            account.tokenExpireDate = tokens.expireDate;\n        }\n        account.scope = service.getScope(account.scope, scope);\n\n        if (!account.subservices) account.subservices = [];\n        if (subservice && !account.subservices.includes(subservice)) {\n            account.subservices.push(subservice);\n        }\n\n        if (!user.emails) user.emails = [];\n        const userEmails = user.emails;\n        emails.forEach((email) => {\n            if (!userEmails.includes(email)) {\n                userEmails.push(email);\n            }\n        });\n\n        await this.usersManager[user._id ? 'updateOne' : 'insertOne'](user);\n        return user;\n    }\n\n    updateAccount(user, account) {\n        return this.usersManager.updateAccount(user, account).then(() => user);\n    }\n}\n"]}