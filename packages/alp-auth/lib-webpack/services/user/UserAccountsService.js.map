{"version":3,"sources":["../../../src/services/user/UserAccountsService.js"],"names":["EventEmitter","Logger","userAccountGoogleService","logger","UserAccountsService","usersManager","strategy","scopeKey","user","accountId","debug","userId","_id","service","constructor","strategyToService","newScope","scopeKeyToScope","account","accounts","find","provider","Error","getScope","scope","join","tokens","subservice","getProfile","profile","isAccount","status","accessToken","refreshToken","expireDate","tokenExpireDate","subservices","indexOf","push","update","fetch","then","response","json","plusProfile","emails","getEmails","findOneByAccountOrEmails","providerKey","getId","info","Object","assign","displayName","getDisplayName","fullName","getFullName","STATUSES","VALIDATED","name","getAccountName","includes","userEmails","forEach","email","emailDomains","Array","from","reduce","domains","add","split","Set","keyPath","store","updateAccount","google"],"mappings":"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","file":"UserAccountsService.js","sourcesContent":["/* global fetch */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport userAccountGoogleService from './userAccountGoogleService';\n\ntype TokensObject = {\n  accessToken: string,\n  refreshToken?: string,\n  expireDate: Date,\n  tokenType: string,\n  idToken: string,\n};\n\nconst logger = new Logger('alp-auth.services.userAccounts');\n\nexport default class UserAccountsService extends EventEmitter {\n  static strategyToService = {\n    google: userAccountGoogleService,\n  };\n\n  constructor(usersManager) {\n    super();\n    this.usersManager = usersManager;\n  }\n\n  getScope(strategy: string, scopeKey: string, user, accountId) {\n    logger.debug('getScope', { strategy, userId: user && user._id });\n    const service = this.constructor.strategyToService[strategy];\n    const newScope = service.constructor.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts\n      .find(account => account.provider === strategy && account.accountId === accountId);\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(user, strategy, tokens, scope, subservice) {\n    const service = this.constructor.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const account = user.accounts\n            .find(account => account.provider === strategy && service.isAccount(account, profile));\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && account.subservices.indexOf(subservice) === -1) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.update(user);\n    return user;\n  }\n\n  async findOrCreateFromGoogle(strategy: string, tokens: TokensObject, scope: string, subservice) {\n    if (strategy !== 'google') {\n      throw new Error('Not supported at the moment');\n    }\n\n    const service = this.constructor.strategyToService[strategy];\n\n    const profile = await service.getProfile(tokens);\n\n    const plusProfile = await fetch(\n      `https://www.googleapis.com/plus/v1/people/me?access_token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n\n    const emails = service.getEmails(profile, plusProfile);\n\n\n    let user = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId: service.getId(profile),\n      emails,\n    });\n\n    logger.info('create user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: this.usersManager.STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    const accountId = service.getId(profile);\n\n    let account = user.accounts.find(account => (\n      account.provider === strategy && account.accountId === accountId\n    ));\n\n    if (!account) {\n      account = { provider: strategy, accountId: accountId };\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach((email) => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = Array.from(user.emails.reduce(\n      (domains, email) => domains.add(email.split('@', 2)[1]),\n      new Set(),\n    ));\n\n    const keyPath: string = this.usersManager.store.keyPath;\n    await this.usersManager[user[keyPath] ? 'updateOne' : 'insertOne'](user);\n    return user;\n  }\n\n  updateAccount(user, account) {\n    return this.usersManager.updateAccount(user, account).then(() => user);\n  }\n}\n"]}