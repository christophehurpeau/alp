{"version":3,"sources":["../src/index.js"],"names":["sign","verify","promiseCallback","Logger","abstractUsersManager","mongoUsersManager","rethinkUsersManager","AuthenticationService","UserAccountsService","createAuthController","default","routes","COOKIE_NAME","logger","init","controllers","usersManager","strategies","loginModuleDescriptor","homeRouterKey","Map","userAccountsService","authenticationService","app","config","set","context","setConnected","connected","user","debug","Error","state","time","Date","now","get","algorithm","audience","request","headers","expiresIn","done","token","cookies","httpOnly","secure","logout","expires","registerBrowserStateTransformer","initialBrowserState","ctx","transformForBrowser","decodeJwt","userAgent","result","websocket","Cookies","require","users","use","socket","next","handshakeData","keys","info","err","findConnected","client","id","on","delete"],"mappings":";;;;AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,cAA7B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,MAAP;AACA,OAAOC,oBAAP,MAAiC,oCAAjC;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,mBAAP,MAAgC,mCAAhC;AACA,OAAOC,qBAAP,MAAkC,kCAAlC;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;AACA,OAAOC,oBAAP,MAAiC,2CAAjC;;AAEA,SAASL,oBAAT,EAA+BC,iBAA/B,EAAkDC,mBAAlD;AACA,SAASI,WAAWC,MAApB,QAAkC,UAAlC;;AAEA,IAAMC,cAAc,eAApB;AACA,IAAMC,SAAS,IAAIV,MAAJ,CAAW,UAAX,CAAf;;AAEA,eAAe,SAASW,IAAT,OAYZ;AAAA;;AAAA,MAXDC,WAWC,QAXDA,WAWC;AAAA,MAVDC,YAUC,QAVDA,YAUC;AAAA,MATDC,UASC,QATDA,UASC;AAAA,MARDC,qBAQC,QARDA,qBAQC;AAAA,MAPDC,aAOC,QAPDA,aAOC;;AAAA;AALDJ,eAKC,EALYK,GAKZ;AAJDJ,gBAIC;AAHDC,cAGC;AAFDC,yBAEC;AADDC,iBACC;AAAA;;AACD,SAAO,eAAO;AACZ,QAAME,sBAAsB,IAAIb,mBAAJ,CAAwBQ,YAAxB,CAA5B;;AAEA,QAAMM,wBAAwB,IAAIf,qBAAJ,CAC5BgB,IAAIC,MADwB,EAE5BP,UAF4B,EAG5BI,mBAH4B,CAA9B;;AAMAN,gBAAYU,GAAZ,CAAgB,MAAhB,EAAwBhB,qBAAqB;AAC3CO,gCAD2C;AAE3CM,kDAF2C;AAG3CJ,kDAH2C;AAI3CC;AAJ2C,KAArB,CAAxB;;AAOAI,QAAIG,OAAJ,CAAYC,YAAZ;AAAA,4DAA2B,iBAAgBC,SAAhB,EAA0CC,IAA1C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAgBD,SAAhB;;AAAA,wBAA0CC,IAA1C;;AACzBhB,uBAAOiB,KAAP,CAAa,cAAb,EAA6B,EAAEF,oBAAF,EAA7B;;AADyB,oBAEpBA,SAFoB;AAAA;AAAA;AAAA;;AAAA,sBAGjB,IAAIG,KAAJ,CAAU,gCAAV,CAHiB;;AAAA;;AAMzB,qBAAKC,KAAL,CAAWJ,SAAX,GAAuBA,SAAvB;AACA,qBAAKI,KAAL,CAAWH,IAAX,GAAkBA,IAAlB;;AAPyB;AAAA,uBASL3B,gBAAgB;AAAA,yBAAQF,KAC1C,EAAE4B,oBAAF,EAAaK,MAAMC,KAAKC,GAAL,EAAnB,EAD0C,EAE1C,MAAKX,MAAL,CAAYY,GAAZ,CAAgB,gBAAhB,EAAkCA,GAAlC,CAAsC,WAAtC,CAF0C,EAG1C;AACEC,+BAAW,OADb;AAEEC,8BAAU,MAAKC,OAAL,CAAaC,OAAb,CAAqB,YAArB,CAFZ;AAGEC,+BAAW;AAHb,mBAH0C,EAQ1CC,IAR0C,CAAR;AAAA,iBAAhB,CATK;;AAAA;AASnBC,qBATmB;;;AAoBzB,qBAAKC,OAAL,CAAanB,GAAb,CAAiBb,WAAjB,EAA8B+B,KAA9B,EAAqC;AACnCE,4BAAU,IADyB;AAEnCC,0BAAQ,KAAKtB,MAAL,CAAYY,GAAZ,CAAgB,YAAhB;AAF2B,iBAArC;;AApByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA3B;;AAAA;AAAA;AAAA;AAAA;;AA0BAb,QAAIG,OAAJ,CAAYqB,MAAZ,GAAqB,YAAY;AAC/B,aAAO,KAAKf,KAAL,CAAWJ,SAAlB;AACA,aAAO,KAAKI,KAAL,CAAWH,IAAlB;AACA,WAAKe,OAAL,CAAanB,GAAb,CAAiBb,WAAjB,EAA8B,EAA9B,EAAkC,EAAEoC,SAAS,IAAId,IAAJ,CAAS,CAAT,CAAX,EAAlC;AACD,KAJD;;AAMAX,QAAI0B,+BAAJ,CAAoC,UAACC,mBAAD,EAAsBC,GAAtB,EAA8B;AAChE,UAAIA,IAAInB,KAAJ,CAAUJ,SAAd,EAAyB;AACvBsB,4BAAoBtB,SAApB,GAAgCuB,IAAInB,KAAJ,CAAUJ,SAA1C;AACAsB,4BAAoBrB,IAApB,GAA2Bb,aAAaoC,mBAAb,CAAiCD,IAAInB,KAAJ,CAAUH,IAA3C,CAA3B;AACD;AACF,KALD;;AAOA,QAAMwB,YAAY,SAAZA,SAAY,CAACV,KAAD,EAAQW,SAAR,EAAsB;AACtC,UAAMC,SAAStD,OAAO0C,KAAP,EAAcpB,IAAIC,MAAJ,CAAWY,GAAX,CAAe,gBAAf,EAAiCA,GAAjC,CAAqC,WAArC,CAAd,EAAiE;AAC9EC,mBAAW,OADmE;AAE9EC,kBAAUgB;AAFoE,OAAjE,CAAf;AAIA,aAAOC,UAAUA,OAAO3B,SAAxB;AACD,KAND;;AAQA,QAAIL,IAAIiC,SAAR,EAAmB;AAAA;AACjB3C,eAAOiB,KAAP,CAAa,mBAAb;AACA;AACA,YAAM2B,UAAUC,QAAQ,SAAR,CAAhB;;AAEA,YAAMC,QAAQ,IAAIvC,GAAJ,EAAd;AACAG,YAAIiC,SAAJ,CAAcG,KAAd,GAAsBA,KAAtB;;AAEApC,YAAIiC,SAAJ,CAAcI,GAAd;AAAA,gEAAkB,kBAAOC,MAAP,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,iCADU,GACMF,OAAOtB,OADb;AAEVK,2BAFU,GAEA,IAAIa,OAAJ,CAAYM,aAAZ,EAA2B,IAA3B,EAAiC,EAAEC,MAAMzC,IAAIyC,IAAZ,EAAjC,CAFA;AAGZrB,yBAHY,GAGJC,QAAQR,GAAR,CAAYxB,WAAZ,CAHI;;AAIhBC,2BAAOiB,KAAP,CAAa,sBAAb,EAAqC,EAAEa,YAAF,EAArC;;AAJgB,wBAMXA,KANW;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAMSmB,MANT;;AAAA;AAAA;;AAAA;AAQZlC,6BARY;AAAA;AAAA;AAAA,2BAUIyB,UAAUV,KAAV,EAAiBoB,cAAcvB,OAAd,CAAsB,YAAtB,CAAjB,CAVJ;;AAAA;AAUdZ,6BAVc;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAYdf,2BAAOoD,IAAP,CAAY,iCAAZ,EAA+C,EAAEC,iBAAF,EAA/C;AAZc;AAAA,2BAaDJ,MAbC;;AAAA;AAAA;;AAAA;AAehBjD,2BAAOiB,KAAP,CAAa,sBAAb,EAAqC,EAAEF,oBAAF,EAArC;;AAfgB,wBAiBXA,SAjBW;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAiBakC,MAjBb;;AAAA;AAAA;;AAAA;AAAA;AAAA,2BAmBG9C,aAAamD,aAAb,CAA2BvC,SAA3B,CAnBH;;AAAA;AAmBVC,wBAnBU;;AAAA,wBAqBXA,IArBW;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAqBQiC,MArBR;;AAAA;AAAA;;AAAA;;AAuBhBD,2BAAOhC,IAAP,GAAcA,IAAd;AACA8B,0BAAMlC,GAAN,CAAUoC,OAAOO,MAAP,CAAcC,EAAxB,EAA4BxC,IAA5B;;AAEAgC,2BAAOS,EAAP,CAAU,cAAV,EAA0B;AAAA,6BAAMX,MAAMY,MAAN,CAAaV,OAAOO,MAAP,CAAcC,EAA3B,CAAN;AAAA,qBAA1B;;AA1BgB;AAAA,2BA4BVP,MA5BU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAlB;;AAAA;AAAA;AAAA;AAAA;AARiB;AAsClB;;AAED;AAAA,4DAAO,kBAAOX,GAAP,EAAYW,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACDnB,qBADC,GACOQ,IAAIP,OAAJ,CAAYR,GAAZ,CAAgBxB,WAAhB,CADP;;AAELC,uBAAOiB,KAAP,CAAa,YAAb,EAA2B,EAAEa,YAAF,EAA3B;;AAFK,oBAIAA,KAJA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAIoBmB,MAJpB;;AAAA;AAAA;;AAAA;AAMDlC,yBANC;AAAA;AAAA;AAAA,uBAQeyB,UAAUV,KAAV,EAAiBQ,IAAIZ,OAAJ,CAAYC,OAAZ,CAAoB,YAApB,CAAjB,CARf;;AAAA;AAQHZ,yBARG;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAUHf,uBAAOoD,IAAP,CAAY,mCAAZ,EAAiD,EAAEC,iBAAF,EAAjD;AACAf,oBAAIP,OAAJ,CAAYnB,GAAZ,CAAgBb,WAAhB,EAA6B,EAA7B,EAAiC,EAAEoC,SAAS,IAAId,IAAJ,CAAS,CAAT,CAAX,EAAjC;AAXG;AAAA,uBAYU4B,MAZV;;AAAA;AAAA;;AAAA;AAcLjD,uBAAOiB,KAAP,CAAa,YAAb,EAA2B,EAAEF,oBAAF,EAA3B;;AAdK,oBAgBAA,SAhBA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAgBwBkC,MAhBxB;;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAkBc9C,aAAamD,aAAb,CAA2BvC,SAA3B,CAlBd;;AAAA;AAkBCC,oBAlBD;;AAAA,oBAoBAA,IApBA;AAAA;AAAA;AAAA;;AAqBHsB,oBAAIP,OAAJ,CAAYnB,GAAZ,CAAgBb,WAAhB,EAA6B,EAA7B,EAAiC,EAAEoC,SAAS,IAAId,IAAJ,CAAS,CAAT,CAAX,EAAjC;AArBG;AAAA,uBAsBU4B,MAtBV;;AAAA;AAAA;;AAAA;;AAyBLX,oBAAInB,KAAJ,CAAUJ,SAAV,GAAsBA,SAAtB;AACAuB,oBAAInB,KAAJ,CAAUH,IAAV,GAAiBA,IAAjB;;AA1BK;AAAA,uBA4BCiC,MA5BD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AA8BD,GArID;AAsID","file":"index.js","sourcesContent":["import { sign, verify } from 'jsonwebtoken';\nimport promiseCallback from 'promise-callback-factory';\nimport Logger from 'nightingale-logger/src';\nimport abstractUsersManager from './models/user/abstractUsersManager';\nimport mongoUsersManager from './models/user/mongoUsersManager';\nimport rethinkUsersManager from './models/user/rethinkUsersManager';\nimport AuthenticationService from './services/AuthenticationService';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport createAuthController from './controllers/createAuthController.server';\n\nexport { abstractUsersManager, mongoUsersManager, rethinkUsersManager };\nexport { default as routes } from './routes';\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nexport default function init({\n  controllers,\n  usersManager,\n  strategies,\n  loginModuleDescriptor,\n  homeRouterKey,\n}: {\n  controllers: Map,\n  usersManager: Object,\n  strategies: Object,\n  loginModuleDescriptor: Object,\n  homeRouterKey: ?string,\n}) {\n  return app => {\n    const userAccountsService = new UserAccountsService(usersManager);\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    controllers.set('auth', createAuthController({\n      usersManager,\n      authenticationService,\n      loginModuleDescriptor,\n      homeRouterKey,\n    }));\n\n    app.context.setConnected = async function (connected: number|string, user: Object) {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await promiseCallback(done => sign(\n        { connected, time: Date.now() },\n        this.config.get('authentication').get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: this.request.headers['user-agent'],\n          expiresIn: '30 days',\n        },\n        done,\n      ));\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function () {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    app.registerBrowserStateTransformer((initialBrowserState, ctx) => {\n      if (ctx.state.connected) {\n        initialBrowserState.connected = ctx.state.connected;\n        initialBrowserState.user = usersManager.transformForBrowser(ctx.state.user);\n      }\n    });\n\n    const decodeJwt = (token, userAgent) => {\n      const result = verify(token, app.config.get('authentication').get('secretKey'), {\n        algorithm: 'HS512',\n        audience: userAgent,\n      });\n      return result && result.connected;\n    };\n\n    if (app.websocket) {\n      logger.debug('app has websocket');\n      // eslint-disable-next-line global-require\n      const Cookies = require('cookies');\n\n      const users = new Map();\n      app.websocket.users = users;\n\n      app.websocket.use(async (socket, next) => {\n        const handshakeData = socket.request;\n        const cookies = new Cookies(handshakeData, null, { keys: app.keys });\n        let token = cookies.get(COOKIE_NAME);\n        logger.debug('middleware websocket', { token });\n\n        if (!token) return await next();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, handshakeData.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentication', { err });\n          return await next();\n        }\n        logger.debug('middleware websocket', { connected });\n\n        if (!connected) return await next();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) return await next();\n\n        socket.user = user;\n        users.set(socket.client.id, user);\n\n        socket.on('disconnected', () => users.delete(socket.client.id));\n\n        await next();\n      });\n    }\n\n    return async (ctx, next) => {\n      let token = ctx.cookies.get(COOKIE_NAME);\n      logger.debug('middleware', { token });\n\n      if (!token) return await next();\n\n      let connected;\n      try {\n        connected = await decodeJwt(token, ctx.request.headers['user-agent']);\n      } catch (err) {\n        logger.info('failed to verify authentification', { err });\n        ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n        return await next();\n      }\n      logger.debug('middleware', { connected });\n\n      if (!connected) return await next();\n\n      const user = await usersManager.findConnected(connected);\n\n      if (!user) {\n        ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n        return await next();\n      }\n\n      ctx.state.connected = connected;\n      ctx.state.user = user;\n\n      await next();\n    };\n  };\n}\n"]}