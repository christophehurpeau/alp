{"version":3,"sources":["../../../src/models/user/mongoUsersManager.js"],"names":["abstractUsersManager","UserType","AccountType","mongoUsersManager","Object","create","assign","findOneByAccountOrEmails","provider","accountId","emails","query","length","$or","$in","store","findOne","updateAccount","user","account","accountIndex","accounts","indexOf","Error","partialUpdateOne"],"mappings":";;;;AAAA,OAAOA,oBAAP,MAAiC,wBAAjC;AACA,SAAcC,QAAd,EAAwBC,WAAxB,QAA2C,eAA3C;;AAEA,IAAMC,oBAAoBC,OAAOC,MAAP,CAAcL,oBAAd,CAA1B;AACA,eAAeG,iBAAf;;AAEAC,OAAOE,MAAP,CAAcH,iBAAd,EAAiC;AAC/BI,0BAD+B,0CAOT;AAAA,QALlBC,QAKkB,QALlBA,QAKkB;AAAA,QALRC,SAKQ,QALRA,SAKQ;AAAA,QALGC,MAKH,QALGA,MAKH;;AAAA;AAJlBF,cAIkB;AAHlBC,eAGkB;AAFlBC,YAEkB;AAAA;;AAAA;AAAA;AAJlBF,gBAIkB;AAHlBC,iBAGkB;AAFlBC,cAEkB;AAAA;;AAAA;AACpB,YAAIC,QAAQ;AACV,+BAAqBH,QADX;AAEV,gCAAsBC;AAFZ,SAAZ;;AAKA,YAAIC,UAAUA,OAAOE,MAArB,EAA6B;AAC3BD,kBAAQ;AACNE,iBAAK,CACHF,KADG,EAEH;AACED,sBAAQ,EAAEI,KAAKJ,MAAP;AADV,aAFG;AADC,WAAR;AAQD;;AAED,eAAO,KAAKK,KAAL,CAAWC,OAAX,CAAmBL,KAAnB,CAAP;AAjBoB;AAAA;AAkBrB,GAzB8B;AA2B/BM,eA3B+B,yBA2BjBC,IA3BiB,EA2BDC,OA3BC,EA2BqB;AAAA,YAAtCD,IAAsC,EAAhCjB,QAAgC;;AAAA,YAAtBkB,OAAsB,EAAbjB,WAAa;;AAAA,YAAtCgB,IAAsC,EAAhCjB,QAAgC;;AAAA,YAAtBkB,OAAsB,EAAbjB,WAAa;;AAClD,QAAIkB,eAAeF,KAAKG,QAAL,CAAcC,OAAd,CAAsBH,OAAtB,CAAnB;AACA,QAAIC,iBAAiB,CAAC,CAAtB,EAAyB;AACvB,YAAM,IAAIG,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,WAAO,KAAKR,KAAL,CAAWS,gBAAX,CAA4BN,IAA5B,oCAAiDE,YAAjD,EAAkED,OAAlE,EAAP;AACD;AAlC8B,CAAjC","file":"mongoUsersManager.js","sourcesContent":["import abstractUsersManager from './abstractUsersManager';\nimport type { UserType, AccountType } from './types/index';\n\nconst mongoUsersManager = Object.create(abstractUsersManager);\nexport default mongoUsersManager;\n\nObject.assign(mongoUsersManager, {\n  findOneByAccountOrEmails(\n    { provider, accountId, emails }: {\n      provider: string,\n      accountId: string|number,\n      emails: ?Array<string>,\n    },\n  ): Promise<?UserType> {\n    let query = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    return this.store.findOne(query);\n  },\n\n  updateAccount(user: UserType, account: AccountType) {\n    let accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, { [`accounts.${accountIndex}`]: account });\n  },\n});\n"]}