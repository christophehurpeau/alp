{"version":3,"sources":["../../../src/models/user/abstractUsersManager.js"],"names":["STATUSES","VALIDATED","DELETED","findOneByAccountOrEmails","provider","accountId","emails","Error","findConnected","connected","store","findByKey","insertOne","user","updateOne","transformForBrowser","displayName","fullName","status","accounts","map","account","name","profile"],"mappings":";;;AAEA,eAAe;AACbA,YAAU;AACRC,eAAW,WADH;AAERC,aAAS;AAFD,GADG;;AAMbC,0BANa,0CAYS;AAAA,QALlBC,QAKkB,QALlBA,QAKkB;AAAA,QALRC,SAKQ,QALRA,SAKQ;AAAA,QALGC,MAKH,QALGA,MAKH;;AAAA;AALlBF,cAKkB,EALlBA,QAKkB;AALRC,eAKQ,EALRA,SAKQ;AALGC,YAKH,EALGA;AAKH;AAJlBF,cAIkB;AAHlBC,eAGkB;AAFlBC,YAEkB;AAAA;;AAAA;AALlBF,cAKkB,EALlBA,QAKkB;AALRC,eAKQ,EALRA,SAKQ;AALGC,YAKH,EALGA;AAKH;AAJlBF,cAIkB;AAHlBC,eAGkB;AAFlBC,YAEkB;AAAA;;AAAA;AACpB,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AADoB;AAErB,GAdY;AAgBbC,eAhBa,yBAgBCC,SAhBD,EAgBgC;AAAA;AAC3C,aAAO,KAAKC,KAAL,CAAWC,SAAX,CAAqBF,SAArB,CAAP;AAD2C;AAE5C,GAlBY;AAoBbG,WApBa,qBAoBHC,IApBG,EAoBY;AAAA;AACvB,aAAO,KAAKH,KAAL,CAAWE,SAAX,CAAqBC,IAArB,CAAP;AADuB;AAExB,GAtBY;AAwBbC,WAxBa,qBAwBHD,IAxBG,EAwBY;AAAA;AACvB,aAAO,KAAKH,KAAL,CAAWI,SAAX,CAAqBD,IAArB,CAAP;AADuB;AAExB,GA1BY;AA4BbE,qBA5Ba,+BA4BOF,IA5BP,EA4Ba;AACxB,WAAO;AACLG,mBAAaH,KAAKG,WADb;AAELC,gBAAUJ,KAAKI,QAFV;AAGLC,cAAQL,KAAKK,MAHR;AAILZ,cAAQO,KAAKP,MAJR;AAKLa,gBAAUN,KAAKM,QAAL,CAAcC,GAAd,CAAkB;AAAA,eAAY;AACtChB,oBAAUiB,QAAQjB,QADoB;AAEtCC,qBAAWgB,QAAQhB,SAFmB;AAGtCiB,gBAAMD,QAAQC,IAHwB;AAItCJ,kBAAQG,QAAQH,MAJsB;AAKtCK,mBAASF,QAAQE;AALqB,SAAZ;AAAA,OAAlB;AALL,KAAP;AAaD;AA1CY,CAAf","file":"abstractUsersManager.js","sourcesContent":["import type { UserType } from './types';\n\nexport default {\n  STATUSES: {\n    VALIDATED: 'validated',\n    DELETED: 'deleted',\n  },\n\n  findOneByAccountOrEmails(\n    { provider, accountId, emails }: {\n      provider: string,\n      accountId: string|number,\n      emails: ?Array<string>,\n    },\n  ): Promise<?UserType> {\n    throw new Error('Not implemented');\n  },\n\n  findConnected(connected): Promise<?UserType> {\n    return this.store.findByKey(connected);\n  },\n\n  insertOne(user): Promise {\n    return this.store.insertOne(user);\n  },\n\n  updateOne(user): Promise {\n    return this.store.updateOne(user);\n  },\n\n  transformForBrowser(user) {\n    return {\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      accounts: user.accounts.map(account => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  },\n};\n"]}