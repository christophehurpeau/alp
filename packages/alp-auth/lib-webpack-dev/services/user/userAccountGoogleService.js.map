{"version":3,"sources":["../../../src/services/user/userAccountGoogleService.js"],"names":["EventEmitter","providerKey","tokens","fetch","accessToken","then","response","json","account","profile","googleId","id","email","plusProfile","emails","push","forEach","indexOf","value","name","givenName","given_name","familyName","family_name","newScope","getScope","oldScope","split","concat","filter","item","i","ar","scopeKeyToScope","login"],"mappings":";;;;;;;;;;AAAA;AACA,OAAOA,YAAP,MAAyB,QAAzB;;AAEA,eAAe;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA,0NAKbC,WALa,GAKC,QALD;AAAA;;AAAA;AAAA;AAAA,+BAOFC,MAPE,EAOM;AACjB,aAAOC,sEAAoED,OAAOE,WAA3E,EACEC,IADF,CACO,UAACC,QAAD;AAAA,eAAcA,SAASC,IAAT,EAAd;AAAA,OADP,CAAP;AAED;AAVY;AAAA;AAAA,8BAYHC,OAZG,EAYMC,OAZN,EAYe;AAC1B,aAAOD,QAAQE,QAAR,KAAqBD,QAAQE,EAApC;AACD;AAdY;AAAA;AAAA,0BAgBPF,OAhBO,EAgBE;AACb,aAAOA,QAAQE,EAAf;AACD;AAlBY;AAAA;AAAA,mCAoBEF,OApBF,EAoBW;AACtB,aAAOA,QAAQG,KAAf;AACD;AAtBY;AAAA;AAAA,8BAwBHH,OAxBG,EAwBMI,WAxBN,EAwBmB;AAC9B,UAAMC,WAAN;;AAEA,UAAIL,QAAQG,KAAZ,EAAmB;AACjBE,eAAOC,IAAP,CAAYN,QAAQG,KAApB;AACD;;AAED,UAAIC,YAAYC,MAAhB,EAAwB;AACtBD,oBAAYC,MAAZ,CAAmBE,OAAnB,CAA2B,UAACJ,KAAD,EAAW;AACpC,cAAIE,OAAOG,OAAP,CAAeL,MAAMM,KAArB,MAAgC,CAAC,CAArC,EAAwC;AACtCJ,mBAAOC,IAAP,CAAYH,MAAMM,KAAlB;AACD;AACF,SAJD;AAKD;;AAED,aAAOJ,MAAP;AACD;AAxCY;AAAA;AAAA,mCA0CEL,OA1CF,EA0CW;AACtB,aAAOA,QAAQU,IAAf;AACD;AA5CY;AAAA;AAAA,gCA8CDV,OA9CC,EA8CQ;AACnB,aAAO;AACLW,mBAAWX,QAAQY,UADd;AAELC,oBAAYb,QAAQc;AAFf,OAAP;AAID;AAnDY;AAAA;AAAA,oCAqDGC,QArDH,EAqDa;AACxB,aAAO,KAAKC,QAAL,CAAcD,QAAd,CAAP;AACD;AAvDY;AAAA;AAAA,6BAyDJE,QAzDI,EAyDMF,QAzDN,EAyDgB;AAC3B,aAAO,CAACE,QAAD,GAAYF,SAASG,KAAT,CAAe,GAAf,CAAZ,GAAkCD,SAASE,MAAT,CAAgBJ,SAASG,KAAT,CAAe,GAAf,CAAhB,EAChCE,MADgC,CACzB,UAACC,IAAD,EAAOC,CAAP,EAAUC,EAAV;AAAA,eAAiBA,GAAGf,OAAH,CAAWa,IAAX,MAAqBC,CAAtC;AAAA,OADyB,CAAzC;AAED;AA5DY;;AAAA;AAAA,EAA2C/B,YAA3C,UACNiC,eADM,GACY;AACvBC,SAAO;AADgB,CADZ,WAAf","file":"userAccountGoogleService.js","sourcesContent":["/* global fetch */\nimport EventEmitter from 'events';\n\nexport default new class UserAccountGoogleService extends EventEmitter {\n  static scopeKeyToScope = {\n    login: 'openid profile email https://www.googleapis.com/auth/plus.profile.emails.read',\n  };\n\n  providerKey = 'google';\n\n  getProfile(tokens) {\n    return fetch(`https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokens.accessToken}`)\n            .then((response) => response.json());\n  }\n\n  isAccount(account, profile) {\n    return account.googleId === profile.id;\n  }\n\n  getId(profile) {\n    return profile.id;\n  }\n\n  getAccountName(profile) {\n    return profile.email;\n  }\n\n  getEmails(profile, plusProfile) {\n    const emails = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    if (plusProfile.emails) {\n      plusProfile.emails.forEach((email) => {\n        if (emails.indexOf(email.value) === -1) {\n          emails.push(email.value);\n        }\n      });\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile) {\n    return profile.name;\n  }\n\n  getFullName(profile) {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope) {\n    return this.getScope(newScope);\n  }\n\n  getScope(oldScope, newScope) {\n    return !oldScope ? newScope.split(' ') : oldScope.concat(newScope.split(' '))\n            .filter((item, i, ar) => ar.indexOf(item) === i);\n  }\n}();\n"]}