{"version":3,"sources":["../../../src/models/user/UsersManager.js"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,SAAS,eAAT,QAAgC,MAAhC;AACA,SAAS,QAAT,EAAmB,WAAnB,QAAsC,SAAtC;;AAEA,eAAe,MAAM,YAAN,SAA2B,eAA3B,CAA2C;AAAA;AAAA;;AAAA,iDAQtD,QARsD,GAQ3C,aAAa,QAR8B;AAAA;;AAUtD,oCAGsB;AAAA,YAFhB,QAEgB,SAFhB,QAEgB;AAAA,YAFN,SAEM,SAFN,SAEM;AAAA,YAFK,MAEL,SAFK,MAEL;;AAAA;AAAA,iCAAnB,OAAmB;AAAA;AAAA;;AAAA;AAAA;;AAAA,0DADZ,QACY,sCADM,SACN,qCADM,SACN,gCADgC,MAChC,uCADgC,MAChC,kBADgC,MAChC;AAAA;AAAA;AAAA;AAAA;;AAClB,YAAI,QAAQ;AACR,iCAAqB,QADb;AAER,kCAAsB;AAFd,SAAZ;;AAKA,YAAI,UAAU,OAAO,MAArB,EAA6B;AACzB,oBAAQ;AACJ,qBAAK,CACD,KADC,EAED;AACI,4BAAQ,EAAE,KAAK,MAAP;AADZ,iBAFC;AADD,aAAR;AAQH;;AAfiB,oBAiBX,KAAK,KAAL,CAAW,OAAX,CAAmB,KAAnB,CAjBW;AAkBrB;;AAED,kBAAc,SAAd,EAA6C;AAAA;AAAA,kCAAnB,OAAmB;AAAA;AAAA;;AAAA;AAAA;;AAAA,qBAClC,KAAK,KAAL,CAAW,SAAX,CAAqB,SAArB,CADkC;AAE5C;;AAED,cAAU,IAAV,EAAyB;AAAA;AAAA,kCAAR,OAAQ;AAAA;AAAA;;AAAA;AAAA;;AAAA,qBACd,KAAK,KAAL,CAAW,SAAX,CAAqB,IAArB,CADc;AAExB;;AAED,cAAU,IAAV,EAAyB;AAAA;AAAA,kCAAR,OAAQ;AAAA;AAAA;;AAAA;AAAA;;AAAA,qBACd,KAAK,KAAL,CAAW,SAAX,CAAqB,IAArB,CADc;AAExB;;AAED,kBAAc,IAAd,EAA8B,OAA9B,EAAoD;AAAA,cAAtC,IAAsC,YAAhC,QAAgC;AAAA,0HAAtC,IAAsC;AAAA;;AAAA,cAAtB,OAAsB,YAAb,WAAa;AAAA,gIAAtB,OAAsB;AAAA;;AAChD,YAAI,eAAe,KAAK,QAAL,CAAc,OAAd,CAAsB,OAAtB,CAAnB;AACA,eAAO,KAAK,KAAL,CAAW,gBAAX,CAA4B,IAA5B,EAAkC,EAAE,CAAE,aAAW,YAAa,GAA1B,GAA8B,OAAhC,EAAlC,CAAP;AACH;;AAED,wBAAoB,IAApB,EAA0B;AACtB,eAAO;AACH,yBAAa,KAAK,WADf;AAEH,sBAAU,KAAK,QAFZ;AAGH,oBAAQ,KAAK,MAHV;AAIH,oBAAQ,KAAK,MAJV;AAKH,sBAAU,KAAK,QAAL,CAAc,GAAd,CAAkB;AAAA,uBAAY;AACpC,8BAAU,QAAQ,QADkB;AAEpC,+BAAW,QAAQ,SAFiB;AAGpC,0BAAM,QAAQ,IAHsB;AAIpC,4BAAQ,QAAQ;AAJoB,iBAAZ;AAAA,aAAlB;AALP,SAAP;AAYH;AA/DqD;AAArC,Y,CAGV,Q,GAAW;AACd,eAAW,WADG;AAEd,aAAS;AAFK,C","file":"UsersManager.js","sourcesContent":["import MongoStore from 'liwi/mongo';\nimport { AbstractManager } from 'liwi';\nimport { UserType, AccountType } from './types';\n\nexport default class UsersManager extends AbstractManager {\n    store: MongoStore;\n\n    static STATUSES = {\n        VALIDATED: 'validated',\n        DELETED: 'deleted',\n    };\n\n    STATUSES = UsersManager.STATUSES;\n\n    findOneByAccountOrEmails(\n        { provider, accountId, emails }:\n            { provider: string, accountId: string|number, emails: ?Array<string> }\n    ): Promise<?UserType> {\n        let query = {\n            'accounts.provider': provider,\n            'accounts.accountId': accountId,\n        };\n\n        if (emails && emails.length) {\n            query = {\n                $or: [\n                    query,\n                    {\n                        emails: { $in: emails },\n                    },\n                ],\n            };\n        }\n\n        return this.store.findOne(query);\n    }\n\n    findConnected(connected): Promise<?UserType> {\n        return this.store.findByKey(connected);\n    }\n\n    insertOne(user): Promise {\n        return this.store.insertOne(user);\n    }\n\n    updateOne(user): Promise {\n        return this.store.updateOne(user);\n    }\n\n    updateAccount(user: UserType, account: AccountType) {\n        let accountIndex = user.accounts.indexOf(account);\n        return this.store.partialUpdateOne(user, { [`accounts.${accountIndex}`]: account });\n    }\n\n    transformForBrowser(user) {\n        return {\n            displayName: user.displayName,\n            fullName: user.fullName,\n            status: user.status,\n            emails: user.emails,\n            accounts: user.accounts.map(account => ({\n                provider: account.provider,\n                accountId: account.accountId,\n                name: account.name,\n                status: account.status,\n            })),\n        };\n    }\n}\n"]}