{"version":3,"sources":["../../../src/services/user/UserAccountsService.js"],"names":["EventEmitter","Logger","userAccountGoogleService","TokensObject","accessToken","refreshToken","expireDate","Date","tokenType","idToken","logger","UserAccountsService","constructor","usersManager","getScope","strategy","scopeKey","user","accountId","debug","userId","_id","service","strategyToService","newScope","scopeKeyToScope","account","accounts","find","provider","Error","scope","join","update","tokens","subservice","profile","getProfile","isAccount","status","tokenExpireDate","subservices","indexOf","push","findOrCreateFromGoogle","plusProfile","fetch","then","response","json","emails","getEmails","findOneByAccountOrEmails","providerKey","getId","console","log","Object","assign","displayName","getDisplayName","fullName","getFullName","STATUSES","VALIDATED","name","getAccountName","includes","userEmails","forEach","email","keyPath","store","updateAccount","google"],"mappings":"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","file":"UserAccountsService.js","sourcesContent":["/* global fetch */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport userAccountGoogleService from './userAccountGoogleService';\n\ntype TokensObject = {\n  accessToken: string,\n  refreshToken?: string,\n  expireDate: Date,\n  tokenType: string,\n  idToken: string,\n};\n\nconst logger = new Logger('alp-auth.services.userAccounts');\n\nexport default class UserAccountsService extends EventEmitter {\n  static strategyToService = {\n    google: userAccountGoogleService,\n  };\n\n  constructor(usersManager) {\n    super();\n    this.usersManager = usersManager;\n  }\n\n  getScope(strategy: string, scopeKey: string, user, accountId) {\n    logger.debug('getScope', { strategy, userId: user && user._id });\n    const service = this.constructor.strategyToService[strategy];\n    const newScope = service.constructor.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts\n      .find(account => account.provider === strategy && account.accountId === accountId);\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(user, strategy, tokens, scope, subservice) {\n    const service = this.constructor.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const account = user.accounts\n            .find(account => account.provider === strategy && service.isAccount(account, profile));\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && account.subservices.indexOf(subservice) === -1) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.update(user);\n    return user;\n  }\n\n  async findOrCreateFromGoogle(strategy: string, tokens: TokensObject, scope: string, subservice) {\n    if (strategy !== 'google') {\n      throw new Error('Not supported at the moment');\n    }\n\n    const service = this.constructor.strategyToService[strategy];\n\n    const profile = await service.getProfile(tokens);\n\n    const plusProfile = await fetch(\n      `https://www.googleapis.com/plus/v1/people/me?access_token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n\n    const emails = service.getEmails(profile, plusProfile);\n\n\n    let user = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId: service.getId(profile),\n      emails,\n    });\n\n    console.log(user);\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: this.usersManager.STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    const accountId = service.getId(profile);\n\n    let account = user.accounts.find(account => (\n      account.provider === strategy && account.accountId === accountId\n    ));\n\n    if (!account) {\n      account = { provider: strategy, accountId: accountId };\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach((email) => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    const keyPath: string = this.usersManager.store.keyPath;\n    await this.usersManager[user[keyPath] ? 'updateOne' : 'insertOne'](user);\n    return user;\n  }\n\n  updateAccount(user, account) {\n    return this.usersManager.updateAccount(user, account).then(() => user);\n  }\n}\n"]}