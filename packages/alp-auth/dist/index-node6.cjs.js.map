{"version":3,"file":"index-node6.cjs.js","sources":["../src/models/user/abstractUsersManager.js","../src/models/user/mongoUsersManager.js","../src/models/user/rethinkUsersManager.js","../src/utils/generators.js","../src/services/AuthenticationService.js","../src/services/user/userAccountGoogleService.js","../src/services/user/UserAccountsService.js","../src/createAuthController.js","../src/index.js"],"sourcesContent":["import type { UserType, UserBrowserType } from './types';\n\nexport default {\n  STATUSES: {\n    VALIDATED: 'validated',\n    DELETED: 'deleted',\n  },\n\n  findOneByAccountOrEmails({\n    provider,\n    accountId,\n    emails,\n  }: {\n    accountId: string | number,\n    emails: ?Array<string>,\n    provider: string,\n  }): Promise<?UserType> {\n    throw new Error('Not implemented');\n  },\n\n  findConnected(connected): Promise<?UserType> {\n    return this.store.findByKey(connected);\n  },\n\n  insertOne(user): Promise<any> {\n    return this.store.insertOne(user);\n  },\n\n  updateOne(user): Promise<any> {\n    return this.store.updateOne(user);\n  },\n\n  transformForBrowser(user): UserBrowserType {\n    return {\n      id: user.id,\n      _id: user._id,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map(account => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  },\n};\n","import abstractUsersManager from './abstractUsersManager';\nimport type { UserType, AccountType } from './types/index';\n\nconst mongoUsersManager = Object.create(abstractUsersManager);\nexport default mongoUsersManager;\n\nObject.assign(mongoUsersManager, {\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number,\n    emails?: ?Array<string>,\n    provider: string,\n  }): Promise<?UserType> {\n    let query = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    return this.store.findOne(query);\n  },\n\n  updateAccount(user: UserType, account: AccountType) {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, { [`accounts.${accountIndex}`]: account });\n  },\n});\n","import abstractUsersManager from './abstractUsersManager';\nimport type { UserType, AccountType } from './types/index';\n\nconst mongoUsersManager = Object.create(abstractUsersManager);\nexport default mongoUsersManager;\n\nObject.assign(mongoUsersManager, {\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number,\n    emails: ?Array<string>,\n    provider: string,\n  }): Promise<?UserType> {\n    const r = this.store.r;\n    let filter = r\n      .row('accounts')\n      .contains(row => r.and(row('provider').eq(provider), row('accountId').eq(accountId)));\n\n    if (emails && emails.length) {\n      filter = r.or(filter, r.row('emails').contains(row => r.expr(emails).contains(row)));\n    }\n\n    const query = this.store.query().filter(filter);\n    return this.store.findOne(query);\n  },\n\n  updateAccount(user: UserType, account: AccountType) {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, {\n      accounts: this.store.r.row('accounts').changeAt(accountIndex, account),\n    });\n  },\n});\n","import { randomBytes } from 'crypto';\nimport { promisify } from 'util';\n\nconst randomBytesPromisified = promisify(randomBytes);\n\nexport function randomBase64(size: number): Promise<string> {\n  return randomBytesPromisified(size).then(buffer => buffer.toString('base64'));\n}\n\nexport function randomHex(size: number): Promise<string> {\n  return randomBytesPromisified(size).then(buffer => buffer.toString('hex'));\n}\n","/* eslint camelcase: 'off', max-lines: 'off' */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport { randomHex } from '../utils/generators';\nimport UserAccountsService from './user/UserAccountsService';\n\nconst logger = new Logger('alp:auth:authentication');\n\ntype GenerateAuthUrlOptionsType = {\n  accessType?: string,\n  grantType?: string,\n  includeGrantedScopes?: boolean,\n  loginHint?: string,\n  prompt?: string,\n  redirectUri?: string,\n  scope?: string,\n  state?: string,\n};\n\ntype GetTokensOptionsType = {\n  code: string,\n  redirectUri: string,\n};\n\nexport default class AuthenticationService extends EventEmitter {\n  config: Object;\n  strategies: Object;\n  userAccountsService: UserAccountsService;\n\n  constructor(config, strategies: Object, userAccountsService: UserAccountsService) {\n    super();\n    this.config = config;\n    this.strategies = strategies;\n    this.userAccountsService = userAccountsService;\n  }\n\n  /**\n   * @param {string} strategy\n   * @param {Object} options\n   * @param {string} [options.redirectUri]\n   * @param {string} [options.scope]\n   * Space-delimited set of permissions that the application requests.\n   * @param {string} [options.state]\n   * Any string that might be useful to your application upon receipt of the response\n   * @param {string} [options.grantType]\n   * @param {string} [options.accessType = 'online']\n   * online or offline\n   * @param {string} [options.prompt]\n   * Space-delimited, case-sensitive list of prompts to present the user.\n   * Values: none, consent, select_account\n   * @param {string} [options.loginHint] email address or sub identifier\n   * @param {boolean} [options.includeGrantedScopes]\n   * If this is provided with the value true, and the authorization request is granted,\n   * the authorization will include any previous authorizations granted\n   * to this user/application combination for other scopes\n   * @returns {string}\n   */\n  generateAuthUrl(strategy: string, options: GenerateAuthUrlOptionsType = {}) {\n    logger.debug('generateAuthUrl', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode.authorizeURL({\n          redirect_uri: options.redirectUri,\n          scope: options.scope,\n          state: options.state,\n          grant_type: options.grantType,\n          access_type: options.accessType,\n          login_hint: options.loginHint,\n          include_granted_scopes: options.includeGrantedScopes,\n        });\n    }\n  }\n\n  getTokens(strategy: string, options: GetTokensOptionsType = {}) {\n    logger.debug('getTokens', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode\n          .getToken({\n            code: options.code,\n            redirect_uri: options.redirectUri,\n          })\n          .then(\n            result =>\n              result && {\n                accessToken: result.access_token,\n                refreshToken: result.refresh_token,\n                tokenType: result.token_type,\n                expiresIn: result.expires_in,\n                expireDate: (() => {\n                  const d = new Date();\n                  d.setTime(d.getTime() + result.expires_in * 1000);\n                  return d;\n                })(),\n                idToken: result.id_token,\n              },\n            // return strategyInstance.accessToken.create(result);\n          );\n    }\n  }\n\n  refreshToken(strategy: string, tokens) {\n    logger.debug('refreshToken', { strategy });\n    if (!tokens.refreshToken) {\n      throw new Error('Missing refresh token');\n    }\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const token = strategyInstance.oauth2.accessToken.create({\n          refresh_token: tokens.refreshToken,\n        });\n        return token.refresh().then(result => {\n          const tokens = result.token;\n          return (\n            result && {\n              accessToken: tokens.access_token,\n              tokenType: tokens.token_type,\n              expiresIn: tokens.expires_in,\n              expireDate: (() => {\n                const d = new Date();\n                d.setTime(d.getTime() + tokens.expires_in * 1000);\n                return d;\n              })(),\n              idToken: tokens.id_token,\n            }\n          );\n        });\n      }\n    }\n  }\n\n  redirectUri(ctx, strategy: string) {\n    const host = `http${this.config.get('allowHttps') ? 's' : ''}://${ctx.request.host}`;\n    return `${host}${ctx.urlGenerator('loginResponse', { strategy })}`;\n  }\n\n  /**\n   *\n   * @param {Koa.Context} ctx\n   * @param {string} strategy\n   * @param {string} [refreshToken]\n   * @param {string} [scopeKey='login']\n   * @param user\n   * @param accountId\n   * @returns {*}\n   */\n  async redirectAuthUrl(\n    ctx: Object,\n    strategy: string,\n    refreshToken: ?string,\n    scopeKey: ?string,\n    user,\n    accountId,\n  ) {\n    logger.debug('redirectAuthUrl', { strategy, scopeKey, refreshToken });\n    const state = await randomHex(8);\n    const isLoginAccess = !scopeKey || scopeKey === 'login';\n    const scope = this.userAccountsService.getScope(strategy, scopeKey || 'login', user, accountId);\n\n    ctx.cookies.set(\n      `auth_${strategy}_${state}`,\n      JSON.stringify({\n        scopeKey,\n        scope,\n        isLoginAccess,\n      }),\n      {\n        maxAge: 10 * 60 * 1000,\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      },\n    );\n    const redirectUri = this.generateAuthUrl(strategy, {\n      redirectUri: this.redirectUri(ctx, strategy),\n      scope,\n      state,\n      accessType: refreshToken ? 'offline' : 'online',\n    });\n\n    return ctx.redirect(redirectUri);\n  }\n\n  /**\n   * @param {Koa.Context} ctx\n   * @param {string} strategy\n   * @param {boolean} isConnected\n   * @returns {*}\n   */\n  async accessResponse(ctx, strategy: string, isConnected: ?boolean) {\n    if (ctx.query.error) {\n      const error = new Error(ctx.query.error);\n      error.status = 403;\n      error.expose = true;\n      throw error;\n    }\n\n    const code = ctx.query.code;\n    const state = ctx.query.state;\n    const cookieName = `auth_${strategy}_${state}`;\n    let cookie = ctx.cookies.get(cookieName);\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    if (!cookie) {\n      throw new Error('No cookie for this state');\n    }\n\n    cookie = JSON.parse(cookie);\n    if (!cookie || !cookie.scope) {\n      throw new Error('Unexpected cookie value');\n    }\n\n    if (!cookie.isLoginAccess) {\n      if (!isConnected) {\n        throw new Error('You are not connected');\n      }\n    }\n\n    const tokens = await this.getTokens(strategy, {\n      code,\n      redirectUri: this.redirectUri(ctx, strategy),\n    });\n\n    if (cookie.isLoginAccess) {\n      const user = await this.userAccountsService.findOrCreateFromGoogle(\n        strategy,\n        tokens,\n        cookie.scope,\n        cookie.scopeKey,\n      );\n      return user;\n    }\n\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    const connectedUser = ctx.state.connected;\n    await this.userAccountsService.update(\n      connectedUser,\n      strategy,\n      tokens,\n      cookie.scope,\n      cookie.scopeKey,\n    );\n    return connectedUser;\n  }\n\n  refreshAccountTokens(user, account) {\n    if (account.tokenExpireDate && account.tokenExpireDate.getTime() > Date.now()) {\n      return Promise.resolve(false);\n    }\n    return this.refreshToken(account.provider, {\n      accessToken: account.accessToken,\n      refreshToken: account.refreshToken,\n    }).then(tokens => {\n      if (!tokens) {\n        // serviceGoogle.updateFields({ accessToken:null, refreshToken:null, status: .OUTDATED });\n        return false;\n      }\n      account.accessToken = tokens.accessToken;\n      account.tokenExpireDate = tokens.expireDate;\n      return this.userAccountsService.updateAccount(user, account).then(() => true);\n    });\n  }\n}\n","/* global fetch */\nimport EventEmitter from 'events';\n\nexport default new class UserAccountGoogleService extends EventEmitter {\n  static scopeKeyToScope = {\n    login: 'openid profile email https://www.googleapis.com/auth/plus.profile.emails.read',\n  };\n\n  providerKey = 'google';\n\n  getProfile(tokens) {\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokens.accessToken}`,\n    ).then(response => response.json());\n  }\n\n  isAccount(account, profile) {\n    return account.googleId === profile.id;\n  }\n\n  getId(profile) {\n    return profile.id;\n  }\n\n  getAccountName(profile) {\n    return profile.email;\n  }\n\n  getEmails(profile, plusProfile) {\n    const emails = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    if (plusProfile.emails) {\n      plusProfile.emails.forEach(email => {\n        if (emails.indexOf(email.value) === -1) {\n          emails.push(email.value);\n        }\n      });\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile) {\n    return profile.name;\n  }\n\n  getFullName(profile) {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope) {\n    return this.getScope(newScope);\n  }\n\n  getScope(oldScope, newScope) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope.concat(newScope.split(' ')).filter((item, i, ar) => ar.indexOf(item) === i);\n  }\n}();\n","/* global fetch */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport userAccountGoogleService from './userAccountGoogleService';\n\ntype TokensObject = {\n  accessToken: string,\n  expireDate: Date,\n  idToken: string,\n  refreshToken?: string,\n  tokenType: string,\n};\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport default class UserAccountsService extends EventEmitter {\n  static strategyToService = {\n    google: userAccountGoogleService,\n  };\n\n  constructor(usersManager) {\n    super();\n    this.usersManager = usersManager;\n  }\n\n  getScope(strategy: string, scopeKey: string, user, accountId) {\n    logger.debug('getScope', { strategy, userId: user && user._id });\n    const service = this.constructor.strategyToService[strategy];\n    const newScope = service.constructor.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      account => account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(user, strategy, tokens, scope, subservice) {\n    const service = this.constructor.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const account = user.accounts.find(\n      account => account.provider === strategy && service.isAccount(account, profile),\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && account.subservices.indexOf(subservice) === -1) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.update(user);\n    return user;\n  }\n\n  async findOrCreateFromGoogle(strategy: string, tokens: TokensObject, scope: string, subservice) {\n    if (strategy !== 'google') {\n      throw new Error('Not supported at the moment');\n    }\n\n    const service = this.constructor.strategyToService[strategy];\n\n    const profile = await service.getProfile(tokens);\n\n    const plusProfile = await fetch(\n      `https://www.googleapis.com/plus/v1/people/me?access_token=${tokens.accessToken}`,\n    ).then(response => response.json());\n\n    const emails = service.getEmails(profile, plusProfile);\n\n    let user = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId: service.getId(profile),\n      emails,\n    });\n\n    logger.info(!user ? 'create user' : 'existing user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: this.usersManager.STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    const accountId = service.getId(profile);\n\n    let account = user.accounts.find(\n      account => account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach(email => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = Array.from(\n      user.emails.reduce((domains, email) => domains.add(email.split('@', 2)[1]), new Set()),\n    );\n\n    const keyPath: string = this.usersManager.store.keyPath;\n    await this.usersManager[user[keyPath] ? 'updateOne' : 'insertOne'](user);\n    return user;\n  }\n\n  updateAccount(user, account) {\n    return this.usersManager.updateAccount(user, account).then(() => user);\n  }\n}\n","import AuthenticationService from './services/AuthenticationService';\n\nexport default function createAuthController({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n}: {\n  authenticationService: AuthenticationService,\n  homeRouterKey?: ?string,\n  usersManager: Object,\n}) {\n  return {\n    async login(ctx) {\n      const strategy = ctx.namedParam('strategy');\n      if (!strategy) throw new Error('Strategy missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy);\n    },\n\n    async loginResponse(ctx) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(ctx, strategy);\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx) {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n","import { promisify } from 'util';\nimport { sign, verify } from 'jsonwebtoken';\nimport Logger from 'nightingale-logger/src';\nimport abstractUsersManager from './models/user/abstractUsersManager';\nimport mongoUsersManager from './models/user/mongoUsersManager';\nimport rethinkUsersManager from './models/user/rethinkUsersManager';\nimport AuthenticationService from './services/AuthenticationService';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport createAuthController from './createAuthController';\n\nexport { abstractUsersManager, mongoUsersManager, rethinkUsersManager };\nexport * from './models/user/types';\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nconst signPromisified = promisify(sign);\nconst verifyPromisified = promisify(verify);\n\nexport default function init({\n  usersManager,\n  strategies,\n  homeRouterKey,\n}: {\n  homeRouterKey?: ?string,\n  strategies: Object,\n  usersManager: Object,\n}) {\n  return app => {\n    const userAccountsService = new UserAccountsService(usersManager);\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n    });\n\n    app.reduxReducers.user = (state = null) => state;\n    app.reduxReducers.connected = (state = null) => state;\n\n    app.context.setConnected = async function(connected: number | string, user: Object) {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = signPromisified(\n        { connected, time: Date.now() },\n        this.config.get('authentication').get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: this.request.headers['user-agent'],\n          expiresIn: '30 days',\n        },\n      );\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function() {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    const decodeJwt = async (token, userAgent) => {\n      const result = await verifyPromisified(\n        token,\n        app.config.get('authentication').get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: userAgent,\n        },\n      );\n      return result && result.connected;\n    };\n\n    if (app.websocket) {\n      logger.debug('app has websocket');\n      // eslint-disable-next-line global-require\n      const Cookies = require('cookies');\n\n      const users = new Map();\n      app.websocket.users = users;\n\n      app.websocket.use(async (socket, next) => {\n        const handshakeData = socket.request;\n        const cookies = new Cookies(handshakeData, null, { keys: app.keys });\n        const token = cookies.get(COOKIE_NAME);\n        logger.debug('middleware websocket', { token });\n\n        if (!token) return next();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, handshakeData.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentication', { err });\n          return next();\n        }\n        logger.debug('middleware websocket', { connected });\n\n        if (!connected) return next();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) return next();\n\n        socket.user = user;\n        users.set(socket.client.id, user);\n\n        socket.on('disconnected', () => users.delete(socket.client.id));\n\n        await next();\n      });\n    }\n\n    return {\n      routes: {\n        login: [\n          '/login/:strategy',\n          segment => {\n            segment.add('/response', controller.loginResponse, 'loginResponse');\n            segment.defaultRoute(controller.login, 'login');\n          },\n        ],\n        logout: ['/logout', controller.logout],\n      },\n\n      middleware: async (ctx, next) => {\n        const token = ctx.cookies.get(COOKIE_NAME);\n        logger.debug('middleware', { token });\n\n        const setState = (connected, user) => {\n          ctx.state.connected = connected;\n          ctx.state.user = user;\n          if (ctx.reduxInitialContext) {\n            ctx.reduxInitialContext.connected = connected;\n            ctx.reduxInitialContext.user = user && usersManager.transformForBrowser(user);\n          }\n        };\n\n        const notConnected = () => {\n          setState(null, null);\n          return next();\n        };\n\n        if (!token) return notConnected();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, ctx.request.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentification', { err });\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n        logger.debug('middleware', { connected });\n\n        if (!connected) return notConnected();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) {\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n\n        setState(connected, user);\n        return next();\n      },\n    };\n  };\n}\n"],"names":["Error","connected","store","findByKey","user","insertOne","updateOne","id","_id","displayName","fullName","status","emails","emailDomains","accounts","map","account","provider","accountId","name","profile","mongoUsersManager","Object","create","abstractUsersManager","assign","query","length","$in","findOne","accountIndex","indexOf","partialUpdateOne","r","filter","row","contains","and","eq","or","expr","changeAt","randomBytesPromisified","promisify","randomBytes","randomHex","size","then","buffer","toString","logger","Logger","AuthenticationService","EventEmitter","config","strategies","userAccountsService","strategy","options","debug","strategyInstance","type","oauth2","authorizationCode","authorizeURL","redirectUri","scope","state","grantType","accessType","loginHint","includeGrantedScopes","getToken","code","result","access_token","refresh_token","token_type","expires_in","d","Date","setTime","getTime","id_token","tokens","refreshToken","token","accessToken","refresh","ctx","host","get","request","urlGenerator","scopeKey","getScope","cookies","set","JSON","stringify","generateAuthUrl","redirect","isConnected","error","expose","cookieName","cookie","expires","parse","isLoginAccess","getTokens","findOrCreateFromGoogle","connectedUser","update","tokenExpireDate","now","Promise","resolve","expireDate","updateAccount","providerKey","fetch","response","json","googleId","email","plusProfile","push","forEach","value","given_name","family_name","newScope","oldScope","split","concat","item","i","ar","scopeKeyToScope","UserAccountsService","usersManager","userId","service","constructor","strategyToService","find","join","subservice","getProfile","isAccount","subservices","getEmails","findOneByAccountOrEmails","getId","info","getDisplayName","getFullName","STATUSES","VALIDATED","getAccountName","includes","userEmails","Array","from","reduce","domains","add","Set","keyPath","userAccountGoogleService","createAuthController","namedParam","authenticationService","redirectAuthUrl","homeRouterKey","assert","accessResponse","setConnected","logout","COOKIE_NAME","signPromisified","sign","verifyPromisified","verify","init","app","controller","reduxReducers","context","time","headers","decodeJwt","userAgent","websocket","Cookies","require","users","Map","use","socket","next","handshakeData","keys","err","findConnected","client","on","delete","segment","loginResponse","defaultRoute","login","setState","reduxInitialContext","transformForBrowser","notConnected"],"mappings":"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"}