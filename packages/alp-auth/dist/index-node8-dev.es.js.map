{"version":3,"file":"index-node8-dev.es.js","sources":["../src/models/user/types/index.js","../src/models/user/abstractUsersManager.js","../src/models/user/mongoUsersManager.js","../src/models/user/rethinkUsersManager.js","../src/utils/generators.js","../src/services/user/userAccountGoogleService.js","../src/services/user/UserAccountsService.js","../src/services/AuthenticationService.js","../src/createAuthController.js","../src/index.js"],"sourcesContent":["export type UserNameType = {\n  familyName: string,\n  givenName: string,\n};\n\nexport type AccountType = {\n  accessToken: string,\n  accountId: string,\n  name: string,\n  profile?: Object,\n  provider: string,\n  refreshToken?: string,\n  scope: Array<string>,\n  status: string,\n  tokenExpireDate: Date,\n};\n\nexport type UserType = {\n  _id?: string,\n  accounts: Array<AccountType>,\n  displayName: string,\n  emailDomains: Array<string>,\n  emails: Array<string>,\n  fullName: UserNameType,\n  id?: string,\n  status: string,\n};\n\nexport type AccountBrowserType = {\n  accountId: string,\n  name: string,\n  provider: string,\n  status: string,\n};\n\nexport type UserBrowserType = {\n  _id?: string,\n  accounts: Array<AccountBrowserType>,\n  displayName: string,\n  emailDomains: Array<string>,\n  emails: Array<string>,\n  fullName: UserNameType,\n  id?: string,\n  status: string,\n};\n","import type { UserType, UserBrowserType } from './types';\n\nexport default {\n  STATUSES: {\n    VALIDATED: 'validated',\n    DELETED: 'deleted',\n  },\n\n  findOneByAccountOrEmails({\n    provider,\n    accountId,\n    emails,\n  }: {\n    accountId: string | number,\n    emails: ?Array<string>,\n    provider: string,\n  }): Promise<?UserType> {\n    throw new Error('Not implemented');\n  },\n\n  findConnected(connected): Promise<?UserType> {\n    return this.store.findByKey(connected);\n  },\n\n  insertOne(user): Promise<any> {\n    return this.store.insertOne(user);\n  },\n\n  updateOne(user): Promise<any> {\n    return this.store.updateOne(user);\n  },\n\n  transformForBrowser(user): UserBrowserType {\n    return {\n      id: user.id,\n      _id: user._id,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map(account => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  },\n};\n","import abstractUsersManager from './abstractUsersManager';\nimport type { UserType, AccountType } from './types/index';\n\nconst mongoUsersManager = Object.create(abstractUsersManager);\nexport default mongoUsersManager;\n\nObject.assign(mongoUsersManager, {\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number,\n    emails?: ?Array<string>,\n    provider: string,\n  }): Promise<?UserType> {\n    let query = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    return this.store.findOne(query);\n  },\n\n  updateAccount(user: UserType, account: AccountType) {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, { [`accounts.${accountIndex}`]: account });\n  },\n});\n","import abstractUsersManager from './abstractUsersManager';\nimport type { UserType, AccountType } from './types/index';\n\nconst mongoUsersManager = Object.create(abstractUsersManager);\nexport default mongoUsersManager;\n\nObject.assign(mongoUsersManager, {\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number,\n    emails: ?Array<string>,\n    provider: string,\n  }): Promise<?UserType> {\n    const r = this.store.r;\n    let filter = r\n      .row('accounts')\n      .contains(row => r.and(row('provider').eq(provider), row('accountId').eq(accountId)));\n\n    if (emails && emails.length) {\n      filter = r.or(filter, r.row('emails').contains(row => r.expr(emails).contains(row)));\n    }\n\n    const query = this.store.query().filter(filter);\n    return this.store.findOne(query);\n  },\n\n  updateAccount(user: UserType, account: AccountType) {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, {\n      accounts: this.store.r.row('accounts').changeAt(accountIndex, account),\n    });\n  },\n});\n","import { randomBytes } from 'crypto';\nimport promiseCallback from 'promise-callback-factory';\n\nexport function randomBase64(size: number): Promise<string> {\n  return promiseCallback(done => randomBytes(size, done)).then(buffer => buffer.toString('base64'));\n}\n\nexport function randomHex(size: number): Promise<string> {\n  return promiseCallback(done => randomBytes(size, done)).then(buffer => buffer.toString('hex'));\n}\n","/* global fetch */\nimport EventEmitter from 'events';\n\nexport default new class UserAccountGoogleService extends EventEmitter {\n  static scopeKeyToScope = {\n    login: 'openid profile email https://www.googleapis.com/auth/plus.profile.emails.read',\n  };\n\n  providerKey = 'google';\n\n  getProfile(tokens) {\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokens.accessToken}`,\n    ).then(response => response.json());\n  }\n\n  isAccount(account, profile) {\n    return account.googleId === profile.id;\n  }\n\n  getId(profile) {\n    return profile.id;\n  }\n\n  getAccountName(profile) {\n    return profile.email;\n  }\n\n  getEmails(profile, plusProfile) {\n    const emails = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    if (plusProfile.emails) {\n      plusProfile.emails.forEach(email => {\n        if (emails.indexOf(email.value) === -1) {\n          emails.push(email.value);\n        }\n      });\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile) {\n    return profile.name;\n  }\n\n  getFullName(profile) {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope) {\n    return this.getScope(newScope);\n  }\n\n  getScope(oldScope, newScope) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope.concat(newScope.split(' ')).filter((item, i, ar) => ar.indexOf(item) === i);\n  }\n}();\n","/* global fetch */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport userAccountGoogleService from './userAccountGoogleService';\n\ntype TokensObject = {\n  accessToken: string,\n  expireDate: Date,\n  idToken: string,\n  refreshToken?: string,\n  tokenType: string,\n};\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport default class UserAccountsService extends EventEmitter {\n  static strategyToService = {\n    google: userAccountGoogleService,\n  };\n\n  constructor(usersManager) {\n    super();\n    this.usersManager = usersManager;\n  }\n\n  getScope(strategy: string, scopeKey: string, user, accountId) {\n    logger.debug('getScope', { strategy, userId: user && user._id });\n    const service = this.constructor.strategyToService[strategy];\n    const newScope = service.constructor.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      account => account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(user, strategy, tokens, scope, subservice) {\n    const service = this.constructor.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const account = user.accounts.find(\n      account => account.provider === strategy && service.isAccount(account, profile),\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && account.subservices.indexOf(subservice) === -1) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.update(user);\n    return user;\n  }\n\n  async findOrCreateFromGoogle(strategy: string, tokens: TokensObject, scope: string, subservice) {\n    if (strategy !== 'google') {\n      throw new Error('Not supported at the moment');\n    }\n\n    const service = this.constructor.strategyToService[strategy];\n\n    const profile = await service.getProfile(tokens);\n\n    const plusProfile = await fetch(\n      `https://www.googleapis.com/plus/v1/people/me?access_token=${tokens.accessToken}`,\n    ).then(response => response.json());\n\n    const emails = service.getEmails(profile, plusProfile);\n\n    let user = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId: service.getId(profile),\n      emails,\n    });\n\n    logger.info(!user ? 'create user' : 'existing user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: this.usersManager.STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    const accountId = service.getId(profile);\n\n    let account = user.accounts.find(\n      account => account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach(email => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = Array.from(\n      user.emails.reduce((domains, email) => domains.add(email.split('@', 2)[1]), new Set()),\n    );\n\n    const keyPath: string = this.usersManager.store.keyPath;\n    await this.usersManager[user[keyPath] ? 'updateOne' : 'insertOne'](user);\n    return user;\n  }\n\n  updateAccount(user, account) {\n    return this.usersManager.updateAccount(user, account).then(() => user);\n  }\n}\n","/* eslint camelcase: 'off', max-lines: 'off' */\nimport EventEmitter from 'events';\nimport promiseCallback from 'promise-callback-factory';\nimport Logger from 'nightingale-logger';\nimport { randomHex } from '../utils/generators';\nimport UserAccountsService from './user/UserAccountsService';\n\nconst logger = new Logger('alp:auth:authentication');\n\ntype GenerateAuthUrlOptionsType = {\n  accessType?: string,\n  grantType?: string,\n  includeGrantedScopes?: boolean,\n  loginHint?: string,\n  prompt?: string,\n  redirectUri?: string,\n  scope?: string,\n  state?: string,\n};\n\ntype GetTokensOptionsType = {\n  code: string,\n  redirectUri: string,\n};\n\nexport default class AuthenticationService extends EventEmitter {\n  config: Object;\n  strategies: Object;\n  userAccountsService: UserAccountsService;\n\n  constructor(config, strategies: Object, userAccountsService: UserAccountsService) {\n    super();\n    this.config = config;\n    this.strategies = strategies;\n    this.userAccountsService = userAccountsService;\n  }\n\n  /**\n   * @param {string} strategy\n   * @param {Object} options\n   * @param {string} [options.redirectUri]\n   * @param {string} [options.scope]\n   * Space-delimited set of permissions that the application requests.\n   * @param {string} [options.state]\n   * Any string that might be useful to your application upon receipt of the response\n   * @param {string} [options.grantType]\n   * @param {string} [options.accessType = 'online']\n   * online or offline\n   * @param {string} [options.prompt]\n   * Space-delimited, case-sensitive list of prompts to present the user.\n   * Values: none, consent, select_account\n   * @param {string} [options.loginHint] email address or sub identifier\n   * @param {boolean} [options.includeGrantedScopes]\n   * If this is provided with the value true, and the authorization request is granted,\n   * the authorization will include any previous authorizations granted\n   * to this user/application combination for other scopes\n   * @returns {string}\n   */\n  generateAuthUrl(strategy: string, options: GenerateAuthUrlOptionsType = {}) {\n    logger.debug('generateAuthUrl', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode.authorizeURL({\n          redirect_uri: options.redirectUri,\n          scope: options.scope,\n          state: options.state,\n          grant_type: options.grantType,\n          access_type: options.accessType,\n          login_hint: options.loginHint,\n          include_granted_scopes: options.includeGrantedScopes,\n        });\n    }\n  }\n\n  getTokens(strategy: string, options: GetTokensOptionsType = {}) {\n    logger.debug('getTokens', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return promiseCallback(done => {\n          strategyInstance.oauth2.authorizationCode.getToken(\n            {\n              code: options.code,\n              redirect_uri: options.redirectUri,\n            },\n            done,\n          );\n        }).then(\n          result =>\n            result && {\n              accessToken: result.access_token,\n              refreshToken: result.refresh_token,\n              tokenType: result.token_type,\n              expiresIn: result.expires_in,\n              expireDate: (() => {\n                const d = new Date();\n                d.setTime(d.getTime() + result.expires_in * 1000);\n                return d;\n              })(),\n              idToken: result.id_token,\n            },\n          // return strategyInstance.accessToken.create(result);\n        );\n    }\n  }\n\n  refreshToken(strategy: string, tokens) {\n    logger.debug('refreshToken', { strategy });\n    if (!tokens.refreshToken) {\n      throw new Error('Missing refresh token');\n    }\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const token = strategyInstance.oauth2.accessToken.create({\n          refresh_token: tokens.refreshToken,\n        });\n        return promiseCallback(done => token.refresh(done)).then(result => {\n          const tokens = result.token;\n          return (\n            result && {\n              accessToken: tokens.access_token,\n              tokenType: tokens.token_type,\n              expiresIn: tokens.expires_in,\n              expireDate: (() => {\n                const d = new Date();\n                d.setTime(d.getTime() + tokens.expires_in * 1000);\n                return d;\n              })(),\n              idToken: tokens.id_token,\n            }\n          );\n        });\n      }\n    }\n  }\n\n  redirectUri(ctx, strategy: string) {\n    const host = `http${this.config.get('allowHttps') ? 's' : ''}://${ctx.request.host}`;\n    return `${host}${ctx.urlGenerator('loginResponse', { strategy })}`;\n  }\n\n  /**\n   *\n   * @param {Koa.Context} ctx\n   * @param {string} strategy\n   * @param {string} [refreshToken]\n   * @param {string} [scopeKey='login']\n   * @param user\n   * @param accountId\n   * @returns {*}\n   */\n  async redirectAuthUrl(\n    ctx: Object,\n    strategy: string,\n    refreshToken: ?string,\n    scopeKey: ?string,\n    user,\n    accountId,\n  ) {\n    logger.debug('redirectAuthUrl', { strategy, scopeKey, refreshToken });\n    const state = await randomHex(8);\n    const isLoginAccess = !scopeKey || scopeKey === 'login';\n    const scope = this.userAccountsService.getScope(strategy, scopeKey || 'login', user, accountId);\n\n    ctx.cookies.set(\n      `auth_${strategy}_${state}`,\n      JSON.stringify({\n        scopeKey,\n        scope,\n        isLoginAccess,\n      }),\n      {\n        maxAge: 10 * 60 * 1000,\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      },\n    );\n    const redirectUri = this.generateAuthUrl(strategy, {\n      redirectUri: this.redirectUri(ctx, strategy),\n      scope,\n      state,\n      accessType: refreshToken ? 'offline' : 'online',\n    });\n\n    return ctx.redirect(redirectUri);\n  }\n\n  /**\n   * @param {Koa.Context} ctx\n   * @param {string} strategy\n   * @param {boolean} isConnected\n   * @returns {*}\n   */\n  async accessResponse(ctx, strategy: string, isConnected: ?boolean) {\n    if (ctx.query.error) {\n      const error = new Error(ctx.query.error);\n      error.status = 403;\n      error.expose = true;\n      throw error;\n    }\n\n    const code = ctx.query.code;\n    const state = ctx.query.state;\n    const cookieName = `auth_${strategy}_${state}`;\n    let cookie = ctx.cookies.get(cookieName);\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    if (!cookie) {\n      throw new Error('No cookie for this state');\n    }\n\n    cookie = JSON.parse(cookie);\n    if (!cookie || !cookie.scope) {\n      throw new Error('Unexpected cookie value');\n    }\n\n    if (!cookie.isLoginAccess) {\n      if (!isConnected) {\n        throw new Error('You are not connected');\n      }\n    }\n\n    const tokens = await this.getTokens(strategy, {\n      code,\n      redirectUri: this.redirectUri(ctx, strategy),\n    });\n\n    if (cookie.isLoginAccess) {\n      const user = await this.userAccountsService.findOrCreateFromGoogle(\n        strategy,\n        tokens,\n        cookie.scope,\n        cookie.scopeKey,\n      );\n      return user;\n    }\n\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    const connectedUser = ctx.state.connected;\n    await this.userAccountsService.update(\n      connectedUser,\n      strategy,\n      tokens,\n      cookie.scope,\n      cookie.scopeKey,\n    );\n    return connectedUser;\n  }\n\n  refreshAccountTokens(user, account) {\n    if (account.tokenExpireDate && account.tokenExpireDate.getTime() > Date.now()) {\n      return Promise.resolve(false);\n    }\n    return this.refreshToken(account.provider, {\n      accessToken: account.accessToken,\n      refreshToken: account.refreshToken,\n    }).then(tokens => {\n      if (!tokens) {\n        // serviceGoogle.updateFields({ accessToken:null, refreshToken:null, status: .OUTDATED });\n        return false;\n      }\n      account.accessToken = tokens.accessToken;\n      account.tokenExpireDate = tokens.expireDate;\n      return this.userAccountsService.updateAccount(user, account).then(() => true);\n    });\n  }\n}\n","import AuthenticationService from './services/AuthenticationService';\n\nexport default function createAuthController({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n}: {\n  authenticationService: AuthenticationService,\n  homeRouterKey?: ?string,\n  usersManager: Object,\n}) {\n  return {\n    async login(ctx) {\n      const strategy = ctx.namedParam('strategy');\n      if (!strategy) throw new Error('Strategy missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy);\n    },\n\n    async loginResponse(ctx) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(ctx, strategy);\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx) {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n","import { sign, verify } from 'jsonwebtoken';\nimport promiseCallback from 'promise-callback-factory';\nimport Logger from 'nightingale-logger/src';\nimport abstractUsersManager from './models/user/abstractUsersManager';\nimport mongoUsersManager from './models/user/mongoUsersManager';\nimport rethinkUsersManager from './models/user/rethinkUsersManager';\nimport AuthenticationService from './services/AuthenticationService';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport createAuthController from './createAuthController';\n\nexport { abstractUsersManager, mongoUsersManager, rethinkUsersManager };\nexport * from './models/user/types';\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nexport default function init({\n  usersManager,\n  strategies,\n  homeRouterKey,\n}: {\n  homeRouterKey?: ?string,\n  strategies: Object,\n  usersManager: Object,\n}) {\n  return app => {\n    const userAccountsService = new UserAccountsService(usersManager);\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n    });\n\n    app.reduxReducers.user = (state = null) => state;\n    app.reduxReducers.connected = (state = null) => state;\n\n    app.context.setConnected = async function(connected: number | string, user: Object) {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await promiseCallback(done =>\n        sign(\n          { connected, time: Date.now() },\n          this.config.get('authentication').get('secretKey'),\n          {\n            algorithm: 'HS512',\n            audience: this.request.headers['user-agent'],\n            expiresIn: '30 days',\n          },\n          done,\n        ),\n      );\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function() {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    const decodeJwt = (token, userAgent) => {\n      const result = verify(token, app.config.get('authentication').get('secretKey'), {\n        algorithm: 'HS512',\n        audience: userAgent,\n      });\n      return result && result.connected;\n    };\n\n    if (app.websocket) {\n      logger.debug('app has websocket');\n      // eslint-disable-next-line global-require\n      const Cookies = require('cookies');\n\n      const users = new Map();\n      app.websocket.users = users;\n\n      app.websocket.use(async (socket, next) => {\n        const handshakeData = socket.request;\n        const cookies = new Cookies(handshakeData, null, { keys: app.keys });\n        const token = cookies.get(COOKIE_NAME);\n        logger.debug('middleware websocket', { token });\n\n        if (!token) return next();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, handshakeData.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentication', { err });\n          return next();\n        }\n        logger.debug('middleware websocket', { connected });\n\n        if (!connected) return next();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) return next();\n\n        socket.user = user;\n        users.set(socket.client.id, user);\n\n        socket.on('disconnected', () => users.delete(socket.client.id));\n\n        await next();\n      });\n    }\n\n    return {\n      routes: {\n        login: [\n          '/login/:strategy',\n          segment => {\n            segment.add('/response', controller.loginResponse, 'loginResponse');\n            segment.defaultRoute(controller.login, 'login');\n          },\n        ],\n        logout: ['/logout', controller.logout],\n      },\n\n      middleware: async (ctx, next) => {\n        const token = ctx.cookies.get(COOKIE_NAME);\n        logger.debug('middleware', { token });\n\n        const setState = (connected, user) => {\n          ctx.state.connected = connected;\n          ctx.state.user = user;\n          if (ctx.reduxInitialContext) {\n            ctx.reduxInitialContext.connected = connected;\n            ctx.reduxInitialContext.user = user && usersManager.transformForBrowser(user);\n          }\n        };\n\n        const notConnected = () => {\n          setState(null, null);\n          return next();\n        };\n\n        if (!token) return notConnected();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, ctx.request.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentification', { err });\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n        logger.debug('middleware', { connected });\n\n        if (!connected) return notConnected();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) {\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n\n        setState(connected, user);\n        return next();\n      },\n    };\n  };\n}\n"],"names":["Error","connected","store","findByKey","user","insertOne","updateOne","id","_id","displayName","fullName","status","emails","emailDomains","accounts","map","account","provider","accountId","name","profile","mongoUsersManager","Object","create","abstractUsersManager","assign","query","length","$in","findOne","accountIndex","indexOf","partialUpdateOne","r","filter","row","contains","and","eq","or","expr","changeAt","randomHex","size","promiseCallback","done","randomBytes","then","buffer","toString","EventEmitter","providerKey","tokens","fetch","accessToken","response","json","googleId","email","plusProfile","push","forEach","value","given_name","family_name","newScope","getScope","oldScope","split","concat","item","i","ar","scopeKeyToScope","logger","Logger","UserAccountsService","usersManager","strategy","scopeKey","debug","userId","service","constructor","strategyToService","find","scope","join","update","subservice","getProfile","isAccount","refreshToken","expireDate","tokenExpireDate","subservices","findOrCreateFromGoogle","getEmails","findOneByAccountOrEmails","getId","info","getDisplayName","getFullName","STATUSES","VALIDATED","getAccountName","includes","userEmails","Array","from","reduce","domains","add","Set","keyPath","updateAccount","userAccountGoogleService","AuthenticationService","config","strategies","userAccountsService","options","strategyInstance","type","oauth2","authorizationCode","authorizeURL","redirectUri","state","grantType","accessType","loginHint","includeGrantedScopes","getToken","code","result","access_token","refresh_token","token_type","expires_in","d","Date","setTime","getTime","id_token","token","refresh","ctx","host","get","request","urlGenerator","redirectAuthUrl","cookies","set","JSON","stringify","generateAuthUrl","redirect","accessResponse","isConnected","error","expose","cookieName","cookie","expires","parse","isLoginAccess","getTokens","connectedUser","now","Promise","resolve","createAuthController","login","namedParam","authenticationService","loginResponse","homeRouterKey","assert","setConnected","logout","COOKIE_NAME","init","app","controller","reduxReducers","context","sign","time","headers","decodeJwt","userAgent","verify","websocket","Cookies","require","users","Map","use","socket","next","handshakeData","keys","err","findConnected","client","on","delete","segment","defaultRoute","setState","reduxInitialContext","transformForBrowser","notConnected"],"mappings":"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"}