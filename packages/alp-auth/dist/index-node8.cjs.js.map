{"version":3,"file":"index-node8.cjs.js","sources":["../src/models/user/abstractUsersManager.js","../src/models/user/mongoUsersManager.js","../src/models/user/rethinkUsersManager.js","../src/utils/generators.js","../src/services/AuthenticationService.js","../src/services/user/userAccountGoogleService.js","../src/services/user/UserAccountsService.js","../src/createAuthController.js","../src/index.js"],"sourcesContent":["import type { UserType, UserBrowserType } from './types';\n\nexport default {\n  STATUSES: {\n    VALIDATED: 'validated',\n    DELETED: 'deleted',\n  },\n\n  findOneByAccountOrEmails({\n    provider,\n    accountId,\n    emails,\n  }: {\n    accountId: string | number,\n    emails: ?Array<string>,\n    provider: string,\n  }): Promise<?UserType> {\n    throw new Error('Not implemented');\n  },\n\n  findConnected(connected): Promise<?UserType> {\n    return this.store.findByKey(connected);\n  },\n\n  insertOne(user): Promise<any> {\n    return this.store.insertOne(user);\n  },\n\n  updateOne(user): Promise<any> {\n    return this.store.updateOne(user);\n  },\n\n  transformForBrowser(user): UserBrowserType {\n    return {\n      id: user.id,\n      _id: user._id,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map(account => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  },\n};\n","import abstractUsersManager from './abstractUsersManager';\nimport type { UserType, AccountType } from './types/index';\n\nconst mongoUsersManager = Object.create(abstractUsersManager);\nexport default mongoUsersManager;\n\nObject.assign(mongoUsersManager, {\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number,\n    emails?: ?Array<string>,\n    provider: string,\n  }): Promise<?UserType> {\n    let query = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    return this.store.findOne(query);\n  },\n\n  updateAccount(user: UserType, account: AccountType) {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, { [`accounts.${accountIndex}`]: account });\n  },\n});\n","import abstractUsersManager from './abstractUsersManager';\nimport type { UserType, AccountType } from './types/index';\n\nconst mongoUsersManager = Object.create(abstractUsersManager);\nexport default mongoUsersManager;\n\nObject.assign(mongoUsersManager, {\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number,\n    emails: ?Array<string>,\n    provider: string,\n  }): Promise<?UserType> {\n    const r = this.store.r;\n    let filter = r\n      .row('accounts')\n      .contains(row => r.and(row('provider').eq(provider), row('accountId').eq(accountId)));\n\n    if (emails && emails.length) {\n      filter = r.or(filter, r.row('emails').contains(row => r.expr(emails).contains(row)));\n    }\n\n    const query = this.store.query().filter(filter);\n    return this.store.findOne(query);\n  },\n\n  updateAccount(user: UserType, account: AccountType) {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, {\n      accounts: this.store.r.row('accounts').changeAt(accountIndex, account),\n    });\n  },\n});\n","import { randomBytes } from 'crypto';\nimport { promisify } from 'util';\n\nconst randomBytesPromisified = promisify(randomBytes);\n\nexport function randomBase64(size: number): Promise<string> {\n  return randomBytesPromisified(size).then(buffer => buffer.toString('base64'));\n}\n\nexport function randomHex(size: number): Promise<string> {\n  return randomBytesPromisified(size).then(buffer => buffer.toString('hex'));\n}\n","/* eslint camelcase: 'off', max-lines: 'off' */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport { randomHex } from '../utils/generators';\nimport UserAccountsService from './user/UserAccountsService';\n\nconst logger = new Logger('alp:auth:authentication');\n\ntype GenerateAuthUrlOptionsType = {\n  accessType?: string,\n  grantType?: string,\n  includeGrantedScopes?: boolean,\n  loginHint?: string,\n  prompt?: string,\n  redirectUri?: string,\n  scope?: string,\n  state?: string,\n};\n\ntype GetTokensOptionsType = {\n  code: string,\n  redirectUri: string,\n};\n\nexport default class AuthenticationService extends EventEmitter {\n  config: Object;\n  strategies: Object;\n  userAccountsService: UserAccountsService;\n\n  constructor(config, strategies: Object, userAccountsService: UserAccountsService) {\n    super();\n    this.config = config;\n    this.strategies = strategies;\n    this.userAccountsService = userAccountsService;\n  }\n\n  /**\n   * @param {string} strategy\n   * @param {Object} options\n   * @param {string} [options.redirectUri]\n   * @param {string} [options.scope]\n   * Space-delimited set of permissions that the application requests.\n   * @param {string} [options.state]\n   * Any string that might be useful to your application upon receipt of the response\n   * @param {string} [options.grantType]\n   * @param {string} [options.accessType = 'online']\n   * online or offline\n   * @param {string} [options.prompt]\n   * Space-delimited, case-sensitive list of prompts to present the user.\n   * Values: none, consent, select_account\n   * @param {string} [options.loginHint] email address or sub identifier\n   * @param {boolean} [options.includeGrantedScopes]\n   * If this is provided with the value true, and the authorization request is granted,\n   * the authorization will include any previous authorizations granted\n   * to this user/application combination for other scopes\n   * @returns {string}\n   */\n  generateAuthUrl(strategy: string, options: GenerateAuthUrlOptionsType = {}) {\n    logger.debug('generateAuthUrl', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode.authorizeURL({\n          redirect_uri: options.redirectUri,\n          scope: options.scope,\n          state: options.state,\n          grant_type: options.grantType,\n          access_type: options.accessType,\n          login_hint: options.loginHint,\n          include_granted_scopes: options.includeGrantedScopes,\n        });\n    }\n  }\n\n  getTokens(strategy: string, options: GetTokensOptionsType = {}) {\n    logger.debug('getTokens', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode\n          .getToken({\n            code: options.code,\n            redirect_uri: options.redirectUri,\n          })\n          .then(\n            result =>\n              result && {\n                accessToken: result.access_token,\n                refreshToken: result.refresh_token,\n                tokenType: result.token_type,\n                expiresIn: result.expires_in,\n                expireDate: (() => {\n                  const d = new Date();\n                  d.setTime(d.getTime() + result.expires_in * 1000);\n                  return d;\n                })(),\n                idToken: result.id_token,\n              },\n            // return strategyInstance.accessToken.create(result);\n          );\n    }\n  }\n\n  refreshToken(strategy: string, tokens) {\n    logger.debug('refreshToken', { strategy });\n    if (!tokens.refreshToken) {\n      throw new Error('Missing refresh token');\n    }\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const token = strategyInstance.oauth2.accessToken.create({\n          refresh_token: tokens.refreshToken,\n        });\n        return token.refresh().then(result => {\n          const tokens = result.token;\n          return (\n            result && {\n              accessToken: tokens.access_token,\n              tokenType: tokens.token_type,\n              expiresIn: tokens.expires_in,\n              expireDate: (() => {\n                const d = new Date();\n                d.setTime(d.getTime() + tokens.expires_in * 1000);\n                return d;\n              })(),\n              idToken: tokens.id_token,\n            }\n          );\n        });\n      }\n    }\n  }\n\n  redirectUri(ctx, strategy: string) {\n    const host = `http${this.config.get('allowHttps') ? 's' : ''}://${ctx.request.host}`;\n    return `${host}${ctx.urlGenerator('loginResponse', { strategy })}`;\n  }\n\n  /**\n   *\n   * @param {Koa.Context} ctx\n   * @param {string} strategy\n   * @param {string} [refreshToken]\n   * @param {string} [scopeKey='login']\n   * @param user\n   * @param accountId\n   * @returns {*}\n   */\n  async redirectAuthUrl(\n    ctx: Object,\n    strategy: string,\n    refreshToken: ?string,\n    scopeKey: ?string,\n    user,\n    accountId,\n  ) {\n    logger.debug('redirectAuthUrl', { strategy, scopeKey, refreshToken });\n    const state = await randomHex(8);\n    const isLoginAccess = !scopeKey || scopeKey === 'login';\n    const scope = this.userAccountsService.getScope(strategy, scopeKey || 'login', user, accountId);\n\n    ctx.cookies.set(\n      `auth_${strategy}_${state}`,\n      JSON.stringify({\n        scopeKey,\n        scope,\n        isLoginAccess,\n      }),\n      {\n        maxAge: 10 * 60 * 1000,\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      },\n    );\n    const redirectUri = this.generateAuthUrl(strategy, {\n      redirectUri: this.redirectUri(ctx, strategy),\n      scope,\n      state,\n      accessType: refreshToken ? 'offline' : 'online',\n    });\n\n    return ctx.redirect(redirectUri);\n  }\n\n  /**\n   * @param {Koa.Context} ctx\n   * @param {string} strategy\n   * @param {boolean} isConnected\n   * @returns {*}\n   */\n  async accessResponse(ctx, strategy: string, isConnected: ?boolean) {\n    if (ctx.query.error) {\n      const error = new Error(ctx.query.error);\n      error.status = 403;\n      error.expose = true;\n      throw error;\n    }\n\n    const code = ctx.query.code;\n    const state = ctx.query.state;\n    const cookieName = `auth_${strategy}_${state}`;\n    let cookie = ctx.cookies.get(cookieName);\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    if (!cookie) {\n      throw new Error('No cookie for this state');\n    }\n\n    cookie = JSON.parse(cookie);\n    if (!cookie || !cookie.scope) {\n      throw new Error('Unexpected cookie value');\n    }\n\n    if (!cookie.isLoginAccess) {\n      if (!isConnected) {\n        throw new Error('You are not connected');\n      }\n    }\n\n    const tokens = await this.getTokens(strategy, {\n      code,\n      redirectUri: this.redirectUri(ctx, strategy),\n    });\n\n    if (cookie.isLoginAccess) {\n      const user = await this.userAccountsService.findOrCreateFromGoogle(\n        strategy,\n        tokens,\n        cookie.scope,\n        cookie.scopeKey,\n      );\n      return user;\n    }\n\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    const connectedUser = ctx.state.connected;\n    await this.userAccountsService.update(\n      connectedUser,\n      strategy,\n      tokens,\n      cookie.scope,\n      cookie.scopeKey,\n    );\n    return connectedUser;\n  }\n\n  refreshAccountTokens(user, account) {\n    if (account.tokenExpireDate && account.tokenExpireDate.getTime() > Date.now()) {\n      return Promise.resolve(false);\n    }\n    return this.refreshToken(account.provider, {\n      accessToken: account.accessToken,\n      refreshToken: account.refreshToken,\n    }).then(tokens => {\n      if (!tokens) {\n        // serviceGoogle.updateFields({ accessToken:null, refreshToken:null, status: .OUTDATED });\n        return false;\n      }\n      account.accessToken = tokens.accessToken;\n      account.tokenExpireDate = tokens.expireDate;\n      return this.userAccountsService.updateAccount(user, account).then(() => true);\n    });\n  }\n}\n","/* global fetch */\nimport EventEmitter from 'events';\n\nexport default new class UserAccountGoogleService extends EventEmitter {\n  static scopeKeyToScope = {\n    login: 'openid profile email https://www.googleapis.com/auth/plus.profile.emails.read',\n  };\n\n  providerKey = 'google';\n\n  getProfile(tokens) {\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokens.accessToken}`,\n    ).then(response => response.json());\n  }\n\n  isAccount(account, profile) {\n    return account.googleId === profile.id;\n  }\n\n  getId(profile) {\n    return profile.id;\n  }\n\n  getAccountName(profile) {\n    return profile.email;\n  }\n\n  getEmails(profile, plusProfile) {\n    const emails = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    if (plusProfile.emails) {\n      plusProfile.emails.forEach(email => {\n        if (emails.indexOf(email.value) === -1) {\n          emails.push(email.value);\n        }\n      });\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile) {\n    return profile.name;\n  }\n\n  getFullName(profile) {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope) {\n    return this.getScope(newScope);\n  }\n\n  getScope(oldScope, newScope) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope.concat(newScope.split(' ')).filter((item, i, ar) => ar.indexOf(item) === i);\n  }\n}();\n","/* global fetch */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport userAccountGoogleService from './userAccountGoogleService';\n\ntype TokensObject = {\n  accessToken: string,\n  expireDate: Date,\n  idToken: string,\n  refreshToken?: string,\n  tokenType: string,\n};\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport default class UserAccountsService extends EventEmitter {\n  static strategyToService = {\n    google: userAccountGoogleService,\n  };\n\n  constructor(usersManager) {\n    super();\n    this.usersManager = usersManager;\n  }\n\n  getScope(strategy: string, scopeKey: string, user, accountId) {\n    logger.debug('getScope', { strategy, userId: user && user._id });\n    const service = this.constructor.strategyToService[strategy];\n    const newScope = service.constructor.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      account => account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(user, strategy, tokens, scope, subservice) {\n    const service = this.constructor.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const account = user.accounts.find(\n      account => account.provider === strategy && service.isAccount(account, profile),\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && account.subservices.indexOf(subservice) === -1) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.update(user);\n    return user;\n  }\n\n  async findOrCreateFromGoogle(strategy: string, tokens: TokensObject, scope: string, subservice) {\n    if (strategy !== 'google') {\n      throw new Error('Not supported at the moment');\n    }\n\n    const service = this.constructor.strategyToService[strategy];\n\n    const profile = await service.getProfile(tokens);\n\n    const plusProfile = await fetch(\n      `https://www.googleapis.com/plus/v1/people/me?access_token=${tokens.accessToken}`,\n    ).then(response => response.json());\n\n    const emails = service.getEmails(profile, plusProfile);\n\n    let user = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId: service.getId(profile),\n      emails,\n    });\n\n    logger.info(!user ? 'create user' : 'existing user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: this.usersManager.STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    const accountId = service.getId(profile);\n\n    let account = user.accounts.find(\n      account => account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach(email => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = Array.from(\n      user.emails.reduce((domains, email) => domains.add(email.split('@', 2)[1]), new Set()),\n    );\n\n    const keyPath: string = this.usersManager.store.keyPath;\n    await this.usersManager[user[keyPath] ? 'updateOne' : 'insertOne'](user);\n    return user;\n  }\n\n  updateAccount(user, account) {\n    return this.usersManager.updateAccount(user, account).then(() => user);\n  }\n}\n","import AuthenticationService from './services/AuthenticationService';\n\nexport default function createAuthController({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n}: {\n  authenticationService: AuthenticationService,\n  homeRouterKey?: ?string,\n  usersManager: Object,\n}) {\n  return {\n    async login(ctx) {\n      const strategy = ctx.namedParam('strategy');\n      if (!strategy) throw new Error('Strategy missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy);\n    },\n\n    async loginResponse(ctx) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(ctx, strategy);\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx) {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n","import { promisify } from 'util';\nimport { sign, verify } from 'jsonwebtoken';\nimport Logger from 'nightingale-logger/src';\nimport abstractUsersManager from './models/user/abstractUsersManager';\nimport mongoUsersManager from './models/user/mongoUsersManager';\nimport rethinkUsersManager from './models/user/rethinkUsersManager';\nimport AuthenticationService from './services/AuthenticationService';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport createAuthController from './createAuthController';\n\nexport { abstractUsersManager, mongoUsersManager, rethinkUsersManager };\nexport * from './models/user/types';\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nconst signPromisified = promisify(sign);\nconst verifyPromisified = promisify(verify);\n\nexport default function init({\n  usersManager,\n  strategies,\n  homeRouterKey,\n}: {\n  homeRouterKey?: ?string,\n  strategies: Object,\n  usersManager: Object,\n}) {\n  return app => {\n    const userAccountsService = new UserAccountsService(usersManager);\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n    });\n\n    app.reduxReducers.user = (state = null) => state;\n    app.reduxReducers.connected = (state = null) => state;\n\n    app.context.setConnected = async function(connected: number | string, user: Object) {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await signPromisified(\n        { connected, time: Date.now() },\n        this.config.get('authentication').get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: this.request.headers['user-agent'],\n          expiresIn: '30 days',\n        },\n      );\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function() {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    const decodeJwt = async (token, userAgent) => {\n      const result = await verifyPromisified(\n        token,\n        app.config.get('authentication').get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: userAgent,\n        },\n      );\n      return result && result.connected;\n    };\n\n    if (app.websocket) {\n      logger.debug('app has websocket');\n      // eslint-disable-next-line global-require\n      const Cookies = require('cookies');\n\n      const users = new Map();\n      app.websocket.users = users;\n\n      app.websocket.use(async (socket, next) => {\n        const handshakeData = socket.request;\n        const cookies = new Cookies(handshakeData, null, { keys: app.keys });\n        const token = cookies.get(COOKIE_NAME);\n        logger.debug('middleware websocket', { token });\n\n        if (!token) return next();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, handshakeData.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentication', { err });\n          return next();\n        }\n        logger.debug('middleware websocket', { connected });\n\n        if (!connected) return next();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) return next();\n\n        socket.user = user;\n        users.set(socket.client.id, user);\n\n        socket.on('disconnected', () => users.delete(socket.client.id));\n\n        await next();\n      });\n    }\n\n    return {\n      routes: {\n        login: [\n          '/login/:strategy',\n          segment => {\n            segment.add('/response', controller.loginResponse, 'loginResponse');\n            segment.defaultRoute(controller.login, 'login');\n          },\n        ],\n        logout: ['/logout', controller.logout],\n      },\n\n      middleware: async (ctx, next) => {\n        const token = ctx.cookies.get(COOKIE_NAME);\n        logger.debug('middleware', { token });\n\n        const setState = (connected, user) => {\n          ctx.state.connected = connected;\n          ctx.state.user = user;\n          if (ctx.reduxInitialContext) {\n            ctx.reduxInitialContext.connected = connected;\n            ctx.reduxInitialContext.user = user && usersManager.transformForBrowser(user);\n          }\n        };\n\n        const notConnected = () => {\n          setState(null, null);\n          return next();\n        };\n\n        if (!token) return notConnected();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, ctx.request.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentification', { err });\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n        logger.debug('middleware', { connected });\n\n        if (!connected) return notConnected();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) {\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n\n        setState(connected, user);\n        return next();\n      },\n    };\n  };\n}\n"],"names":["Error","connected","store","findByKey","user","insertOne","updateOne","id","_id","displayName","fullName","status","emails","emailDomains","accounts","map","account","provider","accountId","name","profile","mongoUsersManager","Object","create","abstractUsersManager","assign","query","length","$in","findOne","accountIndex","indexOf","partialUpdateOne","r","filter","row","contains","and","eq","or","expr","changeAt","randomBytesPromisified","promisify","randomBytes","randomHex","size","then","buffer","toString","logger","Logger","AuthenticationService","EventEmitter","config","strategies","userAccountsService","strategy","options","debug","strategyInstance","type","oauth2","authorizationCode","authorizeURL","redirectUri","scope","state","grantType","accessType","loginHint","includeGrantedScopes","getToken","code","result","access_token","refresh_token","token_type","expires_in","d","Date","setTime","getTime","id_token","tokens","refreshToken","token","accessToken","refresh","ctx","host","get","request","urlGenerator","redirectAuthUrl","scopeKey","getScope","cookies","set","JSON","stringify","generateAuthUrl","redirect","accessResponse","isConnected","error","expose","cookieName","cookie","expires","parse","isLoginAccess","getTokens","findOrCreateFromGoogle","connectedUser","update","tokenExpireDate","now","Promise","resolve","expireDate","updateAccount","providerKey","fetch","response","json","googleId","email","plusProfile","push","forEach","value","given_name","family_name","newScope","oldScope","split","concat","item","i","ar","scopeKeyToScope","UserAccountsService","usersManager","userId","service","constructor","strategyToService","find","join","subservice","getProfile","isAccount","subservices","getEmails","findOneByAccountOrEmails","getId","info","getDisplayName","getFullName","STATUSES","VALIDATED","getAccountName","includes","userEmails","Array","from","reduce","domains","add","Set","keyPath","userAccountGoogleService","createAuthController","login","namedParam","authenticationService","loginResponse","homeRouterKey","assert","setConnected","logout","COOKIE_NAME","signPromisified","sign","verifyPromisified","verify","init","app","controller","reduxReducers","context","time","headers","decodeJwt","userAgent","websocket","Cookies","require","users","Map","use","socket","next","handshakeData","keys","err","findConnected","client","on","delete","segment","defaultRoute","setState","reduxInitialContext","transformForBrowser","notConnected"],"mappings":"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"}