{"version":3,"sources":["../src/index.js"],"names":["sign","verify","promiseCallback","Logger","abstractUsersManager","mongoUsersManager","rethinkUsersManager","AuthenticationService","UserAccountsService","createAuthController","default","routes","COOKIE_NAME","logger","init","controllers","usersManager","strategies","loginModuleDescriptor","homeRouterKey","userAccountsService","authenticationService","app","config","set","context","setConnected","connected","user","debug","Error","state","token","time","Date","now","get","algorithm","audience","request","headers","expiresIn","done","cookies","httpOnly","secure","logout","expires","registerBrowserStateTransformer","initialBrowserState","ctx","transformForBrowser","decodeJwt","userAgent","result","websocket","Cookies","require","users","Map","use","socket","next","handshakeData","keys","err","info","findConnected","client","id","on","delete"],"mappings":";;AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,cAA7B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,MAAP;AACA,OAAOC,oBAAP,MAAiC,oCAAjC;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,mBAAP,MAAgC,mCAAhC;AACA,OAAOC,qBAAP,MAAkC,kCAAlC;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;AACA,OAAOC,oBAAP,MAAiC,2CAAjC;;AAEA,SAASL,oBAAT,EAA+BC,iBAA/B,EAAkDC,mBAAlD;AACA,SAASI,WAAWC,MAApB,QAAkC,UAAlC;;AAEA,IAAMC,cAAc,eAApB;AACA,IAAMC,SAAS,IAAIV,MAAJ,CAAW,UAAX,CAAf;;AAEA,eAAe,SAASW,IAAT,CAAc;AAC3BC,aAD2B;AAE3BC,cAF2B;AAG3BC,YAH2B;AAI3BC,uBAJ2B;AAK3BC;AAL2B,CAAd,EAYZ;AACD,SAAO,eAAO;AACZ,QAAMC,sBAAsB,IAAIZ,mBAAJ,CAAwBQ,YAAxB,CAA5B;;AAEA,QAAMK,wBAAwB,IAAId,qBAAJ,CAC5Be,IAAIC,MADwB,EAE5BN,UAF4B,EAG5BG,mBAH4B,CAA9B;;AAMAL,gBAAYS,GAAZ,CAAgB,MAAhB,EAAwBf,qBAAqB;AAC3CO,kBAD2C;AAE3CK,2BAF2C;AAG3CH,2BAH2C;AAI3CC;AAJ2C,KAArB,CAAxB;;AAOAG,QAAIG,OAAJ,CAAYC,YAAZ;AAAA,mCAA2B,WAAgBC,SAAhB,EAA0CC,IAA1C,EAAwD;AAAA;;AACjFf,eAAOgB,KAAP,CAAa,cAAb,EAA6B,EAAEF,SAAF,EAA7B;AACA,YAAI,CAACA,SAAL,EAAgB;AACd,gBAAM,IAAIG,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,aAAKC,KAAL,CAAWJ,SAAX,GAAuBA,SAAvB;AACA,aAAKI,KAAL,CAAWH,IAAX,GAAkBA,IAAlB;;AAEA,YAAMI,QAAQ,MAAM9B,gBAAgB;AAAA,iBAAQF,KAC1C,EAAE2B,SAAF,EAAaM,MAAMC,KAAKC,GAAL,EAAnB,EAD0C,EAE1C,MAAKZ,MAAL,CAAYa,GAAZ,CAAgB,gBAAhB,EAAkCA,GAAlC,CAAsC,WAAtC,CAF0C,EAG1C;AACEC,uBAAW,OADb;AAEEC,sBAAU,MAAKC,OAAL,CAAaC,OAAb,CAAqB,YAArB,CAFZ;AAGEC,uBAAW;AAHb,WAH0C,EAQ1CC,IAR0C,CAAR;AAAA,SAAhB,CAApB;;AAWA,aAAKC,OAAL,CAAanB,GAAb,CAAiBZ,WAAjB,EAA8BoB,KAA9B,EAAqC;AACnCY,oBAAU,IADyB;AAEnCC,kBAAQ,KAAKtB,MAAL,CAAYa,GAAZ,CAAgB,YAAhB;AAF2B,SAArC;AAID,OAxBD;;AAAA;AAAA;AAAA;AAAA;;AA0BAd,QAAIG,OAAJ,CAAYqB,MAAZ,GAAqB,YAAY;AAC/B,aAAO,KAAKf,KAAL,CAAWJ,SAAlB;AACA,aAAO,KAAKI,KAAL,CAAWH,IAAlB;AACA,WAAKe,OAAL,CAAanB,GAAb,CAAiBZ,WAAjB,EAA8B,EAA9B,EAAkC,EAAEmC,SAAS,IAAIb,IAAJ,CAAS,CAAT,CAAX,EAAlC;AACD,KAJD;;AAMAZ,QAAI0B,+BAAJ,CAAoC,UAACC,mBAAD,EAAsBC,GAAtB,EAA8B;AAChE,UAAIA,IAAInB,KAAJ,CAAUJ,SAAd,EAAyB;AACvBsB,4BAAoBtB,SAApB,GAAgCuB,IAAInB,KAAJ,CAAUJ,SAA1C;AACAsB,4BAAoBrB,IAApB,GAA2BZ,aAAamC,mBAAb,CAAiCD,IAAInB,KAAJ,CAAUH,IAA3C,CAA3B;AACD;AACF,KALD;;AAOA,QAAMwB,YAAY,SAAZA,SAAY,CAACpB,KAAD,EAAQqB,SAAR,EAAsB;AACtC,UAAMC,SAASrD,OAAO+B,KAAP,EAAcV,IAAIC,MAAJ,CAAWa,GAAX,CAAe,gBAAf,EAAiCA,GAAjC,CAAqC,WAArC,CAAd,EAAiE;AAC9EC,mBAAW,OADmE;AAE9EC,kBAAUe;AAFoE,OAAjE,CAAf;AAIA,aAAOC,UAAUA,OAAO3B,SAAxB;AACD,KAND;;AAQA,QAAIL,IAAIiC,SAAR,EAAmB;AAAA;AACjB1C,eAAOgB,KAAP,CAAa,mBAAb;AACA;AACA,YAAM2B,UAAUC,QAAQ,SAAR,CAAhB;;AAEA,YAAMC,QAAQ,IAAIC,GAAJ,EAAd;AACArC,YAAIiC,SAAJ,CAAcG,KAAd,GAAsBA,KAAtB;;AAEApC,YAAIiC,SAAJ,CAAcK,GAAd;AAAA,wCAAkB,WAAOC,MAAP,EAAeC,IAAf,EAAwB;AACxC,gBAAMC,gBAAgBF,OAAOtB,OAA7B;AACA,gBAAMI,UAAU,IAAIa,OAAJ,CAAYO,aAAZ,EAA2B,IAA3B,EAAiC,EAAEC,MAAM1C,IAAI0C,IAAZ,EAAjC,CAAhB;AACA,gBAAIhC,QAAQW,QAAQP,GAAR,CAAYxB,WAAZ,CAAZ;AACAC,mBAAOgB,KAAP,CAAa,sBAAb,EAAqC,EAAEG,KAAF,EAArC;;AAEA,gBAAI,CAACA,KAAL,EAAY,OAAO,MAAM8B,MAAb;;AAEZ,gBAAInC,kBAAJ;AACA,gBAAI;AACFA,0BAAY,MAAMyB,UAAUpB,KAAV,EAAiB+B,cAAcvB,OAAd,CAAsB,YAAtB,CAAjB,CAAlB;AACD,aAFD,CAEE,OAAOyB,GAAP,EAAY;AACZpD,qBAAOqD,IAAP,CAAY,iCAAZ,EAA+C,EAAED,GAAF,EAA/C;AACA,qBAAO,MAAMH,MAAb;AACD;AACDjD,mBAAOgB,KAAP,CAAa,sBAAb,EAAqC,EAAEF,SAAF,EAArC;;AAEA,gBAAI,CAACA,SAAL,EAAgB,OAAO,MAAMmC,MAAb;;AAEhB,gBAAMlC,OAAO,MAAMZ,aAAamD,aAAb,CAA2BxC,SAA3B,CAAnB;;AAEA,gBAAI,CAACC,IAAL,EAAW,OAAO,MAAMkC,MAAb;;AAEXD,mBAAOjC,IAAP,GAAcA,IAAd;AACA8B,kBAAMlC,GAAN,CAAUqC,OAAOO,MAAP,CAAcC,EAAxB,EAA4BzC,IAA5B;;AAEAiC,mBAAOS,EAAP,CAAU,cAAV,EAA0B;AAAA,qBAAMZ,MAAMa,MAAN,CAAaV,OAAOO,MAAP,CAAcC,EAA3B,CAAN;AAAA,aAA1B;;AAEA,kBAAMP,MAAN;AACD,WA7BD;;AAAA;AAAA;AAAA;AAAA;AARiB;AAsClB;;AAED;AAAA,oCAAO,WAAOZ,GAAP,EAAYY,IAAZ,EAAqB;AAC1B,YAAI9B,QAAQkB,IAAIP,OAAJ,CAAYP,GAAZ,CAAgBxB,WAAhB,CAAZ;AACAC,eAAOgB,KAAP,CAAa,YAAb,EAA2B,EAAEG,KAAF,EAA3B;;AAEA,YAAI,CAACA,KAAL,EAAY,OAAO,MAAM8B,MAAb;;AAEZ,YAAInC,kBAAJ;AACA,YAAI;AACFA,sBAAY,MAAMyB,UAAUpB,KAAV,EAAiBkB,IAAIX,OAAJ,CAAYC,OAAZ,CAAoB,YAApB,CAAjB,CAAlB;AACD,SAFD,CAEE,OAAOyB,GAAP,EAAY;AACZpD,iBAAOqD,IAAP,CAAY,mCAAZ,EAAiD,EAAED,GAAF,EAAjD;AACAf,cAAIP,OAAJ,CAAYnB,GAAZ,CAAgBZ,WAAhB,EAA6B,EAA7B,EAAiC,EAAEmC,SAAS,IAAIb,IAAJ,CAAS,CAAT,CAAX,EAAjC;AACA,iBAAO,MAAM4B,MAAb;AACD;AACDjD,eAAOgB,KAAP,CAAa,YAAb,EAA2B,EAAEF,SAAF,EAA3B;;AAEA,YAAI,CAACA,SAAL,EAAgB,OAAO,MAAMmC,MAAb;;AAEhB,YAAMlC,OAAO,MAAMZ,aAAamD,aAAb,CAA2BxC,SAA3B,CAAnB;;AAEA,YAAI,CAACC,IAAL,EAAW;AACTsB,cAAIP,OAAJ,CAAYnB,GAAZ,CAAgBZ,WAAhB,EAA6B,EAA7B,EAAiC,EAAEmC,SAAS,IAAIb,IAAJ,CAAS,CAAT,CAAX,EAAjC;AACA,iBAAO,MAAM4B,MAAb;AACD;;AAEDZ,YAAInB,KAAJ,CAAUJ,SAAV,GAAsBA,SAAtB;AACAuB,YAAInB,KAAJ,CAAUH,IAAV,GAAiBA,IAAjB;;AAEA,cAAMkC,MAAN;AACD,OA7BD;;AAAA;AAAA;AAAA;AAAA;AA8BD,GArID;AAsID","file":"index.js","sourcesContent":["import { sign, verify } from 'jsonwebtoken';\nimport promiseCallback from 'promise-callback-factory';\nimport Logger from 'nightingale-logger/src';\nimport abstractUsersManager from './models/user/abstractUsersManager';\nimport mongoUsersManager from './models/user/mongoUsersManager';\nimport rethinkUsersManager from './models/user/rethinkUsersManager';\nimport AuthenticationService from './services/AuthenticationService';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport createAuthController from './controllers/createAuthController.server';\n\nexport { abstractUsersManager, mongoUsersManager, rethinkUsersManager };\nexport { default as routes } from './routes';\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nexport default function init({\n  controllers,\n  usersManager,\n  strategies,\n  loginModuleDescriptor,\n  homeRouterKey,\n}: {\n  controllers: Map,\n  usersManager: Object,\n  strategies: Object,\n  loginModuleDescriptor: Object,\n  homeRouterKey: ?string,\n}) {\n  return app => {\n    const userAccountsService = new UserAccountsService(usersManager);\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    controllers.set('auth', createAuthController({\n      usersManager,\n      authenticationService,\n      loginModuleDescriptor,\n      homeRouterKey,\n    }));\n\n    app.context.setConnected = async function (connected: number|string, user: Object) {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await promiseCallback(done => sign(\n        { connected, time: Date.now() },\n        this.config.get('authentication').get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: this.request.headers['user-agent'],\n          expiresIn: '30 days',\n        },\n        done,\n      ));\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function () {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    app.registerBrowserStateTransformer((initialBrowserState, ctx) => {\n      if (ctx.state.connected) {\n        initialBrowserState.connected = ctx.state.connected;\n        initialBrowserState.user = usersManager.transformForBrowser(ctx.state.user);\n      }\n    });\n\n    const decodeJwt = (token, userAgent) => {\n      const result = verify(token, app.config.get('authentication').get('secretKey'), {\n        algorithm: 'HS512',\n        audience: userAgent,\n      });\n      return result && result.connected;\n    };\n\n    if (app.websocket) {\n      logger.debug('app has websocket');\n      // eslint-disable-next-line global-require\n      const Cookies = require('cookies');\n\n      const users = new Map();\n      app.websocket.users = users;\n\n      app.websocket.use(async (socket, next) => {\n        const handshakeData = socket.request;\n        const cookies = new Cookies(handshakeData, null, { keys: app.keys });\n        let token = cookies.get(COOKIE_NAME);\n        logger.debug('middleware websocket', { token });\n\n        if (!token) return await next();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, handshakeData.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentication', { err });\n          return await next();\n        }\n        logger.debug('middleware websocket', { connected });\n\n        if (!connected) return await next();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) return await next();\n\n        socket.user = user;\n        users.set(socket.client.id, user);\n\n        socket.on('disconnected', () => users.delete(socket.client.id));\n\n        await next();\n      });\n    }\n\n    return async (ctx, next) => {\n      let token = ctx.cookies.get(COOKIE_NAME);\n      logger.debug('middleware', { token });\n\n      if (!token) return await next();\n\n      let connected;\n      try {\n        connected = await decodeJwt(token, ctx.request.headers['user-agent']);\n      } catch (err) {\n        logger.info('failed to verify authentification', { err });\n        ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n        return await next();\n      }\n      logger.debug('middleware', { connected });\n\n      if (!connected) return await next();\n\n      const user = await usersManager.findConnected(connected);\n\n      if (!user) {\n        ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n        return await next();\n      }\n\n      ctx.state.connected = connected;\n      ctx.state.user = user;\n\n      await next();\n    };\n  };\n}\n"]}