{"version":3,"sources":["../../src/utils/generators.js"],"names":["randomBytes","promiseCallback","randomBase64","size","done","then","buffer","toString","randomHex"],"mappings":"AAAA,SAASA,WAAT,QAA4B,QAA5B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;;;AAEA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAAqD;AAAA,kBAA3B,UAA2B;;AAAA,6BAAR,UAAQ;;AAAA;;AAC1D,SAAOF,gBAAgB;AAAA,WAAQD,YAAYG,IAAZ,EAAkBC,IAAlB,CAAR;AAAA,GAAhB,EACAC,IADA,CACK;AAAA,WAAUC,OAAOC,QAAP,CAAgB,QAAhB,CAAV;AAAA,GADL,CAAP;AAAA;AAAA;AAED;;AAED,OAAO,SAASC,SAAT,CAAmBL,IAAnB,EAAkD;AAAA,mBAA3B,UAA2B;;AAAA,8BAAR,UAAQ;;AAAA;;AACvD,SAAOF,gBAAgB;AAAA,WAAQD,YAAYG,IAAZ,EAAkBC,IAAlB,CAAR;AAAA,GAAhB,EACAC,IADA,CACK;AAAA,WAAUC,OAAOC,QAAP,CAAgB,KAAhB,CAAV;AAAA,GADL,CAAP;AAAA;AAAA;AAED","file":"generators.js","sourcesContent":["import { randomBytes } from 'crypto';\nimport promiseCallback from 'promise-callback-factory';\n\nexport function randomBase64(size: number): Promise<string> {\n  return promiseCallback(done => randomBytes(size, done))\n        .then(buffer => buffer.toString('base64'));\n}\n\nexport function randomHex(size: number): Promise<string> {\n  return promiseCallback(done => randomBytes(size, done))\n        .then(buffer => buffer.toString('hex'));\n}\n"]}