{"version":3,"sources":["../../src/controllers/createAuthController.server.js"],"names":["createAuthController","usersManager","authenticationService","loginModuleDescriptor","homeRouterKey","login","ctx","state","connected","redirect","urlGenerator","strategy","namedParam","redirectAuthUrl","render","loginResponse","assert","accessResponse","connectedUser","keyPath","store","setConnected","logout"],"mappings":";;AAEA,eAAe,SAASA,oBAAT,OAUZ;AAAA,MATDC,YASC,QATDA,YASC;AAAA,MARDC,qBAQC,QARDA,qBAQC;AAAA,MAPDC,qBAOC,QAPDA,qBAOC;AAAA,gCANDC,aAMC;AAAA,MANDA,aAMC,sCANe,MAMf;;AACD,SAAO;AACCC,SADD;AAAA,6EACOC,GADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,oBAAIA,IAAIC,KAAJ,CAAUC,SAAd,EAAyB;AACvBF,sBAAIG,QAAJ,CAAaH,IAAII,YAAJ,CAAiBN,aAAjB,CAAb;AACD;;AAEKO,wBANH,GAMcL,IAAIM,UAAJ,CAAe,UAAf,CANd;;AAAA,qBAOCD,QAPD;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAQKT,sBAAsBW,eAAtB,CAAsCP,GAAtC,EAA2CK,QAA3C,CARL;;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAYGL,IAAIQ,MAAJ,CAAWX,qBAAX,CAZH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAeCY,iBAfD;AAAA,8EAeeT,GAff;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBH,oBAAIA,IAAIC,KAAJ,CAAUC,SAAd,EAAyB;AACvBF,sBAAIG,QAAJ,CAAaH,IAAII,YAAJ,CAAiBN,aAAjB,CAAb;AACD;;AAEKO,wBApBH,GAoBcL,IAAIM,UAAJ,CAAe,UAAf,CApBd;;AAqBHN,oBAAIU,MAAJ,CAAWL,QAAX;;AArBG;AAAA,uBAuByBT,sBAAsBe,cAAtB,CAAqCX,GAArC,EAA0CK,QAA1C,CAvBzB;;AAAA;AAuBGO,6BAvBH;AAwBGC,uBAxBH,GAwBqBlB,aAAamB,KAAb,CAAmBD,OAxBxC;AAAA;AAAA,uBAyBGb,IAAIe,YAAJ,CAAiBH,cAAcC,OAAd,CAAjB,EAAyCD,aAAzC,CAzBH;;AAAA;AA0BHZ,oBAAIC,KAAJ,CAAUC,SAAV,GAAsBU,aAAtB;AA1BG;AAAA,uBA2BGZ,IAAIG,QAAJ,CAAaH,IAAII,YAAJ,CAAiBN,aAAjB,CAAb,CA3BH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA8BCkB,UA9BD;AAAA,8EA8BQhB,GA9BR;AAAA;AAAA;AAAA;AAAA;AA+BHA,oBAAIgB,MAAJ;AA/BG;AAAA,uBAgCGhB,IAAIG,QAAJ,CAAaH,IAAII,YAAJ,CAAiBN,aAAjB,CAAb,CAhCH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAmCD","file":"createAuthController.server.js","sourcesContent":["import AuthenticationService from '../services/AuthenticationService';\n\nexport default function createAuthController({\n  usersManager,\n  authenticationService,\n  loginModuleDescriptor,\n  homeRouterKey = 'home',\n}: {\n  usersManager: Object,\n  authenticationService: AuthenticationService,\n  loginModuleDescriptor: Object,\n  homeRouterKey: ?string,\n}) {\n  return {\n    async login(ctx) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      if (strategy) {\n        await authenticationService.redirectAuthUrl(ctx, strategy);\n        return;\n      }\n\n      await ctx.render(loginModuleDescriptor);\n    },\n\n    async loginResponse(ctx) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(ctx, strategy);\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx) {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n"]}