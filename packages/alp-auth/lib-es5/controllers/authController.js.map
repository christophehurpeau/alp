{"version":3,"sources":["../../src/controllers/authController.js"],"names":[],"mappings":";;;;;kBAEwB,oB;;AAFxB;;;;;;;;AAEe,SAAS,oBAAT,OAQZ;AAAA,QAPC,qBAOD,QAPC,qBAOD;AAAA,QANC,qBAMD,QANC,qBAMD;AAAA,kCALC,aAKD;AAAA,QALC,aAKD,sCALiB,MAKjB;;AACC,WAAO;AACG,aADH,iBACS,GADT,EACc;AAAA;;AAAA;AAAA,oBAKP,QALO;AAAA;AAAA;AAAA;AAAA;AACb,oCAAI,IAAI,KAAJ,CAAU,SAAd,EAAyB;AACrB,wCAAI,QAAJ,CAAa,IAAI,YAAJ,CAAiB,aAAjB,CAAb;AACH;;AAEK,wCALO,GAKI,IAAI,UAAJ,CAAe,UAAf,CALJ;;AAAA,qCAMT,QANS;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAOH,sBAAsB,eAAtB,CAAsC,GAAtC,EAA2C,QAA3C,CAPG;;AAAA;AAAA;;AAAA;AAAA;AAAA,uCAWP,IAAI,MAAJ,CAAW,qBAAX,CAXO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYhB,SAbE;AAeG,qBAfH,yBAeiB,GAfjB,EAesB;AAAA;;AAAA;AAAA,oBAKf,QALe,EAQf,aARe;AAAA;AAAA;AAAA;AAAA;AACrB,oCAAI,IAAI,KAAJ,CAAU,SAAd,EAAyB;AACrB,wCAAI,QAAJ,CAAa,IAAI,YAAJ,CAAiB,aAAjB,CAAb;AACH;;AAEK,wCALe,GAKJ,IAAI,UAAJ,CAAe,UAAf,CALI;;AAMrB,oCAAI,MAAJ,CAAW,QAAX;;AANqB;AAAA,uCAQO,sBAAsB,cAAtB,CAAqC,GAArC,EAA0C,QAA1C,CARP;;AAAA;AAQf,6CARe;AAAA;AAAA,uCASf,IAAI,YAAJ,CAAiB,cAAc,GAA/B,EAAoC,aAApC,CATe;;AAAA;AAUrB,oCAAI,KAAJ,CAAU,SAAV,GAAsB,aAAtB;AAVqB;AAAA,uCAWf,IAAI,QAAJ,CAAa,IAAI,YAAJ,CAAiB,aAAjB,CAAb,CAXe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYxB;AA3BE,KAAP;AA6BH","file":"authController.js","sourcesContent":["import AuthenticationService from '../services/AuthenticationService';\n\nexport default function createAuthController({\n    authenticationService,\n    loginModuleDescriptor,\n    homeRouterKey = 'home',\n}: {\n    authenticationService: AuthenticationService,\n    loginModuleDescriptor: Object,\n    homeRouterKey: ?string,\n}) {\n    return {\n        async login(ctx) {\n            if (ctx.state.connected) {\n                ctx.redirect(ctx.urlGenerator(homeRouterKey));\n            }\n\n            const strategy = ctx.namedParam('strategy');\n            if (strategy) {\n                await authenticationService.redirectAuthUrl(ctx, strategy);\n                return;\n            }\n\n            await ctx.render(loginModuleDescriptor);\n        },\n\n        async loginResponse(ctx) {\n            if (ctx.state.connected) {\n                ctx.redirect(ctx.urlGenerator(homeRouterKey));\n            }\n\n            const strategy = ctx.namedParam('strategy');\n            ctx.assert(strategy);\n\n            const connectedUser = await authenticationService.accessResponse(ctx, strategy);\n            await ctx.setConnected(connectedUser._id, connectedUser);\n            ctx.state.connected = connectedUser;\n            await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n        },\n    };\n}\n"]}