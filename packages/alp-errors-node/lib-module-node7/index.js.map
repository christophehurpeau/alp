{"version":3,"sources":["../src/index.js"],"names":["STATUS_CODES","ErrorHtmlRenderer","Logger","logger","errorHtmlRenderer","appPath","process","cwd","ctx","next","err","Error","status","error","accepts","type","env","NODE_ENV","body","message","expose","render"],"mappings":"AAAA,SAASA,YAAT,QAA6B,MAA7B;AACA,OAAOC,iBAAP,MAA8B,YAA9B;AACA,OAAOC,MAAP;;AAEA,MAAMC,SAAS,IAAID,MAAJ,CAAW,YAAX,CAAf;AACA,MAAME,oBAAoB,IAAIH,iBAAJ,CAAsB;AAC9CI,WAASC,QAAQC,GAAR;AADqC,CAAtB,CAA1B;;AAIA,gBAAe,gBAAgBC,GAAhB,EAAqBC,IAArB,EAA2B;AACxC,MAAI;AACF,UAAMA,MAAN;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ;AACA,QAAI,CAACA,GAAL,EAAUA,MAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACV;AACA,QAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6BA,MAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;;AAE7BF,QAAII,MAAJ,GAAaF,IAAIE,MAAJ,IAAc,GAA3B;AACAT,WAAOU,KAAP,CAAaH,GAAb;;AAEA,YAAQF,IAAIM,OAAJ,CAAY,MAAZ,EAAoB,MAApB,EAA4B,MAA5B,CAAR;AACE,WAAK,MAAL;AACEN,YAAIO,IAAJ,GAAW,YAAX;AACA,YAAIT,QAAQU,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCT,cAAIU,IAAJ,GAAWR,IAAIS,OAAf;AACD,SAFD,MAEO,IAAIT,IAAIU,MAAR,EAAgB;AACrBZ,cAAIU,IAAJ,GAAWR,IAAIS,OAAf;AACD,SAFM,MAEA;AACL,gBAAMT,GAAN;AACD;;AAED;;AAEF,WAAK,MAAL;AACEF,YAAIO,IAAJ,GAAW,kBAAX;AACA,YAAIT,QAAQU,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCT,cAAIU,IAAJ,GAAW,EAAEL,OAAOH,IAAIS,OAAb,EAAX;AACD,SAFD,MAEO,IAAIT,IAAIU,MAAR,EAAgB;AACrBZ,cAAIU,IAAJ,GAAW,EAAEL,OAAOH,IAAIS,OAAb,EAAX;AACD,SAFM,MAEA;AACLX,cAAIU,IAAJ,GAAW,EAAEL,OAAOb,aAAaQ,IAAII,MAAjB,CAAT,EAAX;AACD;;AAED;;AAEF,WAAK,MAAL;AACEJ,YAAIO,IAAJ,GAAW,WAAX;AACA,YAAIT,QAAQU,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCT,cAAIU,IAAJ,GAAWd,kBAAkBiB,MAAlB,CAAyBX,GAAzB,CAAX;AACD,SAFD,MAEO,IAAIA,IAAIU,MAAR,EAAgB;AACrBZ,cAAIU,IAAJ,GAAWR,IAAIS,OAAf;AACD,SAFM,MAEA;AACL,gBAAMT,GAAN;AACD;;AAED;AAnCJ;AAqCD;AACF,CAlDD","file":"index.js","sourcesContent":["import { STATUS_CODES } from 'http';\nimport ErrorHtmlRenderer from 'error-html';\nimport Logger from 'nightingale-logger/src';\n\nconst logger = new Logger('alp:errors');\nconst errorHtmlRenderer = new ErrorHtmlRenderer({\n  appPath: process.cwd(),\n});\n\nexport default async function (ctx, next) {\n  try {\n    await next();\n  } catch (err) {\n    // eslint-disable-next-line no-ex-assign\n    if (!err) err = new Error('Unknown error');\n    // eslint-disable-next-line no-ex-assign\n    if (typeof err === 'string') err = new Error(err);\n\n    ctx.status = err.status || 500;\n    logger.error(err);\n\n    switch (ctx.accepts('html', 'text', 'json')) {\n      case 'text':\n        ctx.type = 'text/plain';\n        if (process.env.NODE_ENV !== 'production') {\n          ctx.body = err.message;\n        } else if (err.expose) {\n          ctx.body = err.message;\n        } else {\n          throw err;\n        }\n\n        break;\n\n      case 'json':\n        ctx.type = 'application/json';\n        if (process.env.NODE_ENV !== 'production') {\n          ctx.body = { error: err.message };\n        } else if (err.expose) {\n          ctx.body = { error: err.message };\n        } else {\n          ctx.body = { error: STATUS_CODES[ctx.status] };\n        }\n\n        break;\n\n      case 'html':\n        ctx.type = 'text/html';\n        if (process.env.NODE_ENV !== 'production') {\n          ctx.body = errorHtmlRenderer.render(err);\n        } else if (err.expose) {\n          ctx.body = err.message;\n        } else {\n          throw err;\n        }\n\n        break;\n    }\n  }\n}\n"]}