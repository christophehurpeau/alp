{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,SAAS,gCAAW,YAAX,CAAf;AACA,MAAM,oBAAoB,4BAA1B;;;;;;;;;;;mCAEe,WAAgB,GAAhB,EAAqB,IAArB,EAA2B;AACtC,YAAI;AACA,kBAAM,MAAN;AACH,SAFD,CAEE,OAAO,GAAP,EAAY;AACV,gBAAI,CAAC,GAAL,EAAU,MAAM,IAAI,KAAJ,CAAU,eAAV,CAAN;AACV,gBAAI,MAAJ,GAAa,IAAI,MAAJ,IAAc,GAA3B;AACA,mBAAO,KAAP,CAAa,GAAb;;AAEA,oBAAQ,IAAI,OAAJ,CAAY,MAAZ,EAAoB,MAApB,EAA4B,MAA5B,CAAR;AACI,qBAAK,MAAL;AACI,wBAAI,IAAJ,GAAW,YAAX;AACA,wBAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACvC,4BAAI,IAAJ,GAAW,IAAI,OAAf;AACH,qBAFD,MAEO,IAAI,IAAI,MAAR,EAAgB;AACnB,4BAAI,IAAJ,GAAW,IAAI,OAAf;AACH,qBAFM,MAEA;AACH,8BAAM,GAAN;AACH;;AAED;;AAEJ,qBAAK,MAAL;AACI,wBAAI,IAAJ,GAAW,kBAAX;AACA,wBAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACvC,4BAAI,IAAJ,GAAW,EAAE,OAAO,IAAI,OAAb,EAAX;AACH,qBAFD,MAEO,IAAI,IAAI,MAAR,EAAgB;AACnB,4BAAI,IAAJ,GAAW,EAAE,OAAO,IAAI,OAAb,EAAX;AACH,qBAFM,MAEA;AACH,4BAAI,IAAJ,GAAW,EAAE,OAAO,mBAAa,IAAI,MAAjB,CAAT,EAAX;AACH;;AAED;;AAEJ,qBAAK,MAAL;AACI,wBAAI,IAAJ,GAAW,WAAX;AACA,wBAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACvC,8BAAM,cAAc,qBAAW,GAAX,CAApB;AACA,4BAAI,IAAJ,GAAW,kBAAkB,MAAlB,CAAyB,WAAzB,CAAX;AACH,qBAHD,MAGO,IAAI,IAAI,MAAR,EAAgB;AACnB,4BAAI,IAAJ,GAAW,IAAI,OAAf;AACH,qBAFM,MAEA;AACH,8BAAM,GAAN;AACH;;AAED;AApCR;AAsCH;AACJ,K","file":"index.js","sourcesContent":["import { STATUS_CODES } from 'http';\nimport { parse as parseError } from 'alouette';\nimport ErrorHtmlRenderer from 'alouette/lib/HtmlRenderer';\nimport Logger from 'nightingale-logger';\n\nconst logger = new Logger('alp.errors');\nconst errorHtmlRenderer = new ErrorHtmlRenderer();\n\nexport default async function (ctx, next) {\n    try {\n        await next();\n    } catch (err) {\n        if (!err) err = new Error('Unknown error');\n        ctx.status = err.status || 500;\n        logger.error(err);\n\n        switch (ctx.accepts('html', 'text', 'json')) {\n            case 'text':\n                ctx.type = 'text/plain';\n                if (process.env.NODE_ENV !== 'production') {\n                    ctx.body = err.message;\n                } else if (err.expose) {\n                    ctx.body = err.message;\n                } else {\n                    throw err;\n                }\n\n                break;\n\n            case 'json':\n                ctx.type = 'application/json';\n                if (process.env.NODE_ENV !== 'production') {\n                    ctx.body = { error: err.message };\n                } else if (err.expose) {\n                    ctx.body = { error: err.message };\n                } else {\n                    ctx.body = { error: STATUS_CODES[ctx.status] };\n                }\n\n                break;\n\n            case 'html':\n                ctx.type = 'text/html';\n                if (process.env.NODE_ENV !== 'production') {\n                    const parsedError = parseError(err);\n                    ctx.body = errorHtmlRenderer.render(parsedError);\n                } else if (err.expose) {\n                    ctx.body = err.message;\n                } else {\n                    throw err;\n                }\n\n                break;\n        }\n    }\n}\n"]}