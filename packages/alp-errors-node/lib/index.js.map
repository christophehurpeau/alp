{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAGA,MAAM,iBAAiB,GAAG,4BAAuB,CAAC;;AAElD,OAAO,CAAC,EAAE,CAAC,mBAAmB,EAAE,UAAS,GAAG,EAAE;AAC1C,QAAI;AACA,sBANsB,GAAG,EAMhB,GAAG,CAAC,CAAC;KACjB,CAAC,OAAO,IAAI,EAAE;AACX,eAAO,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACzB,eAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC7B;CACJ,CAAC,CAAC;;;gCAEY,WAAyB,GAAG,EAAE,IAAI,EAAE;AAC/C,YAAI;AACA,kBAAM,IAAI,EAAE,CAAC;SAChB,CAAC,OAAO,GAAG,EAAE;AACV,eAAG,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC;AAC/B,kBAAM,WAAW,GAAG,cAlBnB,KAAK,EAkByB,GAAG,CAAC,CAAC;AACpC,eAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;;AAE7C,oBAAQ,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;AACvC,qBAAK,MAAM;AACP,uBAAG,CAAC,IAAI,GAAG,YAAY,CAAC;AACxB,wBAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE;AACrB,2BAAG,CAAC,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC;qBAC1B,MAAM,IAAI,GAAG,CAAC,MAAM,EAAE;AACnB,2BAAG,CAAC,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC;qBAC1B,MAAM;AACH,8BAAM,GAAG,CAAC;qBACb;;AAED,0BAAM;;AAAA,AAEV,qBAAK,MAAM;AACP,uBAAG,CAAC,IAAI,GAAG,kBAAkB,CAAC;AAC9B,wBAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE;AACrB,2BAAG,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC;qBACrC,MAAM,IAAI,GAAG,CAAC,MAAM,EAAE;AACnB,2BAAG,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC;qBACrC,MAAM;AACH,2BAAG,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,MA1C/B,YAAY,CA0CgC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;qBAClD;;AAED,0BAAM;;AAAA,AAEV,qBAAK,MAAM;AACP,uBAAG,CAAC,IAAI,GAAG,WAAW,CAAC;AACvB,wBAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE;AACrB,2BAAG,CAAC,IAAI,GAAG,iBAAiB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;qBACpD,MAAM,IAAI,GAAG,CAAC,MAAM,EAAE;AACnB,2BAAG,CAAC,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC;qBAC1B,MAAM;AACH,8BAAM,GAAG,CAAC;qBACb;;AAED,0BAAM;AAAA,aACb;SACJ;KACJ;;oBA9C6B,SAAS","file":"index.js","sourcesContent":["import { STATUS_CODES } from 'http';\nimport { parse as parseError, log as logError } from 'alouette';\nimport ErrorHtmlRenderer from 'alouette/lib/HtmlRenderer';\nconst errorHtmlRenderer = new ErrorHtmlRenderer();\n\nprocess.on('uncaughtException', function(err) {\n    try {\n        logError(err);\n    } catch (err2) {\n        console.error(err.stack);\n        console.error(err2.stack);\n    }\n});\n\nexport default async function aukErrors(ctx, next) {\n    try {\n        await next();\n    } catch (err) {\n        ctx.status = err.status || 500;\n        const parsedError = parseError(err);\n        ctx.app.logger.error(parsedError.toString());\n\n        switch (ctx.accepts('html', 'text', 'json')) {\n            case 'text':\n                ctx.type = 'text/plain';\n                if (!ctx.app.production) {\n                    ctx.body = err.message;\n                } else if (err.expose) {\n                    ctx.body = err.message;\n                } else {\n                    throw err;\n                }\n\n                break;\n\n            case 'json':\n                ctx.type = 'application/json';\n                if (!ctx.app.production) {\n                    ctx.body = { error: err.message };\n                } else if (err.expose) {\n                    ctx.body = { error: err.message };\n                } else {\n                    ctx.body = { error: STATUS_CODES[ctx.status] };\n                }\n\n                break;\n\n            case 'html':\n                ctx.type = 'text/html';\n                if (!ctx.app.production) {\n                    ctx.body = errorHtmlRenderer.render(parsedError);\n                } else if (err.expose) {\n                    ctx.body = err.message;\n                } else {\n                    throw err;\n                }\n\n                break;\n        }\n    }\n}\n"]}