{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAM,oBAAoB,4BAApB;;AAEN,QAAQ,EAAR,CAAW,mBAAX,EAAgC,OAAS;AACrC,QAAI;AACA,2BAAS,GAAT,EADA;KAAJ,CAEE,OAAO,IAAP,EAAa;;AAEX,gBAAQ,KAAR,CAAc,IAAI,KAAJ,CAAd,CAFW;AAGX,gBAAQ,KAAR,CAAc,KAAK,KAAL,CAAd;;AAHW,KAAb;CAH0B,CAAhC;;;;;;;;;;;;;mCAWe,WAAgB,GAAhB,EAAqB,IAArB,EAA2B;AACtC,YAAI;AACA,kBAAM,MAAN,CADA;SAAJ,CAEE,OAAO,GAAP,EAAY;AACV,gBAAI,MAAJ,GAAa,IAAI,MAAJ,IAAc,GAAd,CADH;AAEV,kBAAM,cAAc,qBAAW,GAAX,CAAd,CAFI;AAGV,gBAAI,GAAJ,CAAQ,MAAR,CAAe,KAAf,CAAqB,YAAY,QAAZ,EAArB,EAHU;;AAKV,oBAAQ,IAAI,OAAJ,CAAY,MAAZ,EAAoB,MAApB,EAA4B,MAA5B,CAAR;AACI,qBAAK,MAAL;AACI,wBAAI,IAAJ,GAAW,YAAX,CADJ;AAEI,wBAAI,CAAC,IAAI,GAAJ,CAAQ,UAAR,EAAoB;AACrB,4BAAI,IAAJ,GAAW,IAAI,OAAJ,CADU;qBAAzB,MAEO,IAAI,IAAI,MAAJ,EAAY;AACnB,4BAAI,IAAJ,GAAW,IAAI,OAAJ,CADQ;qBAAhB,MAEA;AACH,8BAAM,GAAN,CADG;qBAFA;;AAMP,0BAVJ;;AADJ,qBAaS,MAAL;AACI,wBAAI,IAAJ,GAAW,kBAAX,CADJ;AAEI,wBAAI,CAAC,IAAI,GAAJ,CAAQ,UAAR,EAAoB;AACrB,4BAAI,IAAJ,GAAW,EAAE,OAAO,IAAI,OAAJ,EAApB,CADqB;qBAAzB,MAEO,IAAI,IAAI,MAAJ,EAAY;AACnB,4BAAI,IAAJ,GAAW,EAAE,OAAO,IAAI,OAAJ,EAApB,CADmB;qBAAhB,MAEA;AACH,4BAAI,IAAJ,GAAW,EAAE,OAAO,mBAAa,IAAI,MAAJ,CAApB,EAAb,CADG;qBAFA;;AAMP,0BAVJ;;AAbJ,qBAyBS,MAAL;AACI,wBAAI,IAAJ,GAAW,WAAX,CADJ;AAEI,wBAAI,CAAC,IAAI,GAAJ,CAAQ,UAAR,EAAoB;AACrB,4BAAI,IAAJ,GAAW,kBAAkB,MAAlB,CAAyB,WAAzB,CAAX,CADqB;qBAAzB,MAEO,IAAI,IAAI,MAAJ,EAAY;AACnB,4BAAI,IAAJ,GAAW,IAAI,OAAJ,CADQ;qBAAhB,MAEA;AACH,8BAAM,GAAN,CADG;qBAFA;;AAMP,0BAVJ;AAzBJ,aALU;SAAZ;KAHS","file":"index.js","sourcesContent":["import { STATUS_CODES } from 'http';\nimport { parse as parseError, log as logError } from 'alouette';\nimport ErrorHtmlRenderer from 'alouette/lib/HtmlRenderer';\nconst errorHtmlRenderer = new ErrorHtmlRenderer();\n\nprocess.on('uncaughtException', (err) => {\n    try {\n        logError(err);\n    } catch (err2) {\n        /* eslint-disable no-console */\n        console.error(err.stack);\n        console.error(err2.stack);\n        /* eslint-enable no-console */\n    }\n});\n\nexport default async function (ctx, next) {\n    try {\n        await next();\n    } catch (err) {\n        ctx.status = err.status || 500;\n        const parsedError = parseError(err);\n        ctx.app.logger.error(parsedError.toString());\n\n        switch (ctx.accepts('html', 'text', 'json')) {\n            case 'text':\n                ctx.type = 'text/plain';\n                if (!ctx.app.production) {\n                    ctx.body = err.message;\n                } else if (err.expose) {\n                    ctx.body = err.message;\n                } else {\n                    throw err;\n                }\n\n                break;\n\n            case 'json':\n                ctx.type = 'application/json';\n                if (!ctx.app.production) {\n                    ctx.body = { error: err.message };\n                } else if (err.expose) {\n                    ctx.body = { error: err.message };\n                } else {\n                    ctx.body = { error: STATUS_CODES[ctx.status] };\n                }\n\n                break;\n\n            case 'html':\n                ctx.type = 'text/html';\n                if (!ctx.app.production) {\n                    ctx.body = errorHtmlRenderer.render(parsedError);\n                } else if (err.expose) {\n                    ctx.body = err.message;\n                } else {\n                    throw err;\n                }\n\n                break;\n        }\n    }\n}\n"]}