{"version":3,"sources":["../src/index.js"],"names":["STATUS_CODES","ErrorHtmlRenderer","Logger","logger","errorHtmlRenderer","appPath","process","cwd","ctx","next","err","Error","status","error","accepts","type","env","NODE_ENV","body","message","expose","render"],"mappings":"AAAA,SAASA,YAAT,QAA6B,MAA7B;AACA,OAAOC,iBAAP,MAA8B,YAA9B;AACA,OAAOC,MAAP;;AAEA,MAAMC,SAAS,IAAID,MAAJ,CAAW,YAAX,CAAf;AACA,MAAME,oBAAoB,IAAIH,iBAAJ,CAAsB;AAC9CI,WAASC,QAAQC,GAAR;AADqC,CAAtB,CAA1B;;AAIA,gBAAe,qBAAOC,GAAP,EAAYC,IAAZ,EAAqB;AAClC,MAAI;AACF,UAAMA,MADJ;AAEH,GAFD,CAEE,OAAOC,GAAP,EAAY;;AASZ,YAPKA,GAOL,KAPUA,MAAM,IAAIC,KAAJ,CAAU,eAAV,CAOhB,GALI,OAAOD,GAAP,KAAe,QAKnB,KAL6BA,MAAM,IAAIC,KAAJ,CAAUD,GAAV,CAKnC,GAHAF,IAAII,MAAJ,GAAaF,IAAIE,MAAJ,IAAc,GAG3B,EAFAT,OAAOU,KAAP,CAAaH,GAAb,CAEA,EAAQF,IAAIM,OAAJ,CAAY,MAAZ,EAAoB,MAApB,EAA4B,MAA5B,CAAR;AACE,WAAK,MAAL;AAEE,YADAN,IAAIO,IAAJ,GAAW,YACX,EAAIT,QAAQU,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EACET,IAAIU,IAAJ,GAAWR,IAAIS,OADjB,MAEO,IAAIT,IAAIU,MAAR,EACLZ,IAAIU,IAAJ,GAAWR,IAAIS,OADV,MAGL,MAAMT,GAAN;;AAGF;;AAEF,WAAK,MAAL;AACEF,YAAIO,IAAJ,GAAW,kBADb,EAKIP,IAAIU,IALR,GAEMZ,QAAQU,GAAR,CAAYC,QAAZ,KAAyB,YAF/B,GAIaP,IAAIU,MAJjB,GAKe,EAAEP,OAAOH,IAAIS,OAAb,EALf,GAOe,EAAEN,OAAOb,aAAaQ,IAAII,MAAjB,CAAT,EAPf,GAGe,EAAEC,OAAOH,IAAIS,OAAb,EAHf;;;AAUE;;AAEF,WAAK,MAAL;AAEE,YADAX,IAAIO,IAAJ,GAAW,WACX,EAAIT,QAAQU,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EACET,IAAIU,IAAJ,GAAWd,kBAAkBiB,MAAlB,CAAyBX,GAAzB,CADb,MAEO,IAAIA,IAAIU,MAAR,EACLZ,IAAIU,IAAJ,GAAWR,IAAIS,OADV,MAGL,MAAMT,GAAN;;AAhCN;AAqCD;AACF,CAlDD","file":"index.js","sourcesContent":["import { STATUS_CODES } from 'http';\nimport ErrorHtmlRenderer from 'error-html';\nimport Logger from 'nightingale-logger/src';\n\nconst logger = new Logger('alp:errors');\nconst errorHtmlRenderer = new ErrorHtmlRenderer({\n  appPath: process.cwd(),\n});\n\nexport default async (ctx, next) => {\n  try {\n    await next();\n  } catch (err) {\n    // eslint-disable-next-line no-ex-assign\n    if (!err) err = new Error('Unknown error');\n    // eslint-disable-next-line no-ex-assign\n    if (typeof err === 'string') err = new Error(err);\n\n    ctx.status = err.status || 500;\n    logger.error(err);\n\n    switch (ctx.accepts('html', 'text', 'json')) {\n      case 'text':\n        ctx.type = 'text/plain';\n        if (process.env.NODE_ENV !== 'production') {\n          ctx.body = err.message;\n        } else if (err.expose) {\n          ctx.body = err.message;\n        } else {\n          throw err;\n        }\n\n        break;\n\n      case 'json':\n        ctx.type = 'application/json';\n        if (process.env.NODE_ENV !== 'production') {\n          ctx.body = { error: err.message };\n        } else if (err.expose) {\n          ctx.body = { error: err.message };\n        } else {\n          ctx.body = { error: STATUS_CODES[ctx.status] };\n        }\n\n        break;\n\n      case 'html':\n        ctx.type = 'text/html';\n        if (process.env.NODE_ENV !== 'production') {\n          ctx.body = errorHtmlRenderer.render(err);\n        } else if (err.expose) {\n          ctx.body = err.message;\n        } else {\n          throw err;\n        }\n\n        break;\n    }\n  }\n};\n"]}