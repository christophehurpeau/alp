{"version":3,"sources":["../src/index.js"],"names":["logger","errorHtmlRenderer","ctx","next","err","Error","status","error","accepts","type","process","env","NODE_ENV","body","message","expose","parsedError","render"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,MAAMA,SAAS,gCAAW,YAAX,CAAf;AACA,MAAMC,oBAAoB,4BAA1B;;;+BAEe,WAAgBC,GAAhB,EAAqBC,IAArB,EAA2B;AACxC,QAAI;AACF,YAAMA,MAAN;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZ;AACA,UAAI,CAACA,GAAL,EAAUA,MAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACV;AACA,UAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6BA,MAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;;AAE7BF,UAAII,MAAJ,GAAaF,IAAIE,MAAJ,IAAc,GAA3B;AACAN,aAAOO,KAAP,CAAaH,GAAb;;AAEA,cAAQF,IAAIM,OAAJ,CAAY,MAAZ,EAAoB,MAApB,EAA4B,MAA5B,CAAR;AACE,aAAK,MAAL;AACEN,cAAIO,IAAJ,GAAW,YAAX;AACA,cAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCV,gBAAIW,IAAJ,GAAWT,IAAIU,OAAf;AACD,WAFD,MAEO,IAAIV,IAAIW,MAAR,EAAgB;AACrBb,gBAAIW,IAAJ,GAAWT,IAAIU,OAAf;AACD,WAFM,MAEA;AACL,kBAAMV,GAAN;AACD;;AAED;;AAEF,aAAK,MAAL;AACEF,cAAIO,IAAJ,GAAW,kBAAX;AACA,cAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCV,gBAAIW,IAAJ,GAAW,EAAEN,OAAOH,IAAIU,OAAb,EAAX;AACD,WAFD,MAEO,IAAIV,IAAIW,MAAR,EAAgB;AACrBb,gBAAIW,IAAJ,GAAW,EAAEN,OAAOH,IAAIU,OAAb,EAAX;AACD,WAFM,MAEA;AACLZ,gBAAIW,IAAJ,GAAW,EAAEN,OAAO,mBAAaL,IAAII,MAAjB,CAAT,EAAX;AACD;;AAED;;AAEF,aAAK,MAAL;AACEJ,cAAIO,IAAJ,GAAW,WAAX;AACA,cAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,kBAAMI,cAAc,qBAAWZ,GAAX,CAApB;AACAF,gBAAIW,IAAJ,GAAWZ,kBAAkBgB,MAAlB,CAAyBD,WAAzB,CAAX;AACD,WAHD,MAGO,IAAIZ,IAAIW,MAAR,EAAgB;AACrBb,gBAAIW,IAAJ,GAAWT,IAAIU,OAAf;AACD,WAFM,MAEA;AACL,kBAAMV,GAAN;AACD;;AAED;AApCJ;AAsCD;AACF,G","file":"index.js","sourcesContent":["import { STATUS_CODES } from 'http';\nimport { parse as parseError } from 'alouette/src';\nimport ErrorHtmlRenderer from 'alouette/src/HtmlRenderer';\nimport Logger from 'nightingale-logger/src';\n\nconst logger = new Logger('alp:errors');\nconst errorHtmlRenderer = new ErrorHtmlRenderer();\n\nexport default async function (ctx, next) {\n  try {\n    await next();\n  } catch (err) {\n    // eslint-disable-next-line no-ex-assign\n    if (!err) err = new Error('Unknown error');\n    // eslint-disable-next-line no-ex-assign\n    if (typeof err === 'string') err = new Error(err);\n\n    ctx.status = err.status || 500;\n    logger.error(err);\n\n    switch (ctx.accepts('html', 'text', 'json')) {\n      case 'text':\n        ctx.type = 'text/plain';\n        if (process.env.NODE_ENV !== 'production') {\n          ctx.body = err.message;\n        } else if (err.expose) {\n          ctx.body = err.message;\n        } else {\n          throw err;\n        }\n\n        break;\n\n      case 'json':\n        ctx.type = 'application/json';\n        if (process.env.NODE_ENV !== 'production') {\n          ctx.body = { error: err.message };\n        } else if (err.expose) {\n          ctx.body = { error: err.message };\n        } else {\n          ctx.body = { error: STATUS_CODES[ctx.status] };\n        }\n\n        break;\n\n      case 'html':\n        ctx.type = 'text/html';\n        if (process.env.NODE_ENV !== 'production') {\n          const parsedError = parseError(err);\n          ctx.body = errorHtmlRenderer.render(parsedError);\n        } else if (err.expose) {\n          ctx.body = err.message;\n        } else {\n          throw err;\n        }\n\n        break;\n    }\n  }\n}\n"]}