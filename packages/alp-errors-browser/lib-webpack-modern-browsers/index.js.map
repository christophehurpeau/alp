{"version":3,"sources":["../src/index.js"],"names":["Logger","logger","ctx","next","err","Error","status","error","expose","body","message"],"mappings":";;AACA;AACA,OAAOA,MAAP;;AAEA,IAAMC,SAAS,IAAID,MAAJ,CAAW,YAAX,CAAf;AACA;;AAEA;AAAA,+BAAe,WAAgBE,GAAhB,EAAqBC,IAArB,EAA2B;AACxC,QAAI;AACF,YAAMA,MAAN;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZ;AACA,UAAI,CAACA,GAAL,EAAUA,MAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACV;AACA,UAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6BA,MAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;;AAE7BF,UAAII,MAAJ,GAAaF,IAAIE,MAAJ,IAAc,GAA3B;;AAUEL,aAAOM,KAAP,CAAaH,GAAb;AACA,UAAIA,IAAII,MAAR,EAAgB;AACdN,YAAIO,IAAJ,GAAWL,IAAIM,OAAf;AACD,OAFD,MAEO;AACL,cAAMN,GAAN;AACD;AAEJ;AACF,GA3BD;;AAAA;AAAA;AAAA;AAAA","file":"index.js","sourcesContent":["import { parse as parseError } from 'alouette';\n// import ErrorHtmlRenderer from 'alouette/lib/HtmlRenderer';\nimport Logger from 'nightingale-logger/src';\n\nconst logger = new Logger('alp:errors');\n// const errorHtmlRenderer = new ErrorHtmlRenderer();\n\nexport default async function (ctx, next) {\n  try {\n    await next();\n  } catch (err) {\n    // eslint-disable-next-line no-ex-assign\n    if (!err) err = new Error('Unknown error');\n    // eslint-disable-next-line no-ex-assign\n    if (typeof err === 'string') err = new Error(err);\n\n    ctx.status = err.status || 500;\n\n    if (!PRODUCTION) {\n      const parsedError = parseError(err);\n      logger.error(parsedError);\n      // ctx.body = errorHtmlRenderer.render(parsedError);\n      ctx.body = parsedError.stack;\n      // eslint-disable-next-line no-debugger, no-restricted-syntax\n      debugger;\n    } else {\n      logger.error(err);\n      if (err.expose) {\n        ctx.body = err.message;\n      } else {\n        throw err;\n      }\n    }\n  }\n}\n"]}