{"version":3,"file":"index-browser-dev.es.js","sources":["../src/index.ts"],"sourcesContent":["import { PRODUCTION } from 'pob-babel';\nimport ErrorHtmlRenderer from 'error-html';\nimport Logger from 'nightingale-logger';\nimport { Context, Middleware, HtmlError } from 'alp-types';\n\nconst logger = new Logger('alp:errors');\nconst errorHtmlRenderer = new ErrorHtmlRenderer();\n\nconst createErrorInstanceIfNeeded = (\n  err: Error | string | undefined | null | HtmlError,\n): Error | HtmlError => {\n  if (!err) return new Error('Unknown error');\n  if (typeof err === 'string') return new Error(err);\n  return err;\n};\n\nconst errorMiddleware: Middleware = async function(ctx: Context, next) {\n  try {\n    await next();\n  } catch (err) {\n    const errInstance: any = createErrorInstanceIfNeeded(err);\n\n    ctx.status = errInstance.status ? errInstance.status : 500;\n\n    logger.error(errInstance);\n\n    if (!PRODUCTION) {\n      ctx.body = errorHtmlRenderer.render(errInstance);\n    } else if (errInstance.expose) {\n      ctx.body = errInstance.message;\n    } else {\n      throw errInstance;\n    }\n  }\n};\n\nexport default errorMiddleware;\n"],"names":["logger","Logger","errorHtmlRenderer","ErrorHtmlRenderer","createErrorInstanceIfNeeded","err","Error","errorMiddleware","ctx","next","errInstance","status","error","body","render"],"mappings":";;;;AAKA,IAAMA,MAAM,GAAG,IAAIC,MAAJ,CAAW,YAAX,CAAf;AACA,IAAMC,iBAAiB,GAAG,IAAIC,iBAAJ,EAA1B;;AAEA,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CAClCC,GADkC,EAEZ;MAClB,CAACA,GAAL,EAAU,OAAO,IAAIC,KAAJ,CAAU,eAAV,CAAP;MACN,OAAOD,GAAP,KAAe,QAAnB,EAA6B,OAAO,IAAIC,KAAJ,CAAUD,GAAV,CAAP;SACtBA,GAAP;CALF;;AAQA,IAAME,eAA2B,GAAG,SAA9BA,eAA8B,CAAeC,GAAf,EAA6BC,IAA7B;;;;;;;;2CAE1BA,IAAI,EAFsB;;;;;;;;;UAI1BC,WAJ0B,GAIPN,2BAA2B,aAJpB;UAMhCI,GAAG,CAACG,MAAJ,GAAaD,WAAW,CAACC,MAAZ,GAAqBD,WAAW,CAACC,MAAjC,GAA0C,GAAvD;UAEAX,MAAM,CAACY,KAAP,CAAaF,WAAb;UAGEF,GAAG,CAACK,IAAJ,GAAWX,iBAAiB,CAACY,MAAlB,CAAyBJ,WAAzB,CAAX;;;;;;;;CAXN;;;;"}