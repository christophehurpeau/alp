{"version":3,"sources":["../../src/pob-build-plugins/stylus.js"],"names":["stylesPath","module","exports","extension","destExtension","transform","content","src","relative","cwd","fileName","startsWith","substr","length","includes","Promise","resolve","reject","style","toString","set","comment","render","err","css","code","map","sourcemap","generateScopedName","getJSON","cssFileName","json","JSON","stringify","replace","process","from","catch"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,aAAc,UAAD,SAA0B,GAA7C;;AAEAC,OAAOC,OAAP,GAAiB;AACfC,aAAW,MADI;AAEf;AACAC,iBAAe,SAHA;;AAKfC,YAAUC,OAAV,QAA2C;AAAA,QAAtBC,GAAsB,QAAtBA,GAAsB;AAAA,QAAjBC,QAAiB,QAAjBA,QAAiB;AAAA,QAAPC,GAAO,QAAPA,GAAO;;AACzC,UAAMC,WAAW,oBAASF,QAAT,CAAjB;AACA,QAAIE,SAASC,UAAT,CAAoB,GAApB,CAAJ,EAA8B;;AAE9B,QAAIH,SAASG,UAAT,CAAoBX,UAApB,CAAJ,EAAqC;AACnC,UAAIQ,SAASI,MAAT,CAAgBZ,WAAWa,MAA3B,EAAmCC,QAAnC,WAAJ,EAAmE;;AAEnE,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,cAAMC,QAAQ,sBAAOZ,QAAQa,QAAR,EAAP,EACXC,GADW,CACP,UADO,EACKb,GADL,EAEXa,GAFW,CAEP,OAFO,oBAGXA,GAHW,CAGP,WAHO,EAGM,EAAEC,SAAS,IAAX,EAHN,CAAd;;AAKAH,cAAMI,MAAN,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzB,cAAID,GAAJ,EAAS,OAAON,OAAOM,GAAP,CAAP;;AAETP,kBAAQ,EAAES,MAAMD,GAAR,EAAaE,KAAKR,MAAMS,SAAxB,EAAR;AACD,SAJD;AAKD,OAXM,CAAP;AAYD;;AAED,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMjB,aAAa,gBAAKS,GAAL,EAAU,KAAV,EAAiB,QAAjB,CAAnB;AACA,4BAAOH,QAAQa,QAAR,EAAP,EACGC,GADH,CACO,UADP,EACmBb,GADnB,EAEGa,GAFH,CAEO,OAFP,EAEgB,CAACpB,UAAD,EAAa,cAAb,CAFhB,EAGGoB,GAHH,CAGO,WAHP,EAGoB,EAAEC,SAAS,IAAX,EAHpB,EAIGC,MAJH,CAIU,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpB,YAAID,GAAJ,EAAS,OAAON,OAAOM,GAAP,CAAP;;AAET,+BAAQ,CACN,8BAAe;AACbK,8BAAoB,kCADP;AAEbC,kBAAQC,WAAR,EAAqBC,IAArB,EAA2B;AACzBf,oBAAQ;AACNS,oBAAO,qBAAmBO,KAAKC,SAAL,CAAeF,IAAf,CAAqB,GAAzC,GACD,QAAMP,IAAIU,OAAJ,CAAY,OAAZ,EAAqB,KAArB,CAA4B;AAFjC,aAAR;AAID;AAPY,SAAf,CADM,CAAR,EAUGC,OAVH,CAUWX,GAVX,EAUgB,EAAEY,MAAM7B,GAAR,EAVhB,EAWG8B,KAXH,CAWSd,OAAON,OAAOM,GAAP,CAXhB;AAYD,OAnBH;AAoBD,KAtBM,CAAP;AAuBD;AAjDc,CAAjB","file":"stylus.js","sourcesContent":["import { basename, join, sep as segmentSeparator } from 'path';\nimport stylus from 'stylus';\nimport postcss from 'postcss';\nimport postcssModules from 'postcss-modules';\n\nconst stylesPath = `styles${segmentSeparator}`;\n\nmodule.exports = {\n  extension: 'styl',\n  // destExtension: 'css',\n  destExtension: 'styl.js',\n\n  transform(content, { src, relative, cwd }) {\n    const fileName = basename(relative);\n    if (fileName.startsWith('_')) return;\n\n    if (relative.startsWith(stylesPath)) {\n      if (relative.substr(stylesPath.length).includes(segmentSeparator)) return;\n\n      return new Promise((resolve, reject) => {\n        const style = stylus(content.toString())\n          .set('filename', src)\n          .set('paths', ['node_modules'])\n          .set('sourcemap', { comment: true });\n\n        style.render((err, css) => {\n          if (err) return reject(err);\n\n          resolve({ code: css, map: style.sourcemap });\n        });\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      const stylesPath = join(cwd, 'src', 'styles');\n      stylus(content.toString())\n        .set('filename', src)\n        .set('paths', [stylesPath, 'node_modules'])\n        .set('sourcemap', { comment: true })\n        .render((err, css) => {\n          if (err) return reject(err);\n\n          postcss([\n            postcssModules({\n              generateScopedName: '[name]__[local]__[hash:base64:5]',\n              getJSON(cssFileName, json) {\n                resolve({\n                  code: `module.exports = ${JSON.stringify(json)}`\n                    + `/*\\n${css.replace(/\\*\\//g, '*-/')}*/`,\n                });\n              },\n            }),\n          ]).process(css, { from: src })\n            .catch(err => reject(err));\n        });\n    });\n  },\n};\n\n"]}