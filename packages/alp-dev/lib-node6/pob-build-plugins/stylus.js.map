{"version":3,"sources":["../../src/pob-build-plugins/stylus.js"],"names":["stylesPath","module","exports","extension","destExtension","transform","content","src","relative","cwd","fileName","startsWith","substr","length","includes","Promise","resolve","reject","err","matches","all","map","match","then","style","toString","set","comment","render","css","cssPath","slice","sourcemap","catch","generateScopedName","getJSON","cssFileName","json","code","JSON","stringify","process","from"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,aAAc,UAAD,SAA0B,GAA7C;;AAEAC,OAAOC,OAAP,GAAiB;AACfC,aAAW,MADI;AAEf;AACAC,iBAAe,SAHA;;AAKfC,YAAUC,OAAV,EAAmB,EAAEC,GAAF,EAAOC,QAAP,EAAiBC,GAAjB,EAAnB,EAA2C;AACzC,UAAMC,WAAW,oBAASF,QAAT,CAAjB;AACA,QAAIE,SAASC,UAAT,CAAoB,GAApB,CAAJ,EAA8B;;AAE9B,QAAIH,SAASG,UAAT,CAAoBX,UAApB,CAAJ,EAAqC;AACnC,UAAIQ,SAASI,MAAT,CAAgBZ,WAAWa,MAA3B,EAAmCC,QAAnC,WAAJ,EAAmE;;AAEnE,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,4BAAK,uBAAL,EAA8B,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC9C,cAAID,GAAJ,EAAS,OAAOD,OAAOC,GAAP,CAAP;;AAETH,kBAAQK,GAAR,CAAYD,QAAQE,GAAR,CAAaC,KAAD,IACtB,wBAASA,KAAT,EAAgBC,IAAhB,CAAsBjB,OAAD,IAAa;AAChC,gBAAIY,GAAJ,EAAS,OAAOD,OAAOC,GAAP,CAAP;;AAET,kBAAMM,QAAQ,sBAAOlB,QAAQmB,QAAR,EAAP,EACXC,GADW,CACP,UADO,EACKnB,GADL,EAEXmB,GAFW,CAEP,aAFO,EAEQ,IAFR,EAGXA,GAHW,CAGP,OAHO,oBAIXA,GAJW,CAIP,WAJO,EAIM,EAAEC,SAAS,IAAX,EAJN,CAAd;;AAMAH,kBAAMI,MAAN,CAAa,CAACV,GAAD,EAAMW,GAAN,KAAc;AACzB,kBAAIX,GAAJ,EAAS,OAAOD,OAAOC,GAAP,CAAP;;AAET,oBAAMY,UAAW,WAASR,MAAMS,KAAN,CAAY,cAAclB,MAA1B,EAAkC,CAAC,OAAOA,MAA1C,CAAkD,MAA5E;;AAEAE,sBAAQK,GAAR,CAAY,CACV,yBAAUU,OAAV,EAAmBD,GAAnB,CADU,EAEV,yBAAW,IAAEC,OAAQ,OAArB,EAA4BN,MAAMQ,SAAlC,CAFU,CAAZ,EAGGT,IAHH,CAGQP,OAHR,EAGiBiB,KAHjB,CAGuBhB,MAHvB;AAID,aATD;AAUD,WAnBD,CADU,CAAZ,EAqBIM,IArBJ,CAqBSP,OArBT,EAqBkBiB,KArBlB,CAqBwBhB,MArBxB;AAsBD,SAzBD;AA0BD,OA3BM,CAAP;AA4BD;;AAED,WAAO,IAAIF,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMjB,aAAa,gBAAKS,GAAL,EAAU,KAAV,EAAiB,QAAjB,CAAnB;AACA,4BAAOH,QAAQmB,QAAR,EAAP,EACGC,GADH,CACO,UADP,EACmBnB,GADnB,EAEGmB,GAFH,CAEO,aAFP,EAEsB,IAFtB,EAGGA,GAHH,CAGO,OAHP,EAGgB,CAAC1B,UAAD,EAAa,cAAb,CAHhB,EAIG0B,GAJH,CAIO,WAJP,EAIoB,EAAEC,SAAS,IAAX,EAJpB,EAKGC,MALH,CAKU,CAACV,GAAD,EAAMW,GAAN,KAAc;AACpB,YAAIX,GAAJ,EAAS,OAAOD,OAAOC,GAAP,CAAP;;AAET,+BAAQ,CACN,8BAAe;AACbgB,8BAAoB,kCADP;AAEbC,kBAAQC,WAAR,EAAqBC,IAArB,EAA2B;AACzBrB,oBAAQ;AACNsB,oBAAO,qBAAmBC,KAAKC,SAAL,CAAeH,IAAf,CAAqB;AADzC,aAAR;AAID;AAPY,SAAf,CADM,CAAR,EAUGI,OAVH,CAUWZ,GAVX,EAUgB,EAAEa,MAAMnC,GAAR,EAVhB,EAWG0B,KAXH,CAWSf,OAAOD,OAAOC,GAAP,CAXhB;AAYD,OApBH;AAqBD,KAvBM,CAAP;AAwBD;AAlEc,CAAjB","file":"stylus.js","sourcesContent":["import readFile from 'pob-babel/lib/utils/readFile';\nimport writeFile from 'pob-babel/lib/utils/writeFile';\nimport { basename, join, sep as segmentSeparator } from 'path';\nimport glob from 'glob';\nimport stylus from 'stylus';\nimport postcss from 'postcss';\nimport postcssModules from 'postcss-modules';\n\nconst stylesPath = `styles${segmentSeparator}`;\n\nmodule.exports = {\n  extension: 'styl',\n  // destExtension: 'css',\n  destExtension: 'styl.js',\n\n  transform(content, { src, relative, cwd }) {\n    const fileName = basename(relative);\n    if (fileName.startsWith('_')) return;\n\n    if (relative.startsWith(stylesPath)) {\n      if (relative.substr(stylesPath.length).includes(segmentSeparator)) return;\n\n      return new Promise((resolve, reject) => {\n        glob('src/styles/!(_)*.styl', (err, matches) => {\n          if (err) return reject(err);\n\n          Promise.all(matches.map((match) => (\n            readFile(match).then((content) => {\n              if (err) return reject(err);\n\n              const style = stylus(content.toString())\n                .set('filename', src)\n                .set('include css', true)\n                .set('paths', ['node_modules'])\n                .set('sourcemap', { comment: true });\n\n              style.render((err, css) => {\n                if (err) return reject(err);\n\n                const cssPath = `public/${match.slice('src/styles/'.length, -'styl'.length)}css`;\n\n                Promise.all([\n                  writeFile(cssPath, css),\n                  writeFile(`${cssPath}.map`, style.sourcemap),\n                ]).then(resolve).catch(reject);\n              });\n            })\n          ))).then(resolve).catch(reject);\n        });\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      const stylesPath = join(cwd, 'src', 'styles');\n      stylus(content.toString())\n        .set('filename', src)\n        .set('include css', true)\n        .set('paths', [stylesPath, 'node_modules'])\n        .set('sourcemap', { comment: true })\n        .render((err, css) => {\n          if (err) return reject(err);\n\n          postcss([\n            postcssModules({\n              generateScopedName: '[name]__[local]__[hash:base64:5]',\n              getJSON(cssFileName, json) {\n                resolve({\n                  code: `module.exports = ${JSON.stringify(json)}`,\n                    // + `/*\\n${css.replace(/\\*\\//g, '*-/')}*/`,\n                });\n              },\n            }),\n          ]).process(css, { from: src })\n            .catch(err => reject(err));\n        });\n    });\n  },\n};\n\n"]}