{"version":3,"sources":["../../src/watch/index.js"],"names":["configBuild","startProxyPort","browserSyncStartPort","startAppPort","resolve","Promise","all","findAPortNotInUse","build","then","proxyPort","port","Error","autoRestart","args","require","start","catch","err","console","log","stack"],"mappings":";;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;IAAYA,W;;;;;;AAPZ;AASA,MAAMC,iBAAiB,uBAAKC,oBAAL,IAA6B,IAApD;AAHA;;AAIA,MAAMC,eAAe,uBAAKA,YAAL,IAAqB,IAA1C;;AAEA,6BAAU,UAAS,eAAKC,OAAL,CAAa,QAAb,CAAuB,MAAK,eAAKA,OAAL,CAAa,OAAb,CAAsB,IAArE;;AAEAC,QAAQC,GAAR,CAAY,CACV,sBAAYC,iBAAZ,CAA8BN,cAA9B,EAA8CA,iBAAiB,EAA/D,CADU,EAEV,sBAAYM,iBAAZ,CAA8BJ,YAA9B,EAA4CA,eAAe,EAA3D,CAFU,EAGVH,YAAYQ,KAAZ,EAHU,CAAZ,EAKGC,IALH,CAKQ,CAAC,CAACC,SAAD,EAAYC,IAAZ,CAAD,KAAuB;AAC3B,MAAID,cAAcC,IAAlB,EAAwB;AACtB,UAAM,IAAIC,KAAJ,CAAW,sDAAqDD,IAAK,EAArE,CAAN;AACD;;AAED,mCAAY;AACVE,iBAAa,IADH;AAEVC,UAAM,CAACC,QAAQX,OAAR,CAAgB,QAAhB,CAAD,EAA4B,QAA5B,EAAsCO,IAAtC;AAFI,GAAZ,EAGGK,KAHH;;AAKA,mCAAY;AACVH,iBAAa,IADH;AAEVC,UAAM,CAACC,QAAQX,OAAR,CAAgB,WAAhB,CAAD,EAA+B,QAA/B,EAAyCO,IAAzC,EAA+C,cAA/C,EAA+DD,SAA/D;AAFI,GAAZ,EAGGM,KAHH;AAID,CAnBH,EAoBGC,KApBH,CAoBSC,OAAOC,QAAQC,GAAR,CAAYF,IAAIG,KAAhB,CApBhB","file":"index.js","sourcesContent":["/* eslint-disable global-require */\nimport { execSync } from 'child_process';\nimport path from 'path';\nimport portscanner from 'portscanner';\nimport argv from 'minimist-argv';\nimport createChild from 'springbokjs-daemon/src';\n// import watchServer from './server';\nimport * as configBuild from '../config-build';\n\nconst startProxyPort = argv.browserSyncStartPort || 3000;\nconst startAppPort = argv.startAppPort || 3050;\n\nexecSync(`rm -Rf ${path.resolve('public')}/* ${path.resolve('build')}/*`);\n\nPromise.all([\n  portscanner.findAPortNotInUse(startProxyPort, startProxyPort + 49),\n  portscanner.findAPortNotInUse(startAppPort, startAppPort + 49),\n  configBuild.build(),\n])\n  .then(([proxyPort, port]) => {\n    if (proxyPort === port) {\n      throw new Error(`\"proxyPort\" and \"port\" cannot have the same value: ${port}`);\n    }\n\n    createChild({\n      autoRestart: true,\n      args: [require.resolve('./node'), '--port', port],\n    }).start();\n\n    createChild({\n      autoRestart: true,\n      args: [require.resolve('./browser'), '--port', port, '--proxy-port', proxyPort],\n    }).start();\n  })\n  .catch(err => console.log(err.stack));\n"]}