{"version":3,"sources":["../../src/utils/loadConfigFile.js"],"names":[],"mappings":";;eAAyB,QAAQ,IAAR,C;;MAAjB,Y,YAAA,Y;;AACR,MAAM,OAAO,QAAQ,MAAR,CAAb;;gBACkC,QAAQ,SAAR,C;;MAAhB,W,aAAV,Q;;;AAER,OAAO,OAAP,GAAiB,SAAS,cAAT,CAAwB,OAAxB,EAAiC,IAAjC,EAAuC,OAAvC,EAAgD;AAC/D,MAAI,OAAO,YAAY,OAAZ,KAAwB,EAAnC;;AAEA,QAAM,SAAS,KAAK,MAAL,IAAe,EAA9B;AACA,MAAI,SAAS,QAAb,EAAuB;AACrB,WAAO,MAAP,CAAc,MAAd,EAAsB,KAAK,MAAL,IAAe,EAArC;AACD,GAFD,MAEO,IAAI,SAAS,SAAb,EAAwB;AAC7B,WAAO,MAAP,CAAc,MAAd,EAAsB,KAAK,OAAL,IAAgB,EAAtC;AACD,GAFM,MAEA;AACL,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,MAAI,KAAK,OAAT,EAAkB;AAChB,UAAM,eAAe,KAAK,OAAL,CAAa,GAAb,CAAiB;AAAA,aAAe,KAAK,OAAL,CAAa,OAAb,EAAsB,WAAtB,CAAf;AAAA,KAAjB,CAArB;AACA,iBACG,GADH,CACO;AAAA,aAAe,aAAa,WAAb,CAAf;AAAA,KADP,EAEG,GAFH,CAEO,CAAC,OAAD,EAAU,KAAV;AAAA,aAAoB,eAAe,OAAf,EAAwB,IAAxB,EAA8B,KAAK,OAAL,CAAa,aAAa,KAAb,CAAb,CAA9B,CAApB;AAAA,KAFP,EAGG,OAHH,CAGW,iBAAiB;AACxB,aAAO,IAAP,CAAY,aAAZ,EAA2B,OAA3B,CAAmC,OAAO;AACxC,YAAI,EAAE,OAAO,MAAT,CAAJ,EAAsB;AACpB,iBAAO,GAAP,IAAc,cAAc,GAAd,CAAd;AACA;AACD;AACD,YAAI,MAAM,OAAN,CAAc,OAAO,GAAP,CAAd,CAAJ,EAAgC;AAC9B,iBAAO,GAAP,EAAY,IAAZ,CAAiB,cAAc,GAAd,CAAjB;AACD,SAFD,MAEO,IAAI,OAAO,OAAO,GAAP,CAAP,KAAuB,QAA3B,EAAqC;AAC1C,iBAAO,MAAP,CAAc,OAAO,GAAP,CAAd,EAA2B,cAAc,GAAd,CAA3B;AACD,SAFM,MAEA;AACL,gBAAM,IAAI,KAAJ,CAAW,yBAAuB,GAAI,mBAAgB,aAAa,GAAb,CAAkB,GAAxE,CAAN;AACD;AACF,OAZD;AAaD,KAjBH;AAkBD;;AAED,SAAO,MAAP;AACD,CAnCD","file":"loadConfigFile.js","sourcesContent":["const { readFileSync } = require('fs');\nconst path = require('path');\nconst { safeLoad: saveLoadYml } = require('js-yaml');\n\nmodule.exports = function loadConfigFile(content, dest, dirname) {\n  let data = saveLoadYml(content) || {};\n\n  const config = data.common || {};\n  if (dest === 'server') {\n    Object.assign(config, data.server || {});\n  } else if (dest === 'browser') {\n    Object.assign(config, data.browser || {});\n  } else {\n    throw new Error('gulp-config: unknown destination');\n  }\n\n  if (data.include) {\n    const includePaths = data.include.map(includePath => path.resolve(dirname, includePath));\n    includePaths\n      .map(includePath => readFileSync(includePath))\n      .map((content, index) => loadConfigFile(content, dest, path.dirname(includePaths[index])))\n      .forEach(includeConfig => {\n        Object.keys(includeConfig).forEach(key => {\n          if (!(key in config)) {\n            config[key] = includeConfig[key];\n            return;\n          }\n          if (Array.isArray(config[key])) {\n            config[key].push(includeConfig[key]);\n          } else if (typeof config[key] === 'object') {\n            Object.assign(config[key], includeConfig[key]);\n          } else {\n            throw new Error(`Unexpected override \"${key}\", filename = ${includePaths[key]}`);\n          }\n        });\n      });\n  }\n\n  return config;\n};\n"]}