{"version":3,"sources":["../../src/utils/loadConfigFile.js"],"names":["require","readFileSync","path","saveLoadYml","safeLoad","module","exports","loadConfigFile","content","dest","dirname","data","config","common","Object","assign","server","browser","Error","include","includePaths","map","includePath","resolve","index","forEach","includeConfig","keys","key","Array","isArray","push"],"mappings":";;eAAyBA,QAAQ,IAAR,C;;MAAjBC,Y,YAAAA,Y;;AACR,MAAMC,OAAOF,QAAQ,MAAR,CAAb;;gBACkCA,QAAQ,SAAR,C;;MAAhBG,W,aAAVC,Q;;;AAERC,OAAOC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,IAAjC,EAAuCC,OAAvC,EAAgD;AAC/D,MAAIC,OAAOR,YAAYK,OAAZ,OAAX;;AAEA,QAAMI,SAASD,KAAKE,MAAL,MAAf;AACA,MAAIJ,SAAS,QAAb,EAAuB;AACrBK,WAAOC,MAAP,CAAcH,MAAd,EAAsBD,KAAKK,MAAL,MAAtB;AACD,GAFD,MAEO,IAAIP,SAAS,SAAb,EAAwB;AAC7BK,WAAOC,MAAP,CAAcH,MAAd,EAAsBD,KAAKM,OAAL,MAAtB;AACD,GAFM,MAEA;AACL,UAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,MAAIP,KAAKQ,OAAT,EAAkB;AAChB,UAAMC,eAAeT,KAAKQ,OAAL,CAAaE,GAAb,CAAiBC,eAAepB,KAAKqB,OAAL,CAAab,OAAb,EAAsBY,WAAtB,CAAhC,CAArB;AACAF,iBACGC,GADH,CACOC,eAAerB,aAAaqB,WAAb,CADtB,EAEGD,GAFH,CAEO,CAACb,OAAD,EAAUgB,KAAV,KAAoBjB,eAAeC,OAAf,EAAwBC,IAAxB,EAA8BP,KAAKQ,OAAL,CAAaU,aAAaI,KAAb,CAAb,CAA9B,CAF3B,EAGGC,OAHH,CAGYC,aAAD,IAAmB;AAC1BZ,aAAOa,IAAP,CAAYD,aAAZ,EAA2BD,OAA3B,CAAoCG,GAAD,IAAS;AAC1C,YAAI,EAAEA,OAAOhB,MAAT,CAAJ,EAAsB;AACpBA,iBAAOgB,GAAP,IAAcF,cAAcE,GAAd,CAAd;AACA;AACD;AACD,YAAIC,MAAMC,OAAN,CAAclB,OAAOgB,GAAP,CAAd,CAAJ,EAAgC;AAC9BhB,iBAAOgB,GAAP,EAAYG,IAAZ,CAAiBL,cAAcE,GAAd,CAAjB;AACD,SAFD,MAEO,IAAI,OAAOhB,OAAOgB,GAAP,CAAP,KAAuB,QAA3B,EAAqC;AAC1Cd,iBAAOC,MAAP,CAAcH,OAAOgB,GAAP,CAAd,EAA2BF,cAAcE,GAAd,CAA3B;AACD,SAFM,MAEA;AACL,gBAAM,IAAIV,KAAJ,CAAW,yBAAuBU,GAAI,mBAAgBR,aAAaQ,GAAb,CAAkB,GAAxE,CAAN;AACD;AACF,OAZD;AAaD,KAjBH;AAkBD;;AAED,SAAOhB,MAAP;AACD,CAnCD","file":"loadConfigFile.js","sourcesContent":["const { readFileSync } = require('fs');\nconst path = require('path');\nconst { safeLoad: saveLoadYml } = require('js-yaml');\n\nmodule.exports = function loadConfigFile(content, dest, dirname) {\n  let data = saveLoadYml(content) || {};\n\n  const config = data.common || {};\n  if (dest === 'server') {\n    Object.assign(config, data.server || {});\n  } else if (dest === 'browser') {\n    Object.assign(config, data.browser || {});\n  } else {\n    throw new Error('gulp-config: unknown destination');\n  }\n\n  if (data.include) {\n    const includePaths = data.include.map(includePath => path.resolve(dirname, includePath));\n    includePaths\n      .map(includePath => readFileSync(includePath))\n      .map((content, index) => loadConfigFile(content, dest, path.dirname(includePaths[index])))\n      .forEach((includeConfig) => {\n        Object.keys(includeConfig).forEach((key) => {\n          if (!(key in config)) {\n            config[key] = includeConfig[key];\n            return;\n          }\n          if (Array.isArray(config[key])) {\n            config[key].push(includeConfig[key]);\n          } else if (typeof config[key] === 'object') {\n            Object.assign(config[key], includeConfig[key]);\n          } else {\n            throw new Error(`Unexpected override \"${key}\", filename = ${includePaths[key]}`);\n          }\n        });\n      });\n  }\n\n  return config;\n};\n"]}