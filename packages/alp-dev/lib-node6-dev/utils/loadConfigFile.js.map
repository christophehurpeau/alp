{"version":3,"sources":["../../src/utils/loadConfigFile.js"],"names":[],"mappings":";;eAAyB,QAAQ,IAAR,C;;MAAjB,Y,YAAA,Y;;AACR,MAAM,OAAO,QAAQ,MAAR,CAAb;;gBACkC,QAAQ,SAAR,C;;MAAhB,W,aAAV,Q;;;AAER,OAAO,OAAP,GAAiB,SAAS,cAAT,CAAwB,OAAxB,EAAiC,IAAjC,EAAuC,OAAvC,EAAgD;AAC7D,QAAI,OAAO,YAAY,OAAZ,KAAwB,EAAnC;;AAEA,UAAM,SAAS,KAAK,MAAL,IAAe,EAA9B;AACA,QAAI,SAAS,QAAb,EAAuB;AACnB,eAAO,MAAP,CAAc,MAAd,EAAsB,KAAK,MAAL,IAAe,EAArC;AACH,KAFD,MAEO,IAAI,SAAS,SAAb,EAAwB;AAC3B,eAAO,MAAP,CAAc,MAAd,EAAsB,KAAK,OAAL,IAAgB,EAAtC;AACH,KAFM,MAEA;AACH,cAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACH;;AAED,QAAI,KAAK,OAAT,EAAkB;AACd,cAAM,eAAe,KAAK,OAAL,CAAa,GAAb,CAAiB;AAAA,mBAAe,KAAK,OAAL,CAAa,OAAb,EAAsB,WAAtB,CAAf;AAAA,SAAjB,CAArB;AACA,qBACK,GADL,CACS;AAAA,mBAAe,aAAa,WAAb,CAAf;AAAA,SADT,EAEK,GAFL,CAES,CAAC,OAAD,EAAU,KAAV;AAAA,mBAAoB,eAAe,OAAf,EAAwB,IAAxB,EAA8B,KAAK,OAAL,CAAa,aAAa,KAAb,CAAb,CAA9B,CAApB;AAAA,SAFT,EAGK,OAHL,CAGa,iBAAiB;AACtB,mBAAO,IAAP,CAAY,aAAZ,EAA2B,OAA3B,CAAmC,OAAO;AACtC,oBAAI,EAAE,OAAO,MAAT,CAAJ,EAAsB;AAClB,2BAAO,GAAP,IAAc,cAAc,GAAd,CAAd;AACA;AACH;;AAED,oBAAI,MAAM,OAAN,CAAc,OAAO,GAAP,CAAd,CAAJ,EAAgC;AAC5B,2BAAO,GAAP,EAAY,IAAZ,CAAiB,cAAc,GAAd,CAAjB;AACH,iBAFD,MAEO,IAAI,OAAO,OAAO,GAAP,CAAP,KAAuB,QAA3B,EAAqC;AACxC,2BAAO,MAAP,CAAc,OAAO,GAAP,CAAd,EAA2B,cAAc,GAAd,CAA3B;AACH,iBAFM,MAEA;AACH,0BAAM,IAAI,KAAJ,CAAW,yBAAuB,GAAI,mBAAgB,aAAa,GAAb,CAAkB,GAAxE,CAAN;AACH;AACJ,aAbD;AAcH,SAlBL;AAmBH;;AAED,WAAO,MAAP;AACH,CApCD","file":"loadConfigFile.js","sourcesContent":["const { readFileSync } = require('fs');\nconst path = require('path');\nconst { safeLoad: saveLoadYml } = require('js-yaml');\n\nmodule.exports = function loadConfigFile(content, dest, dirname) {\n    let data = saveLoadYml(content) || {};\n\n    const config = data.common || {};\n    if (dest === 'server') {\n        Object.assign(config, data.server || {});\n    } else if (dest === 'browser') {\n        Object.assign(config, data.browser || {});\n    } else {\n        throw new Error('gulp-config: unknown destination');\n    }\n\n    if (data.include) {\n        const includePaths = data.include.map(includePath => path.resolve(dirname, includePath));\n        includePaths\n            .map(includePath => readFileSync(includePath))\n            .map((content, index) => loadConfigFile(content, dest, path.dirname(includePaths[index])))\n            .forEach(includeConfig => {\n                Object.keys(includeConfig).forEach(key => {\n                    if (!(key in config)) {\n                        config[key] = includeConfig[key];\n                        return;\n                    }\n\n                    if (Array.isArray(config[key])) {\n                        config[key].push(includeConfig[key]);\n                    } else if (typeof config[key] === 'object') {\n                        Object.assign(config[key], includeConfig[key]);\n                    } else {\n                        throw new Error(`Unexpected override \"${key}\", filename = ${includePaths[key]}`);\n                    }\n                });\n            });\n    }\n\n    return config;\n};\n"]}