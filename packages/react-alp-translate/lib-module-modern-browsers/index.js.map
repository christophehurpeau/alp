{"version":3,"sources":["../src/index.jsx"],"names":["PropTypes","TranslateComponent","context","id","as","AsType","children","props","translated","t","contextTypes","object","isRequired"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;;AAWA,MAAMC,qBAAqB,SAArBA,kBAAqB,OAEzB,EAAEC,OAAF,EAFyB,EAGtB;AAAA,MAFH,EAAEC,EAAF,EAAMC,IAAIC,SAAS,MAAnB,EAA2BC,QAA3B,EAEG;AAAA,MAFqCC,KAErC;;AACH,QAAMC,aAAaN,QAAQO,CAAR,CAAUN,EAAV,EAAcI,KAAd,CAAnB;;AAEA,MAAID,QAAJ,EAAc;AACZ,WAAOA,SAASE,UAAT,CAAP;AACD;;AAED,SACE;AAAC,UAAD;AAAA;AACGA;AADH,GADF;AAKD,CAfD;;AAiBAP,mBAAmBS,YAAnB,GAAkC;AAChCR,WAASF,UAAUW,MAAV,CAAiBC;AADM,CAAlC;;AAIA,eAAeX,kBAAf","file":"index.jsx","sourcesContent":["import PropTypes from 'prop-types';\n\ntype ChildrenCallbackType = (translated: string) => void;\n\ntype PropsType = {|\n  id: string,\n  as: ?string,\n  children: ?ChildrenCallbackType,\n  [string]: any,\n|};\n\nconst TranslateComponent = (\n  { id, as: AsType = 'span', children, ...props }: PropsType,\n  { context },\n) => {\n  const translated = context.t(id, props);\n\n  if (children) {\n    return children(translated);\n  }\n\n  return (\n    <AsType>\n      {translated}\n    </AsType>\n  );\n};\n\nTranslateComponent.contextTypes = {\n  context: PropTypes.object.isRequired,\n};\n\nexport default TranslateComponent;\n"]}