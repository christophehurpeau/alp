{"version":3,"sources":["../src/index.js"],"names":["existsSync","path","deprecate","Koa","compress","serve","_config","Config","errors","params","language","translate","_listen","Logger","findUp","logger","appDirname","dirname","process","argv","packagePath","cwd","Error","packageDirname","debug","packageConfig","require","buildedConfigPath","configPath","config","loadSync","Alp","constructor","options","srcDirname","normalize","Object","defineProperty","get","configurable","enumerable","certPath","publicPath","use","environment","env","production","servePublic","catchErrors","listen","then","server","_server","catch","err","error","close","emit","start","fn","success"],"mappings":"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","file":"index.js","sourcesContent":["import { existsSync } from 'fs';\nimport path from 'path';\nimport { deprecate } from 'util';\nimport Koa from 'koa';\nimport compress from 'koa-compress';\nimport serve from 'koa-static';\nimport _config, { Config } from 'alp-config/src';\nimport errors from 'alp-errors-node/src';\nimport params from 'alp-params/src';\nimport language from 'alp-language/src';\nimport translate from 'alp-translate';\nimport _listen from 'alp-listen/src';\nimport Logger from 'nightingale-logger/src';\nimport findUp from 'findup-sync';\n\nexport { Config } from 'alp-config';\n\nconst logger = new Logger('alp');\n\nexport const appDirname = path.dirname(process.argv[1]);\n\nconst packagePath = findUp('package.json', { cwd: appDirname });\nif (!packagePath) throw new Error(`Could not find package.json: \"${packagePath}\"`);\nexport const packageDirname = path.dirname(packagePath);\n\nlogger.debug('init', { appDirname, packageDirname });\n\n// eslint-disable-next-line import/no-dynamic-require, global-require\nexport const packageConfig = require(packagePath);\n\nconst buildedConfigPath = `${appDirname}/build/config/`;\nconst configPath = existsSync(buildedConfigPath) ? buildedConfigPath : `${appDirname}/config/`;\nexport const config = new Config(configPath);\nconfig.loadSync({ packageConfig });\n\nexport default class Alp extends Koa {\n  dirname: string;\n  packageDirname: string;\n  reduxReducers: Array<Function> = [];\n  reduxMiddlewares: Array<Function> = [];\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.dirname] directory of the application\n   * @param {string} [options.certPath] directory of the ssl certificates\n   * @param {string} [options.publicPath] directory of public files\n   * @param {Config} [options.config] alp-config object\n   * @param {Array} [options.argv] deprecated, list of overridable config by argv\n   */\n  constructor(options = {}) {\n    super();\n    if (options.packageDirname) {\n      throw new Error('options.packageDirname is deprecated');\n    }\n    if (options.config) {\n      throw new Error('options.config is deprecated');\n    }\n    if (options.srcDirname) {\n      throw new Error('options.srcDirname is deprecated');\n    }\n    if (options.dirname) {\n      throw new Error('options.dirname is deprecated');\n    }\n\n    this.dirname = path.normalize(appDirname);\n\n    Object.defineProperty(this, 'packageDirname', {\n      get: deprecate(() => packageDirname, 'packageDirname'),\n      configurable: false,\n      enumerable: false,\n    });\n\n    this.certPath = options.certPath || `${packageDirname}/config/cert`;\n    this.publicPath = options.publicPath || `${packageDirname}/public/`;\n\n    _config()(this, config);\n\n    params(this);\n    language(this);\n    translate('locales')(this);\n\n    this.use(compress());\n  }\n\n  get environment() {\n    deprecate(() => () => null, 'app.environment, use app.env instead')();\n    return this.env;\n  }\n\n  get production() {\n    deprecate(() => () => null, 'app.production, use global.PRODUCTION instead')();\n    return this.env === 'prod' || this.env === 'production';\n  }\n  servePublic() {\n    this.use(serve(this.publicPath)); // static files\n  }\n\n  catchErrors() {\n    this.use(errors);\n  }\n\n  listen() {\n    return _listen(this.certPath)(this).then(server => (this._server = server)).catch(err => {\n      logger.error(err);\n      throw err;\n    });\n  }\n\n  /**\n   * Close server and emit close event\n   */\n  close() {\n    if (this._server) {\n      this._server.close();\n      this.emit('close');\n    }\n  }\n\n  start(fn: Function) {\n    fn().then(() => logger.success('started')).catch(err => logger.error('start fail', { err }));\n  }\n}\n"]}