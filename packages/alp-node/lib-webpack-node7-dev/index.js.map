{"version":3,"sources":["../src/index.js"],"names":["deprecate","Koa","compress","serve","_config","Config","errors","params","language","translate","_listen","Logger","findUp","path","newController","logger","appDirname","dirname","process","argv","packagePath","cwd","Error","packageDirname","debug","packageConfig","require","config","loadSync","Alp","constructor","options","srcDirname","normalize","Object","defineProperty","get","configurable","enumerable","certPath","publicPath","use","browserStateTransformers","browserContextTransformers","initialBrowserContext","context","state","create","forEach","transformer","computeInitialContextForBrowser","app","registerBrowserContextTransformer","push","registerBrowserStateTransformer","registerBrowserStateTransformers","environment","env","production","servePublic","catchErrors","listen","then","server","_server","catch","err","error","close","emit","start","fn","success"],"mappings":"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","file":"index.js","sourcesContent":["import { deprecate } from 'util';\nimport Koa from 'koa';\nimport compress from 'koa-compress';\nimport serve from 'koa-static';\nimport _config, { Config } from 'alp-config/src';\nimport errors from 'alp-errors-node/src';\nimport params from 'alp-params/src';\nimport language from 'alp-language/src';\nimport translate from 'alp-translate';\nimport _listen from 'alp-listen/src';\nimport Logger from 'nightingale-logger/src';\nimport findUp from 'findup-sync';\nimport path from 'path';\n\nexport { Config } from 'alp-config';\nexport newController from 'alp-controller';\n\nconst logger = new Logger('alp');\n\nexport const appDirname = path.dirname(process.argv[1]);\n\nconst packagePath = findUp('package.json', { cwd: appDirname });\nif (!packagePath) throw new Error(`Could not find package.json: \"${packagePath}\"`);\nexport const packageDirname = path.dirname(packagePath);\n\nlogger.debug('init', { appDirname, packageDirname });\n\n// eslint-disable-next-line import/no-dynamic-require, global-require\nexport const packageConfig = require(packagePath);\nexport const config = new Config(`${appDirname}/config/`);\nconfig.loadSync({ packageConfig });\n\nexport default class Alp extends Koa {\n  dirname: string;\n  packageDirname: string;\n  browserStateTransformers: Array<Function>;\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.dirname] directory of the application\n   * @param {string} [options.certPath] directory of the ssl certificates\n   * @param {string} [options.publicPath] directory of public files\n   * @param {Config} [options.config] alp-config object\n   * @param {Array} [options.argv] deprecated, list of overridable config by argv\n   */\n  constructor(options = {}) {\n    super();\n    if (options.packageDirname) {\n      throw new Error('options.packageDirname is deprecated');\n    }\n    if (options.config) {\n      throw new Error('options.config is deprecated');\n    }\n    if (options.srcDirname) {\n      throw new Error('options.srcDirname is deprecated');\n    }\n    if (options.dirname) {\n      throw new Error('options.dirname is deprecated');\n    }\n\n    this.dirname = path.normalize(appDirname);\n\n    Object.defineProperty(this, 'packageDirname', {\n      get: deprecate(() => packageDirname, 'packageDirname'),\n      configurable: false,\n      enumerable: false,\n    });\n\n    this.certPath = options.certPath || `${this.packageDirname}/config/cert`;\n    this.publicPath = options.publicPath || `${this.packageDirname}/public/`;\n\n    _config()(this, config);\n\n    params(this);\n    language(this);\n    translate('locales')(this);\n\n    this.use(compress());\n\n    this.browserStateTransformers = [];\n    this.browserContextTransformers = [\n      (initialBrowserContext, context) => {\n        initialBrowserContext.state = Object.create(null);\n        this.browserStateTransformers.forEach(transformer => (\n          transformer(initialBrowserContext.state, context)\n        ));\n      },\n    ];\n\n    this.context.computeInitialContextForBrowser = function () {\n      const initialBrowserContext = Object.create(null);\n\n      this.app.browserContextTransformers.forEach(transformer => (\n        transformer(initialBrowserContext, this)\n      ));\n\n      return initialBrowserContext;\n    };\n  }\n\n  registerBrowserContextTransformer(transformer: Function) {\n    this.browserContextTransformers.push(transformer);\n  }\n\n  registerBrowserStateTransformer(transformer: Function) {\n    this.browserStateTransformers.push(transformer);\n  }\n\n  registerBrowserStateTransformers(transformer) {\n    deprecate(() => () => null, 'breaking: use registerBrowserStateTransformer instead')();\n    this.browserStateTransformers.push(transformer);\n  }\n\n  get environment() {\n    deprecate(() => () => null, 'app.environment, use app.env instead')();\n    return this.env;\n  }\n\n  get production() {\n    deprecate(() => () => null, 'app.production, use global.PRODUCTION instead')();\n    return this.env === 'prod' || this.env === 'production';\n  }\n  servePublic() {\n    this.use(serve(this.publicPath)); // static files\n  }\n\n  catchErrors() {\n    this.use(errors);\n  }\n\n  listen() {\n    return _listen(this.certPath)(this)\n      .then(server => this._server = server)\n      .catch(err => {\n        logger.error(err);\n        throw err;\n      });\n  }\n\n  /**\n   * Close server and emit close event\n   */\n  close() {\n    if (this._server) {\n      this._server.close();\n      this.emit('close');\n    }\n  }\n\n  start(fn: Function) {\n    fn()\n      .then(() => logger.success('started'))\n      .catch(err => logger.error('start fail', { err }));\n  }\n}\n"]}