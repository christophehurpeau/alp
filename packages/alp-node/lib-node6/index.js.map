{"version":3,"sources":["../src/index.js"],"names":["Config","default","MigrationsManager","logger","Alp","constructor","options","packageDirname","srcDirname","dirname","process","argv","normalize","packagePath","cwd","Error","Object","defineProperty","get","configurable","enumerable","certPath","publicPath","config","packageConfig","require","use","browserStateTransformers","browserContextTransformers","initialBrowserContext","context","state","create","forEach","transformer","computeInitialContextForBrowser","app","registerBrowserContextTransformer","push","registerBrowserStateTransformer","registerBrowserStateTransformers","migrate","migrationsManager","environment","env","production","servePublic","catchErrors","listen","then","server","_server","catch","err","error","close","emit","start","fn","success"],"mappings":";;;;;;;AAIA;;;;;sBAWSA,M;;;;;;;;;kDACAC,O;;;;AANT;;;;;0BAOSC,iB;;;;AAjBT;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAMA,MAAMC,SAAS,gCAAW,KAAX,CAAf;;AAEe,MAAMC,GAAN,uBAAsB;;AAMnC;;;;;;;;AAQAC,gBAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACxB;AACA,QAAIA,QAAQC,cAAZ,EAA4B,qBAAU,MAAM,MAAM,IAAtB,EAA4B,wBAA5B;AAC5B,QAAID,QAAQE,UAAZ,EAAwB;AACtB,2BAAU,MAAM,MAAM,IAAtB,EAA4B,yCAA5B;AACAF,cAAQG,OAAR,GAAkBH,QAAQE,UAA1B;AACD;AACD,QAAI,CAACF,QAAQG,OAAb,EAAsB;AACpBH,cAAQG,OAAR,GAAkB,eAAKA,OAAL,CAAaC,QAAQC,IAAR,CAAa,CAAb,CAAb,CAAlB;AACD;;AAED,SAAKF,OAAL,GAAe,eAAKG,SAAL,CAAeN,QAAQG,OAAvB,CAAf;;AAEA,UAAMI,cAAc,0BAAO,cAAP,EAAuB,EAAEC,KAAKR,QAAQG,OAAf,EAAvB,CAApB;AACA,QAAI,CAACI,WAAL,EAAkB,MAAM,IAAIE,KAAJ,CAAW,kCAAgCF,WAAY,IAAvD,CAAN;AAClB,UAAMN,iBAAiB,eAAKE,OAAL,CAAaI,WAAb,CAAvB;;AAEAG,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,gBAA5B,EAA8C;AAC5CC,WAAK,qBAAU,MAAMX,cAAhB,EAAgC,gBAAhC,CADuC;AAE5CY,oBAAc,KAF8B;AAG5CC,kBAAY;AAHgC,KAA9C;;AAMA,SAAKC,QAAL,GAAgBf,QAAQe,QAAR,IAAqB,IAAE,KAAKd,cAAe,eAA3D;AACA,SAAKe,UAAL,GAAkBhB,QAAQgB,UAAR,IAAuB,IAAE,KAAKf,cAAe,WAA/D;;AAEA,QAAI,CAACD,QAAQiB,MAAb,EAAqB;AACnB,2BAAU,MAAM,MAAM,IAAtB,EAA4B,qCAA5B;AACA;AACA,YAAMC,gBAAgBC,QAAS,IAAEnB,QAAQC,cAAe,gBAAlC,CAAtB;AACA,+BAAQ,IAAE,KAAKE,OAAQ,UAAvB,EAAiC,EAAEe,aAAF,EAAiBb,MAAML,QAAQK,IAA/B,EAAjC,EAAwE,IAAxE;AACD,KALD,MAKO;AACL,iCAAS,IAAT,EAAeL,QAAQiB,MAAvB;AACD;;AAED,6BAAO,IAAP;AACA,+BAAS,IAAT;AACA,gCAAU,SAAV,EAAqB,IAArB;;AAEA,SAAKG,GAAL,CAAS,4BAAT;;AAEA,SAAKC,wBAAL,GAAgC,EAAhC;AACA,SAAKC,0BAAL,GAAkC,CAChC,CAACC,qBAAD,EAAwBC,OAAxB,KAAoC;AAClCD,4BAAsBE,KAAtB,GAA8Bf,OAAOgB,MAAP,CAAc,IAAd,CAA9B;AACA,WAAKL,wBAAL,CAA8BM,OAA9B,CAAsCC,eACpCA,YAAYL,sBAAsBE,KAAlC,EAAyCD,OAAzC,CADF;AAGD,KAN+B,CAAlC;;AASA,SAAKA,OAAL,CAAaK,+BAAb,GAA+C,YAAY;AACzD,YAAMN,wBAAwBb,OAAOgB,MAAP,CAAc,IAAd,CAA9B;;AAEA,WAAKI,GAAL,CAASR,0BAAT,CAAoCK,OAApC,CAA4CC,eAC1CA,YAAYL,qBAAZ,EAAmC,IAAnC,CADF;;AAIA,aAAOA,qBAAP;AACD,KARD;AASD;;AAEDQ,oCAAkCH,WAAlC,EAAyD;AACvD,SAAKN,0BAAL,CAAgCU,IAAhC,CAAqCJ,WAArC;AACD;;AAEDK,kCAAgCL,WAAhC,EAAuD;AACrD,SAAKP,wBAAL,CAA8BW,IAA9B,CAAmCJ,WAAnC;AACD;;AAEDM,mCAAiCN,WAAjC,EAA8C;AAC5C,yBAAU,MAAM,MAAM,IAAtB,EAA4B,uDAA5B;AACA,SAAKP,wBAAL,CAA8BW,IAA9B,CAAmCJ,WAAnC;AACD;;AAEDO,UAAQC,iBAAR,EAA2B;AACzB,WAAO,6BAAW;AAChBnB,cAAQ,KAAKA,MADG;AAEhBd,eAAU,IAAE,KAAKA,OAAQ,cAFT;AAGhBiC;AAHgB,KAAX,CAAP;AAKD;;AAED,MAAIC,WAAJ,GAAkB;AAChB,yBAAU,MAAM,MAAM,IAAtB,EAA4B,sCAA5B;AACA,WAAO,KAAKC,GAAZ;AACD;;AAED,MAAIC,UAAJ,GAAiB;AACf,yBAAU,MAAM,MAAM,IAAtB,EAA4B,+CAA5B;AACA,WAAO,KAAKD,GAAL,KAAa,MAAb,IAAuB,KAAKA,GAAL,KAAa,YAA3C;AACD;AACDE,gBAAc;AACZ,SAAKpB,GAAL,CAAS,yBAAM,KAAKJ,UAAX,CAAT,EADY,CACsB;AACnC;;AAEDyB,gBAAc;AACZ,SAAKrB,GAAL;AACD;;AAEDsB,WAAS;AACP,WAAO,yBAAQ,KAAK3B,QAAb,EAAuB,IAAvB,EACJ4B,IADI,CACCC,UAAU,KAAKC,OAAL,GAAeD,MAD1B,EAEJE,KAFI,CAEEC,OAAO;AACZlD,aAAOmD,KAAP,CAAaD,GAAb;AACA,YAAMA,GAAN;AACD,KALI,CAAP;AAMD;;AAED;;;AAGAE,UAAQ;AACN,QAAI,KAAKJ,OAAT,EAAkB;AAChB,WAAKA,OAAL,CAAaI,KAAb;AACA,WAAKC,IAAL,CAAU,OAAV;AACD;AACF;;AAEDC,QAAMC,EAAN,EAAoB;AAClBA,SACGT,IADH,CACQ,MAAM9C,OAAOwD,OAAP,CAAe,SAAf,CADd,EAEGP,KAFH,CAESC,OAAOlD,OAAOmD,KAAP,CAAa,YAAb,EAA2B,EAAED,GAAF,EAA3B,CAFhB;AAGD;AAzIkC;kBAAhBjD,G","file":"index.js","sourcesContent":["import { deprecate } from 'util';\nimport Koa from 'koa';\nimport compress from 'koa-compress';\nimport serve from 'koa-static';\nimport config from 'alp-config';\nimport errors from 'alp-errors-node';\nimport params from 'alp-params';\nimport language from 'alp-language';\nimport translate from 'alp-translate';\nimport _listen from 'alp-listen';\nimport migrations from 'alp-migrations';\nimport Logger from 'nightingale-logger';\nimport findUp from 'findup-sync';\nimport path from 'path';\n\nexport { Config } from 'alp-config';\nexport { default as newController } from 'alp-controller';\nexport { MigrationsManager } from 'alp-migrations';\n\nconst logger = new Logger('alp');\n\nexport default class Alp extends Koa {\n  dirname: string;\n  packageDirname: string;\n  browserStateTransformers: Array<Function>;\n  config;\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.dirname] directory of the application\n   * @param {string} [options.certPath] directory of the ssl certificates\n   * @param {string} [options.publicPath] directory of public files\n   * @param {Config} [options.config] alp-config object\n   * @param {Array} [options.argv] deprecated, list of overridable config by argv\n   */\n  constructor(options = {}) {\n    super();\n    if (options.packageDirname) deprecate(() => () => null, 'options.packageDirname')();\n    if (options.srcDirname) {\n      deprecate(() => () => null, 'options.srcDirname: use dirname instead')();\n      options.dirname = options.srcDirname;\n    }\n    if (!options.dirname) {\n      options.dirname = path.dirname(process.argv[1]);\n    }\n\n    this.dirname = path.normalize(options.dirname);\n\n    const packagePath = findUp('package.json', { cwd: options.dirname });\n    if (!packagePath) throw new Error(`Could not find package.json: \"${packagePath}\"`);\n    const packageDirname = path.dirname(packagePath);\n\n    Object.defineProperty(this, 'packageDirname', {\n      get: deprecate(() => packageDirname, 'packageDirname'),\n      configurable: false,\n      enumerable: false,\n    });\n\n    this.certPath = options.certPath || `${this.packageDirname}/config/cert`;\n    this.publicPath = options.publicPath || `${this.packageDirname}/public/`;\n\n    if (!options.config) {\n      deprecate(() => () => null, 'Alp options: missing options.config')();\n      // eslint-disable-next-line\n      const packageConfig = require(`${options.packageDirname}/package.json`);\n      config(`${this.dirname}/config`, { packageConfig, argv: options.argv })(this);\n    } else {\n      config()(this, options.config);\n    }\n\n    params(this);\n    language(this);\n    translate('locales')(this);\n\n    this.use(compress());\n\n    this.browserStateTransformers = [];\n    this.browserContextTransformers = [\n      (initialBrowserContext, context) => {\n        initialBrowserContext.state = Object.create(null);\n        this.browserStateTransformers.forEach(transformer => (\n          transformer(initialBrowserContext.state, context)\n        ));\n      },\n    ];\n\n    this.context.computeInitialContextForBrowser = function () {\n      const initialBrowserContext = Object.create(null);\n\n      this.app.browserContextTransformers.forEach(transformer => (\n        transformer(initialBrowserContext, this)\n      ));\n\n      return initialBrowserContext;\n    };\n  }\n\n  registerBrowserContextTransformer(transformer: Function) {\n    this.browserContextTransformers.push(transformer);\n  }\n\n  registerBrowserStateTransformer(transformer: Function) {\n    this.browserStateTransformers.push(transformer);\n  }\n\n  registerBrowserStateTransformers(transformer) {\n    deprecate(() => () => null, 'breaking: use registerBrowserStateTransformer instead')();\n    this.browserStateTransformers.push(transformer);\n  }\n\n  migrate(migrationsManager) {\n    return migrations({\n      config: this.config,\n      dirname: `${this.dirname}/migrations`,\n      migrationsManager,\n    });\n  }\n\n  get environment() {\n    deprecate(() => () => null, 'app.environment, use app.env instead')();\n    return this.env;\n  }\n\n  get production() {\n    deprecate(() => () => null, 'app.production, use global.PRODUCTION instead')();\n    return this.env === 'prod' || this.env === 'production';\n  }\n  servePublic() {\n    this.use(serve(this.publicPath)); // static files\n  }\n\n  catchErrors() {\n    this.use(errors);\n  }\n\n  listen() {\n    return _listen(this.certPath)(this)\n      .then(server => this._server = server)\n      .catch(err => {\n        logger.error(err);\n        throw err;\n      });\n  }\n\n  /**\n   * Close server and emit close event\n   */\n  close() {\n    if (this._server) {\n      this._server.close();\n      this.emit('close');\n    }\n  }\n\n  start(fn: Function) {\n    fn()\n      .then(() => logger.success('started'))\n      .catch(err => logger.error('start fail', { err }));\n  }\n}\n"]}