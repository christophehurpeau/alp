{"version":3,"sources":["../src/index.js"],"names":["Config","default","MigrationsManager","logger","Alp","constructor","options","packageDirname","process","cwd","srcDirname","dirname","Object","defineProperty","get","configurable","enumerable","config","packageConfig","require","argv","use","browserStateTransformers","browserContextTransformers","initialBrowserContext","context","state","create","forEach","transformer","computeInitialContextForBrowser","app","registerBrowserContextTransformer","push","registerBrowserStateTransformer","registerBrowserStateTransformers","migrate","migrationsManager","environment","env","production","servePublic","catchErrors","listen","then","server","_server","catch","err","error","close","emit"],"mappings":"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","file":"index.js","sourcesContent":["import { deprecate } from 'util';\nimport Koa from 'koa';\nimport compress from 'koa-compress';\nimport serve from 'koa-static';\nimport config from 'alp-config';\nimport errors from 'alp-errors-node';\nimport params from 'alp-params';\nimport language from 'alp-language';\nimport translate from 'alp-translate';\nimport _listen from 'alp-listen';\nimport migrations from 'alp-migrations';\nimport Logger from 'nightingale-logger';\n\nexport { Config } from 'alp-config';\nexport { default as newController } from 'alp-controller';\nexport { MigrationsManager } from 'alp-migrations';\n\nconst logger = new Logger('alp');\n\nexport default class Alp extends Koa {\n  dirname: string;\n  packageDirname: string;\n  browserStateTransformers: Array<Function>;\n  config;\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.srcDirname] directory of the application\n   * @param {Config} [options.config] alp-config object\n   * @param {string} [options.packageDirname] deprecated, directory of the package\n   * @param {Array} [options.argv] deprecated, list of overridable config by argv\n   */\n  constructor(options = {}) {\n    super();\n    if (!options.packageDirname) options.packageDirname = process.cwd();\n    if (!options.srcDirname) options.srcDirname = `${options.packageDirname}/lib`;\n\n    this.dirname = options.srcDirname;\n    Object.defineProperty(this, 'packageDirname', {\n      get: deprecate(() => options.packageDirname, 'packageDirname'),\n      configurable: false,\n      enumerable: false,\n    });\n\n\n    if (!options.config) {\n      deprecate(() => () => null, 'Alp options: missing options.config')();\n      // eslint-disable-next-line\n      const packageConfig = require(`${options.packageDirname}/package.json`);\n      config(`${this.dirname}/config`, { packageConfig, argv: options.argv })(this);\n    } else {\n      config()(this, options.config);\n    }\n\n    params(this);\n    language(this);\n    translate('locales')(this);\n\n    this.use(compress());\n\n    this.browserStateTransformers = [];\n    this.browserContextTransformers = [\n      (initialBrowserContext, context) => {\n        initialBrowserContext.state = Object.create(null);\n        this.browserStateTransformers.forEach(transformer => (\n          transformer(initialBrowserContext.state, context)\n        ));\n      },\n    ];\n\n    this.context.computeInitialContextForBrowser = function () {\n      const initialBrowserContext = Object.create(null);\n\n      this.app.browserContextTransformers.forEach(transformer => (\n        transformer(initialBrowserContext, this)\n      ));\n\n      return initialBrowserContext;\n    };\n  }\n\n  registerBrowserContextTransformer(transformer: Function) {\n    this.browserContextTransformers.push(transformer);\n  }\n\n  registerBrowserStateTransformer(transformer: Function) {\n    this.browserStateTransformers.push(transformer);\n  }\n\n  registerBrowserStateTransformers(transformer) {\n    deprecate(() => () => null, 'breaking: use registerBrowserStateTransformer instead')();\n    this.browserStateTransformers.push(transformer);\n  }\n\n  migrate(migrationsManager) {\n    return migrations({\n      config: this.config,\n      dirname: `${this.dirname}/migrations`,\n      migrationsManager,\n    });\n  }\n\n  get environment() {\n    deprecate(() => () => null, 'app.environment, use app.env instead')();\n    return this.env;\n  }\n\n  get production() {\n    deprecate(() => () => null, 'app.production, use global.PRODUCTION instead')();\n    return this.env === 'prod' || this.env === 'production';\n  }\n  servePublic() {\n    this.use(serve(`${this.packageDirname}/public/`)); // static files\n  }\n\n  catchErrors() {\n    this.use(errors);\n  }\n\n  listen() {\n    return _listen(`${this.packageDirname}/config/cert`)(this)\n      .then(server => this._server = server)\n      .catch(err => {\n        logger.error(err);\n        throw err;\n      });\n  }\n\n  /**\n   * Close server and emit close event\n   */\n  close() {\n    if (this._server) {\n      this._server.close();\n      this.emit('close');\n    }\n  }\n}\n"]}