{"version":3,"file":"AlpNodeApp-node10-dev.es.js","sources":["../src/AlpNodeApp.ts"],"sourcesContent":["import { IncomingMessage, Server, ServerResponse } from 'http';\nimport path from 'path';\nimport { deprecate } from 'util';\nimport Koa, { BaseContext, DefaultState, ParameterizedContext } from 'koa';\nimport Logger from 'nightingale-logger';\nimport compress from 'koa-compress';\nimport serve from 'koa-static';\nimport _config, { Config } from 'alp-node-config';\nimport errors from 'alp-node-errors';\nimport params from 'alp-params';\nimport language from 'alp-node-language';\nimport translate from 'alp-translate';\nimport _listen from 'alp-listen';\nimport { NodeApplication, NodeConfig, Context as AlpContext } from 'alp-types';\n\nconst logger = new Logger('alp');\n\nexport interface AlpNodeAppOptions {\n  appDirname: string;\n  packageDirname: string;\n  config: Config & NodeConfig;\n  certPath?: string;\n  publicPath?: string;\n}\n\ndeclare module 'koa' {\n  interface BaseContext extends AlpContext {}\n}\n\nexport type Context<State = any, SanitizedState = any> = AlpContext<\n  State,\n  SanitizedState\n> &\n  ParameterizedContext<State>;\n\nexport class AlpNodeApp extends Koa implements NodeApplication {\n  dirname: string;\n\n  certPath: string;\n\n  publicPath: string;\n\n  config: NodeConfig & Config;\n\n  _server?: Server;\n\n  context!: BaseContext & AlpContext;\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.certPath] directory of the ssl certificates\n   * @param {string} [options.publicPath] directory of public files\n   */\n  constructor({\n    appDirname,\n    packageDirname,\n    config,\n    certPath,\n    publicPath,\n  }: AlpNodeAppOptions) {\n    super();\n\n    this.dirname = path.normalize(appDirname);\n\n    Object.defineProperty(this, 'packageDirname', {\n      get: deprecate(() => packageDirname, 'packageDirname'),\n      configurable: false,\n      enumerable: false,\n    });\n\n    this.certPath = certPath || `${packageDirname}/config/cert`;\n    this.publicPath = publicPath || `${packageDirname}/public/`;\n\n    this.config = _config(this, config);\n    this.context.config = this.config;\n\n    params(this);\n    language(this);\n    translate('locales')(this);\n\n    this.use(compress());\n  }\n\n  existsConfigSync(name: string) {\n    return this.context.config.existsConfigSync(name);\n  }\n\n  loadConfigSync(name: string) {\n    return this.context.config.loadConfigSync(name);\n  }\n\n  get environment() {\n    deprecate(() => () => null, 'app.environment, use app.env instead')();\n    return this.env;\n  }\n\n  get production() {\n    deprecate(\n      () => () => null,\n      'app.production, use global.PRODUCTION instead',\n    )();\n    return this.env === 'prod' || this.env === 'production';\n  }\n\n  createContext<State = DefaultState, SanitizedState = DefaultState>(\n    req: IncomingMessage,\n    res: ServerResponse,\n  ): Context<State, SanitizedState> {\n    const ctx: ParameterizedContext<State> = super.createContext<State>(\n      req,\n      res,\n    );\n    (ctx as Context<\n      State,\n      SanitizedState\n    >).sanitizedState = {} as SanitizedState;\n    return ctx as Context<State, SanitizedState>;\n  }\n\n  servePublic() {\n    this.use(serve(this.publicPath)); // static files\n  }\n\n  catchErrors() {\n    this.use(errors);\n  }\n\n  listen(): Server {\n    throw new Error('Use start instead');\n  }\n\n  /**\n   * Close server and emit close event\n   */\n  close() {\n    if (this._server) {\n      this._server.close();\n      this.emit('close');\n    }\n  }\n\n  async start(fn: Function): Promise<Server> {\n    await fn();\n    try {\n      const server = await _listen(this.config, this.callback(), this.certPath);\n      this._server = server;\n      logger.success('started');\n      if (process.send) process.send('ready');\n      return server;\n    } catch (err) {\n      logger.error('start fail', { err });\n      throw err;\n    }\n  }\n}\n"],"names":["logger","Logger","AlpNodeApp","Koa","constructor","appDirname","packageDirname","config","certPath","publicPath","dirname","path","normalize","Object","defineProperty","get","deprecate","configurable","enumerable","_config","context","params","language","translate","use","compress","existsConfigSync","name","loadConfigSync","environment","env","production","createContext","req","res","ctx","sanitizedState","servePublic","serve","catchErrors","errors","listen","Error","close","_server","emit","start","fn","server","_listen","callback","success","process","send","err","error"],"mappings":"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"}