{"version":3,"file":"index-node8.cjs.js","sources":["../src/index.ts"],"sourcesContent":["import { existsSync, readFileSync } from 'fs';\nimport { IncomingMessage, Server, ServerResponse } from 'http';\nimport path from 'path';\nimport { deprecate } from 'util';\nimport Koa, { BaseContext } from 'koa';\nimport compress from 'koa-compress';\nimport serve from 'koa-static';\nimport _config, { Config } from 'alp-node-config';\nimport errors from 'alp-node-errors';\nimport params from 'alp-params';\nimport language from 'alp-node-language';\nimport translate from 'alp-translate';\nimport _listen from 'alp-listen';\nimport Logger from 'nightingale-logger';\nimport findUp from 'findup-sync';\nimport { NodeApplication, NodeConfig, Context as AlpContext } from 'alp-types';\n\nexport { Config };\n\nconst logger = new Logger('alp');\n\n// see alp-dev\nexport const appDirname = path.resolve('build');\n\nconst packagePath = findUp('package.json', { cwd: appDirname });\nif (!packagePath) {\n  throw new Error(`Could not find package.json: \"${packagePath}\"`);\n}\nexport const packageDirname = path.dirname(packagePath);\n\nlogger.debug('init', { appDirname, packageDirname });\n\n// eslint-disable-next-line import/no-dynamic-require, global-require\nexport const packageConfig = JSON.parse(readFileSync(packagePath, 'utf-8'));\n\nconst buildedConfigPath = `${appDirname}/build/config/`;\nconst configPath = existsSync(buildedConfigPath)\n  ? buildedConfigPath\n  : `${appDirname}/config/`;\nexport const config = new Config(configPath).loadSync({ packageConfig });\n\ninterface Options {\n  certPath?: string;\n  publicPath?: string;\n}\n\ndeclare module 'koa' {\n  interface BaseContext extends AlpContext {}\n}\n\nexport type Context = AlpContext;\n\nexport default class Alp extends Koa implements NodeApplication {\n  dirname: string;\n\n  certPath: string;\n\n  publicPath: string;\n\n  config: NodeConfig & Config;\n\n  _server?: Server;\n\n  context!: BaseContext & AlpContext;\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.certPath] directory of the ssl certificates\n   * @param {string} [options.publicPath] directory of public files\n   */\n  constructor(options: Options = {}) {\n    super();\n\n    this.dirname = path.normalize(appDirname);\n\n    Object.defineProperty(this, 'packageDirname', {\n      get: deprecate(() => packageDirname, 'packageDirname'),\n      configurable: false,\n      enumerable: false,\n    });\n\n    this.certPath = options.certPath || `${packageDirname}/config/cert`;\n    this.publicPath = options.publicPath || `${packageDirname}/public/`;\n\n    this.config = _config(this, config);\n    this.context.config = this.config;\n\n    params(this);\n    language(this);\n    translate('locales')(this);\n\n    this.use(compress());\n  }\n\n  existsConfigSync(name: string) {\n    return config.existsConfigSync(name);\n  }\n\n  loadConfigSync(name: string) {\n    return config.loadConfigSync(name);\n  }\n\n  get environment() {\n    deprecate(() => () => null, 'app.environment, use app.env instead')();\n    return this.env;\n  }\n\n  get production() {\n    deprecate(\n      () => () => null,\n      'app.production, use global.PRODUCTION instead',\n    )();\n    return this.env === 'prod' || this.env === 'production';\n  }\n\n  createContext(req: IncomingMessage, res: ServerResponse) {\n    const ctx = super.createContext(req, res);\n    ctx.sanitizedState = {};\n    return ctx;\n  }\n\n  servePublic() {\n    this.use(serve(this.publicPath)); // static files\n  }\n\n  catchErrors() {\n    this.use(errors);\n  }\n\n  listen(): Server {\n    throw new Error('Use start instead');\n  }\n\n  /**\n   * Close server and emit close event\n   */\n  close() {\n    if (this._server) {\n      this._server.close();\n      this.emit('close');\n    }\n  }\n\n  async start(fn: Function): Promise<Server> {\n    await fn();\n    try {\n      const server = await _listen(this.config, this.callback(), this.certPath);\n      this._server = server;\n      logger.success('started');\n      if (process.send) process.send('ready');\n      return server;\n    } catch (err) {\n      logger.error('start fail', { err });\n      throw err;\n    }\n  }\n}\n"],"names":["logger","Logger","appDirname","path","resolve","packagePath","findUp","cwd","Error","packageDirname","dirname","debug","packageConfig","JSON","parse","readFileSync","buildedConfigPath","configPath","existsSync","config","Config","loadSync","Alp","Koa","constructor","options","normalize","Object","defineProperty","get","deprecate","configurable","enumerable","certPath","publicPath","_config","context","params","language","translate","use","compress","existsConfigSync","name","loadConfigSync","environment","env","production","createContext","req","res","ctx","sanitizedState","servePublic","serve","catchErrors","errors","listen","close","_server","emit","start","fn","server","_listen","callback","success","process","send","err","error"],"mappings":"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"}