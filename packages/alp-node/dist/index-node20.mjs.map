{"version":3,"file":"index-node20.mjs","sources":["../src/config.ts","../src/errors.ts","../src/language.ts","../src/listen.ts","../src/params/ParamValidationResult.ts","../src/params/ParamValid.ts","../src/params/ParamValueValidator.ts","../src/params/ParamValueStringValidator.ts","../src/params/ParamValueFromContext.ts","../src/params/index.ts","../src/translate/load.ts","../src/translate/index.ts","../src/AlpNodeApp.ts","../src/router.ts","../src/index.ts"],"sourcesContent":["import { existsSync, readFileSync } from \"node:fs\";\nimport deepFreeze from \"deep-freeze-es6\";\nimport minimist from \"minimist\";\nimport parseJSON from \"parse-json-object-as-map\";\nimport type { NodeApplication, NodeConfig, PackageConfig } from \"./types\";\n\nconst argv = minimist(process.argv.slice(2));\n\nfunction _existsConfigSync(dirname: string, name: string): boolean {\n  return existsSync(`${dirname}${name}.json`);\n}\n\nfunction _loadConfigSync(dirname: string, name: string): Map<string, unknown> {\n  const content = readFileSync(`${dirname}${name}.json`, \"utf8\");\n  return parseJSON(content) as Map<string, unknown>;\n}\n\nexport interface ConfigOptions {\n  argv?: string[];\n  packageConfig?: PackageConfig;\n  version?: string;\n}\n\nexport class Config {\n  packageConfig?: PackageConfig;\n\n  private _map: Map<string, unknown>;\n\n  private readonly _dirname: string;\n\n  constructor(dirname: string, options?: ConfigOptions) {\n    this._map = new Map<string, unknown>();\n    this._dirname = dirname.replace(/\\/*$/, \"/\");\n    if (options) {\n      this.loadSync(options);\n    }\n  }\n\n  loadSync(options: ConfigOptions = {}): Config & NodeConfig {\n    const env = process.env.CONFIG_ENV || process.env.NODE_ENV || \"development\";\n    const { argv: argvOverrides = [], packageConfig, version } = options;\n    this.packageConfig = packageConfig;\n\n    const config = this.loadConfigSync(\"common\") as Map<string, unknown>;\n    for (const [key, value] of this.loadConfigSync(env)) {\n      config.set(key, value);\n    }\n\n    if (this.existsConfigSync(\"local\")) {\n      for (const [key, value] of this.loadConfigSync(\"local\")) {\n        config.set(key, value);\n      }\n    }\n\n    if (config.has(\"version\")) {\n      throw new Error('Cannot have \"version\", in config.');\n    }\n\n    config.set(\n      \"version\",\n      String(version || argv.version || packageConfig?.version),\n    );\n\n    const socketPath: string | undefined = (argv.socket ||\n      argv[\"socket-path\"] ||\n      argv.socketPath) as string | undefined;\n    if (socketPath) {\n      config.set(\"socketPath\", socketPath);\n    } else if (argv.port) {\n      config.set(\"port\", argv.port);\n      config.delete(\"socketPath\");\n    } else if (process.env.PORT) {\n      config.set(\"port\", Number(process.env.PORT));\n      config.delete(\"socketPath\");\n    }\n\n    argvOverrides.forEach((key) => {\n      const splitted = key.split(\".\");\n      const value =\n        splitted.length > 0 &&\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return,unicorn/no-array-reduce\n        splitted.reduce((config, partialKey) => config[partialKey], argv);\n      if (value !== undefined) {\n        const last = splitted.pop()!;\n        const map =\n          splitted.length === 0\n            ? config\n            : // eslint-disable-next-line unicorn/no-array-reduce\n              splitted.reduce(\n                (config, partialKey) =>\n                  config.get(partialKey) as Map<string, unknown>,\n                config,\n              );\n        map.set(last, value);\n      }\n    });\n\n    this._map = deepFreeze(config);\n    return this as Config & NodeConfig;\n  }\n\n  get<T>(key: string): T {\n    return this._map.get(key) as T;\n  }\n\n  existsConfigSync(name: string): boolean {\n    return _existsConfigSync(this._dirname, name);\n  }\n\n  loadConfigSync(name: string): ReadonlyMap<string, unknown> {\n    return _loadConfigSync(this._dirname, name);\n  }\n}\n\nexport default function getConfig(\n  app: NodeApplication,\n  config: Config & NodeConfig,\n): Config & NodeConfig {\n  return config;\n}\n","/* eslint-disable complexity */\nimport { STATUS_CODES } from \"node:http\";\nimport ErrorHtmlRenderer from \"error-html\";\nimport { Logger } from \"nightingale-logger\";\nimport type { Context } from \"./AlpNodeApp\";\nimport type { HtmlError } from \"./types\";\n\nconst logger = new Logger(\"alp:errors\");\nconst errorHtmlRenderer = new ErrorHtmlRenderer({\n  appPath: `${process.cwd()}/`,\n});\n\nexport default async function alpNodeErrors(\n  ctx: Context,\n  next: () => Promise<void> | void,\n): Promise<void> {\n  try {\n    await next();\n  } catch (error: unknown) {\n    // eslint-disable-next-line no-ex-assign\n    if (!error) error = new Error(\"Unknown error\");\n    // eslint-disable-next-line no-ex-assign\n    if (typeof error === \"string\") error = new Error(error);\n\n    ctx.status = (error as HtmlError).status || 500;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    logger.error(error as any);\n\n    switch (ctx.request.accepts(\"html\", \"text\", \"json\")) {\n      case \"json\":\n        ctx.type = \"application/json\";\n        if (\n          process.env.NODE_ENV !== \"production\" ||\n          (error as HtmlError).expose\n        ) {\n          ctx.body = { error: (error as Error).message };\n        } else {\n          ctx.body = { error: STATUS_CODES[ctx.status] };\n        }\n\n        break;\n\n      case \"html\":\n        ctx.type = \"text/html\";\n        if (process.env.NODE_ENV !== \"production\") {\n          ctx.body = errorHtmlRenderer.render(error as Error);\n        } else if ((error as HtmlError).expose) {\n          ctx.body = (error as Error).message;\n        } else {\n          throw error;\n        }\n\n        break;\n\n      case \"text\":\n      case false:\n      default:\n        ctx.type = \"text/plain\";\n        if (\n          process.env.NODE_ENV !== \"production\" ||\n          (error as HtmlError).expose\n        ) {\n          ctx.body = (error as Error).message;\n        } else {\n          throw error;\n        }\n\n        break;\n    }\n  }\n}\n","import type { Context } from \"koa\";\nimport { defineLazyProperty } from \"object-properties\";\nimport type { AlpNodeApp } from \"./AlpNodeApp\";\n\nexport interface AlpLanguageContext {\n  readonly firstAcceptedLanguage: string;\n  readonly language: string;\n}\nexport default function alpLanguage(app: AlpNodeApp): void {\n  const config = app.context.config;\n  const availableLanguages: string[] = config.get(\"availableLanguages\");\n  if (!availableLanguages) {\n    throw new Error('Missing config \"availableLanguages\"');\n  }\n\n  defineLazyProperty(\n    app.context,\n    \"language\",\n    function language(this: Context): string {\n      return this.acceptsLanguages(availableLanguages) || availableLanguages[0];\n    },\n  );\n\n  defineLazyProperty(\n    app.context,\n    \"firstAcceptedLanguage\",\n    function firstAcceptedLanguage(this: Context): string {\n      return this.acceptsLanguages()[0] || availableLanguages[0];\n    },\n  );\n}\n","import { chmodSync, readFileSync, unlinkSync } from \"node:fs\";\nimport { createServer as createServerHttp } from \"node:http\";\nimport type { IncomingMessage, Server, ServerResponse } from \"node:http\";\nimport { createServer as createServerHttps } from \"node:https\";\nimport { Logger } from \"nightingale-logger\";\nimport type { Config } from \"./config\";\n\nconst logger = new Logger(\"alp:listen\");\n\ntype RequestListener = (req: IncomingMessage, res: ServerResponse) => void;\n\nconst createServer = (\n  callback: RequestListener,\n  socketPath?: string,\n  tls?: boolean,\n  dirname = \"\",\n  // eslint-disable-next-line @typescript-eslint/max-params\n): Server => {\n  const createHttpServer =\n    !socketPath && tls ? createServerHttps : createServerHttp;\n\n  if (!tls) {\n    return (createHttpServer as typeof createServerHttps)(callback);\n  }\n\n  const options = {\n    key: readFileSync(`${dirname}/server.key`),\n    cert: readFileSync(`${dirname}/server.crt`),\n  };\n\n  return (createHttpServer as typeof createServerHttps)(options, callback);\n};\n\nexport default function alpListen(\n  config: Config,\n  callback: RequestListener,\n  dirname?: string,\n): Promise<Server> {\n  return new Promise((resolve) => {\n    const socketPath = config.get<string>(\"socketPath\");\n    const port = config.get<number>(\"port\");\n    const hostname = config.get<string>(\"hostname\");\n    const tls = config.get<boolean>(\"tls\");\n\n    logger.info(\"Creating server\", socketPath ? { socketPath } : { port });\n    const server = createServer(callback, socketPath, tls, dirname);\n\n    if (socketPath) {\n      try {\n        unlinkSync(socketPath);\n      } catch {}\n\n      server.listen(socketPath, () => {\n        if (socketPath) {\n          chmodSync(socketPath, \"777\");\n        }\n\n        logger.info(\"Server listening\", { socketPath });\n        resolve(server);\n      });\n    } else {\n      server.listen(port, hostname, () => {\n        logger.info(\"Server listening\", { port });\n        resolve(server);\n      });\n    }\n  });\n}\n","export type Errors = Record<string, any>;\n\nexport class ParamValidationResult {\n  _errors?: Errors;\n\n  _error(name: string, key: string, value: unknown): void {\n    if (!this._errors) {\n      this._errors = {};\n    }\n\n    this._errors[name] = { error: key, value };\n  }\n\n  getErrors(): Errors | undefined {\n    return this._errors;\n  }\n\n  hasErrors(): boolean {\n    return this._errors !== undefined;\n  }\n\n  isValid(): boolean {\n    return this._errors === undefined;\n  }\n\n  // string(name: string): ParamValueStringValidator {\n  //   return new ParamValueStringValidator(this, name, this.context.param(name));\n  // }\n  /* int(name, position) {\n   return new ParamValueIntValidator(this, name, this.context.param(name, position));\n   }\n   model(modelName, name) {\n   name = name || S.string.lcFirst(modelName);\n   console.log('paramvalidator model', modelName, M[modelName]);\n   let data = this.context.getOrPostParam(name);\n   return new ParamValueModelValidator(this, name, !data ? null : new M[modelName](data));\n   } */\n}\n","import type { Context } from \"../AlpNodeApp\";\nimport { ParamValidationResult } from \"./ParamValidationResult\";\n\nexport default class ParamValid extends ParamValidationResult {\n  context: Context;\n\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  override _error(): void {\n    this.context.throw(400, \"Invalid params\", { validator: this });\n  }\n}\n","import type { ParamValidationResult } from \"./ParamValidationResult\";\n\nexport default class ParamValueValidator<T> {\n  readonly validationResult: ParamValidationResult;\n\n  readonly name: string;\n\n  readonly value: T;\n\n  constructor(validationResult: ParamValidationResult, name: string, value: T) {\n    this.validationResult = validationResult;\n    this.name = name;\n    this.value = value;\n  }\n\n  isValid(): boolean {\n    return this.validationResult.isValid();\n  }\n\n  _error(key: string): void {\n    this.validationResult._error(this.name, key, this.value);\n  }\n}\n","import ParamValueValidator from \"./ParamValueValidator\";\n\nexport default class ParamValueStringValidator<\n  T extends string = string,\n> extends ParamValueValidator<T | null | undefined> {\n  notEmpty(): ParamValueValidator<T> {\n    if (this.value == null || this.value.trim() === \"\") {\n      this._error(\"notEmpty\");\n    }\n\n    return this as ParamValueValidator<T>;\n  }\n}\n","import type { Context } from \"../AlpNodeApp\";\nimport type { ParamValidationResult } from \"./ParamValidationResult\";\nimport ParamValueStringValidator from \"./ParamValueStringValidator\";\n\nexport class ParamValueFromContext {\n  readonly validationResult: ParamValidationResult;\n\n  readonly context: Context;\n\n  constructor(context: Context, validationResult: ParamValidationResult) {\n    this.validationResult = validationResult;\n    this.context = context;\n  }\n\n  namedParam(name: string): ParamValueStringValidator {\n    return new ParamValueStringValidator(\n      this.validationResult,\n      name,\n      this.context.namedParam(name),\n    );\n  }\n\n  otherParam(position: number): ParamValueStringValidator {\n    return new ParamValueStringValidator(\n      this.validationResult,\n      String(position),\n      this.context.otherParam(position),\n    );\n  }\n\n  queryParam(name: string): ParamValueStringValidator {\n    return new ParamValueStringValidator(\n      this.validationResult,\n      name,\n      this.context.queryParam(name),\n    );\n  }\n\n  // bodyParam: <T>(name: string): ParamValueValidator<string | undefined> {\n\n  // }\n}\n","import { defineLazyProperty } from \"object-properties\";\nimport type { AlpNodeApp, Context } from \"../AlpNodeApp\";\nimport ParamValid from \"./ParamValid\";\nimport { ParamValidationResult } from \"./ParamValidationResult\";\nimport { ParamValueFromContext } from \"./ParamValueFromContext\";\n\nexport interface AlpParamsContext {\n  params: ParamValueFromContext;\n  validParams: ParamValueFromContext;\n  namedParam: (name: string) => string | undefined;\n  otherParam: (position: number) => string | undefined;\n  queryParam: (name: string) => string | undefined;\n  bodyParam: <T>(name: string) => T | undefined;\n}\n\nexport interface AlpParamsRequest {\n  searchParams: URLSearchParams;\n}\n\nexport default function alpParams(app: AlpNodeApp): void {\n  Object.assign(app.context, {\n    namedRouteParam(this: Context, name: string): string | undefined {\n      const namedParams = this.route.namedParams;\n      return namedParams?.get(name);\n    },\n\n    otherRouteParam(this: Context, position: number): string | undefined {\n      const otherParams = this.route.otherParams;\n      return otherParams?.[position - 1];\n    },\n\n    queryParam(this: Context, name: string): string | undefined {\n      const searchParams = this.request.searchParams;\n      return searchParams.get(name) ?? undefined;\n    },\n\n    bodyParam<T>(this: Context, name: string): T | undefined {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access\n      return (this.body as any)[name];\n    },\n  });\n\n  defineLazyProperty(\n    app.request,\n    \"searchParams\",\n    function searchParams(this: Context[\"request\"]): URLSearchParams {\n      return new URLSearchParams(this.search);\n    },\n  );\n\n  defineLazyProperty(\n    app.context,\n    \"params\",\n    function params(this: Context): ParamValueFromContext {\n      return new ParamValueFromContext(this, new ParamValidationResult());\n    },\n  );\n\n  defineLazyProperty(\n    app.context,\n    \"validParams\",\n    function validParams(this: Context): ParamValueFromContext {\n      return new ParamValueFromContext(this, new ParamValid(this));\n    },\n  );\n}\n","import IntlMessageFormatDefault from \"intl-messageformat\";\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst IntlMessageFormat: typeof IntlMessageFormatDefault =\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  (IntlMessageFormatDefault as any).default || IntlMessageFormatDefault;\n\nexport type Translations = ReadonlyMap<string, IntlMessageFormatDefault>;\n\nexport default function load(\n  translations: ReadonlyMap<string, unknown>,\n  language: string,\n): Translations {\n  const result = new Map();\n\n  (function loadMap(map, prefix) {\n    map.forEach((value: any, key) => {\n      if (typeof value === \"object\") {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        loadMap(value, `${prefix}${key}.`);\n        return;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      result.set(`${prefix}${key}`, new IntlMessageFormat(value, language));\n    });\n  })(translations, \"\");\n\n  return result;\n}\n","import { Logger } from \"nightingale-logger\";\nimport type { AlpNodeApp, Context } from \"../AlpNodeApp\";\nimport type { Translations } from \"./load\";\nimport load from \"./load\";\n\nconst logger = new Logger(\"alp:translate\");\n\ntype Args = Record<string, any>;\n\nexport interface TranslateBaseContext {\n  t: (id: string, args: Args) => string;\n}\nexport interface TranslateContext {\n  readonly language: string;\n}\n\nexport default function alpTranslate(\n  dirname: string,\n): (app: AlpNodeApp) => void {\n  dirname = dirname.replace(/\\/*$/, \"/\");\n  return (app: AlpNodeApp) => {\n    const appTranslations = new Map<string, Translations>();\n\n    Object.assign(app.context, {\n      t(this: Context, id: string, args: Args): string {\n        const msg = appTranslations.get(this.language)!.get(id);\n        if (!msg) {\n          logger.warn(\"invalid msg\", { language: this.language, id });\n          return id;\n        }\n\n        return msg.format(args) as string;\n      },\n    });\n\n    const config = app.config;\n\n    config.get<string[]>(\"availableLanguages\").forEach((language) => {\n      const translations = app.loadConfigSync(dirname + language);\n      appTranslations.set(language, load(translations, language));\n    });\n\n    return appTranslations;\n  };\n}\n","import type { IncomingMessage, Server, ServerResponse } from \"node:http\";\nimport path from \"node:path\";\nimport { deprecate } from \"node:util\";\nimport Koa from \"koa\";\nimport type { DefaultState, ParameterizedContext } from \"koa\";\nimport compress from \"koa-compress\";\nimport serve from \"koa-static\";\nimport { Logger } from \"nightingale-logger\";\nimport type { Router } from \"router-segments\";\nimport type { Config } from \"./config\";\nimport _config from \"./config\";\nimport errors from \"./errors\";\nimport type { AlpLanguageContext } from \"./language\";\nimport language from \"./language\";\nimport _listen from \"./listen\";\nimport type { AlpParamsContext, AlpParamsRequest } from \"./params\";\nimport params from \"./params\";\nimport type {\n  AlpRouteRef,\n  RouterContext as AlpRouterContext,\n  UrlGenerator,\n} from \"./router\";\nimport type { TranslateBaseContext, TranslateContext } from \"./translate\";\nimport translate from \"./translate\";\nimport type {\n  Context as AlpContext,\n  ContextSanitizedState,\n  ContextState,\n  NodeApplication,\n  NodeConfig,\n} from \"./types\";\n\nconst logger = new Logger(\"alp\");\n\nexport interface AlpNodeAppOptions {\n  appDirname: string;\n  packageDirname: string;\n  config: Config & NodeConfig;\n  certPath?: string;\n  publicPath?: string;\n}\n\ndeclare module \"koa\" {\n  // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n  interface DefaultState extends ContextState {}\n\n  interface DefaultContext\n    extends AlpContext,\n      AlpParamsContext,\n      AlpRouterContext,\n      AlpLanguageContext,\n      TranslateContext {}\n\n  interface BaseContext extends AlpContext, TranslateBaseContext {\n    urlGenerator: UrlGenerator;\n    redirectTo: <P extends Record<string, unknown>>(\n      to: string,\n      params?: P,\n    ) => void;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n  interface BaseRequest extends AlpParamsRequest {}\n}\n\nexport class AlpNodeApp extends Koa<ContextState> implements NodeApplication {\n  dirname: string;\n\n  certPath: string;\n\n  publicPath: string;\n\n  config: Config & NodeConfig;\n\n  _server?: Server;\n\n  router?: Router<any, AlpRouteRef>;\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.certPath] directory of the ssl certificates\n   * @param {string} [options.publicPath] directory of public files\n   */\n  constructor({\n    appDirname,\n    packageDirname,\n    config,\n    certPath,\n    publicPath,\n  }: AlpNodeAppOptions) {\n    super();\n\n    this.dirname = path.normalize(appDirname);\n\n    Object.defineProperty(this, \"packageDirname\", {\n      get: deprecate(() => packageDirname, \"packageDirname\"),\n      configurable: false,\n      enumerable: false,\n    });\n\n    this.certPath = certPath || `${packageDirname}/config/cert`;\n    this.publicPath = publicPath || `${packageDirname}/public/`;\n\n    this.config = _config(this, config);\n    this.context.config = this.config;\n\n    params(this);\n    language(this);\n    translate(\"locales\")(this);\n\n    this.use(compress());\n  }\n\n  existsConfigSync(name: string): ReturnType<Config[\"existsConfigSync\"]> {\n    return this.config.existsConfigSync(name);\n  }\n\n  loadConfigSync(name: string): ReturnType<Config[\"loadConfigSync\"]> {\n    return this.config.loadConfigSync(name);\n  }\n\n  override createContext<StateT = DefaultState>(\n    req: IncomingMessage,\n    res: ServerResponse,\n  ): ParameterizedContext<StateT> {\n    const ctx = super.createContext<StateT>(req, res);\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    ctx.sanitizedState = {} as ContextSanitizedState;\n    return ctx;\n  }\n\n  servePublic(): void {\n    this.use(serve(this.publicPath)); // static files\n  }\n\n  catchErrors(): void {\n    this.use(errors);\n  }\n\n  override listen(): never {\n    throw new Error(\"Use start instead\");\n  }\n\n  /**\n   * Close server and emit close event\n   */\n  close(): void {\n    if (this._server) {\n      this._server.close();\n      this.emit(\"close\");\n    }\n  }\n\n  async start(fn: () => Promise<void> | void): Promise<Server> {\n    await fn();\n    try {\n      const server = await _listen(this.config, this.callback(), this.certPath);\n      this._server = server;\n      logger.success(\"started\");\n      if (process.send) process.send(\"ready\");\n      return server;\n    } catch (error: unknown) {\n      logger.error(\"start fail\", { err: error });\n      throw error;\n    }\n  }\n}\n\nexport type { Context } from \"koa\";\n\nexport { type NodeApplication } from \"./types\";\n","import type {\n  LocaleType,\n  RouteMatch,\n  Router,\n  RouterBuilder,\n} from \"router-segments\";\nimport { createRouterBuilder } from \"router-segments\";\nimport type { AlpNodeApp, Context } from \"./AlpNodeApp\";\n\nexport type AlpRouter<Locales extends LocaleType> = Router<\n  Locales,\n  AlpRouteRef\n>;\nexport type AlpRouteRef = (ctx: Context) => Promise<void> | void;\ntype ReturnType = (app: AlpNodeApp) => AlpRouteRef;\n\nexport interface RouterContext {\n  route: RouteMatch<any, AlpRouteRef>;\n}\nexport const createAlpRouterBuilder = <\n  Locales extends LocaleType,\n>(): RouterBuilder<Locales, AlpRouteRef> =>\n  createRouterBuilder<Locales, AlpRouteRef>();\n\nexport type UrlGenerator = <P extends Record<string, unknown> | undefined>(\n  routeKey: string,\n  params?: P,\n) => string;\n\nexport default function alpRouter<Locales extends string>(\n  router: Router<Locales, AlpRouteRef>,\n): ReturnType {\n  return (app: AlpNodeApp) => {\n    app.router = router;\n\n    app.context.urlGenerator = function urlGenerator<\n      P extends Record<string, unknown> | undefined,\n    >(this: Context, routeKey: string, params?: P): string {\n      return router.toLocalizedPath(this.language as Locales, routeKey, params);\n    };\n\n    app.context.redirectTo = function redirectTo<\n      P extends Record<string, unknown> | undefined,\n    >(this: Context, to: string, params?: P): void {\n      this.redirect(\n        router.toLocalizedPath(this.language as Locales, to, params),\n      );\n    };\n\n    return async (ctx: Context): Promise<void> => {\n      // eslint-disable-next-line unicorn/no-array-method-this-argument\n      const routeMatch = router.find(ctx.request.path, ctx.language as Locales);\n\n      if (!routeMatch) {\n        ctx.status = 404;\n        throw new Error(`Route not found: ${ctx.request.path}`);\n      }\n\n      ctx.route = routeMatch;\n\n      await routeMatch.ref(ctx);\n    };\n  };\n}\n","import { existsSync, readFileSync } from \"node:fs\";\nimport path from \"node:path\";\nimport { Logger } from \"nightingale-logger\";\nimport type { AlpNodeAppOptions } from \"./AlpNodeApp\";\nimport { AlpNodeApp } from \"./AlpNodeApp\";\nimport { Config } from \"./config\";\n\nexport type {\n  BaseContext,\n  NodeApplication,\n  NodeConfig,\n  ContextState,\n  ContextSanitizedState,\n} from \"./types\";\nexport type { Context } from \"./AlpNodeApp\";\n\nconst logger = new Logger(\"alp\");\n\nexport const appDirname = path.resolve(\"build\");\n\nconst packagePath = path.resolve(\"package.json\");\nif (!packagePath) {\n  throw new Error(`Could not find package.json: \"${String(packagePath)}\"`);\n}\nexport const packageDirname = path.dirname(packagePath);\n\nlogger.debug(\"init\", { appDirname, packageDirname });\n\nexport const packageConfig: Record<string, unknown> = JSON.parse(\n  readFileSync(packagePath, \"utf8\"),\n) as Record<string, unknown>;\n\nconst buildedConfigPath = `${appDirname}/build/config/`;\nconst configPath = existsSync(buildedConfigPath)\n  ? buildedConfigPath\n  : `${appDirname}/config/`;\n\nexport const config = new Config(configPath).loadSync({ packageConfig });\n\nexport type AppOptions = Omit<\n  AlpNodeAppOptions,\n  \"appDirname\" | \"config\" | \"packageDirname\"\n>;\n\nexport default class App extends AlpNodeApp {\n  constructor(options?: AppOptions) {\n    super({\n      ...options,\n      appDirname,\n      packageDirname,\n      config,\n    });\n  }\n}\n\nexport { Config } from \"./config\";\n\nexport {\n  default as router,\n  createAlpRouterBuilder,\n  type AlpRouteRef,\n  type AlpRouter,\n} from \"./router\";\n"],"names":["argv","minimist","process","slice","_existsConfigSync","dirname","name","existsSync","_loadConfigSync","content","readFileSync","parseJSON","Config","constructor","options","_map","Map","_dirname","replace","loadSync","env","CONFIG_ENV","NODE_ENV","argvOverrides","packageConfig","version","config","loadConfigSync","key","value","set","existsConfigSync","has","Error","String","socketPath","socket","port","delete","PORT","Number","forEach","splitted","split","length","reduce","partialKey","undefined","last","pop","map","get","deepFreeze","getConfig","app","logger","Logger","errorHtmlRenderer","ErrorHtmlRenderer","appPath","cwd","alpNodeErrors","ctx","next","error","status","request","accepts","type","expose","body","message","STATUS_CODES","render","alpLanguage","context","availableLanguages","defineLazyProperty","language","acceptsLanguages","firstAcceptedLanguage","createServer","callback","tls","createHttpServer","createServerHttps","createServerHttp","cert","alpListen","Promise","resolve","hostname","info","server","unlinkSync","listen","chmodSync","ParamValidationResult","_error","_errors","getErrors","hasErrors","isValid","ParamValid","throw","validator","ParamValueValidator","validationResult","ParamValueStringValidator","notEmpty","trim","ParamValueFromContext","namedParam","otherParam","position","queryParam","alpParams","Object","assign","namedRouteParam","namedParams","route","otherRouteParam","otherParams","searchParams","bodyParam","URLSearchParams","search","params","validParams","IntlMessageFormat","IntlMessageFormatDefault","default","load","translations","result","loadMap","prefix","alpTranslate","appTranslations","t","id","args","msg","warn","format","AlpNodeApp","Koa","appDirname","packageDirname","certPath","publicPath","path","normalize","defineProperty","deprecate","configurable","enumerable","_config","translate","use","compress","createContext","req","res","sanitizedState","servePublic","serve","catchErrors","errors","close","_server","emit","start","fn","_listen","success","send","err","createAlpRouterBuilder","createRouterBuilder","alpRouter","router","urlGenerator","routeKey","toLocalizedPath","redirectTo","to","redirect","routeMatch","find","ref","packagePath","debug","JSON","parse","buildedConfigPath","configPath","App"],"mappings":"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"}