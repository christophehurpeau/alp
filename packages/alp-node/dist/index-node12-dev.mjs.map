{"version":3,"file":"index-node12-dev.mjs","sources":["../src/AlpNodeApp.ts","../src/index.ts"],"sourcesContent":["import type { IncomingMessage, Server, ServerResponse } from 'http';\nimport path from 'path';\nimport { deprecate } from 'util';\nimport _listen from 'alp-listen';\nimport type { Config } from 'alp-node-config';\nimport _config from 'alp-node-config';\nimport errors from 'alp-node-errors';\nimport language from 'alp-node-language';\nimport params from 'alp-params';\nimport translate from 'alp-translate';\nimport type {\n  NodeApplication,\n  NodeConfig,\n  Context as AlpContext,\n  ContextState,\n  ContextSanitizedState,\n} from 'alp-types';\nimport Koa from 'koa';\nimport type { ParameterizedContext, DefaultState, Context } from 'koa';\nimport compress from 'koa-compress';\nimport serve from 'koa-static';\nimport Logger from 'nightingale-logger';\n\nconst logger = new Logger('alp');\n\nexport interface AlpNodeAppOptions {\n  appDirname: string;\n  packageDirname: string;\n  config: Config & NodeConfig;\n  certPath?: string;\n  publicPath?: string;\n}\n\ndeclare module 'koa' {\n  interface DefaultState extends ContextState {}\n  interface DefaultContext extends AlpContext {}\n  interface BaseContext extends AlpContext {}\n}\n\nexport type { Context };\n\nexport class AlpNodeApp extends Koa<ContextState> implements NodeApplication {\n  dirname: string;\n\n  certPath: string;\n\n  publicPath: string;\n\n  config: NodeConfig & Config;\n\n  _server?: Server;\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.certPath] directory of the ssl certificates\n   * @param {string} [options.publicPath] directory of public files\n   */\n  constructor({\n    appDirname,\n    packageDirname,\n    config,\n    certPath,\n    publicPath,\n  }: AlpNodeAppOptions) {\n    super();\n\n    this.dirname = path.normalize(appDirname);\n\n    Object.defineProperty(this, 'packageDirname', {\n      get: deprecate(() => packageDirname, 'packageDirname'),\n      configurable: false,\n      enumerable: false,\n    });\n\n    this.certPath = certPath || `${packageDirname}/config/cert`;\n    this.publicPath = publicPath || `${packageDirname}/public/`;\n\n    this.config = _config(this, config);\n    this.context.config = this.config;\n\n    params(this);\n    language(this);\n    translate('locales')(this);\n\n    this.use(compress());\n  }\n\n  existsConfigSync(name: string): ReturnType<Config['existsConfigSync']> {\n    return this.config.existsConfigSync(name);\n  }\n\n  loadConfigSync(name: string): ReturnType<Config['loadConfigSync']> {\n    return this.config.loadConfigSync(name);\n  }\n\n  createContext<StateT = DefaultState>(\n    req: IncomingMessage,\n    res: ServerResponse,\n  ): ParameterizedContext<StateT> {\n    const ctx = super.createContext<StateT>(req, res);\n    ctx.sanitizedState = {} as ContextSanitizedState;\n    return ctx;\n  }\n\n  servePublic(): void {\n    this.use(serve(this.publicPath)); // static files\n  }\n\n  catchErrors(): void {\n    this.use(errors);\n  }\n\n  listen(): Server {\n    throw new Error('Use start instead');\n  }\n\n  /**\n   * Close server and emit close event\n   */\n  close(): void {\n    if (this._server) {\n      this._server.close();\n      this.emit('close');\n    }\n  }\n\n  async start(fn: () => Promise<void> | void): Promise<Server> {\n    await fn();\n    try {\n      const server = await _listen(this.config, this.callback(), this.certPath);\n      this._server = server;\n      logger.success('started');\n      if (process.send) process.send('ready');\n      return server;\n    } catch (err: unknown) {\n      logger.error('start fail', { err });\n      throw err;\n    }\n  }\n}\n","import { existsSync, readFileSync } from 'fs';\nimport path from 'path';\nimport { Config } from 'alp-node-config';\nimport findUp from 'findup-sync';\nimport Logger from 'nightingale-logger';\nimport type { AlpNodeAppOptions, Context } from './AlpNodeApp';\nimport { AlpNodeApp } from './AlpNodeApp';\n\nexport type { Context };\nexport { Config };\n\nconst logger = new Logger('alp');\n\n// see alp-dev\nexport const appDirname = path.resolve('build');\n\nconst packagePath = findUp('package.json', { cwd: appDirname });\nif (!packagePath) {\n  throw new Error(`Could not find package.json: \"${String(packagePath)}\"`);\n}\nexport const packageDirname = path.dirname(packagePath);\n\nlogger.debug('init', { appDirname, packageDirname });\n\nexport const packageConfig: Record<string, unknown> = JSON.parse(\n  readFileSync(packagePath, 'utf-8'),\n) as Record<string, unknown>;\n\nconst buildedConfigPath = `${appDirname}/build/config/`;\nconst configPath = existsSync(buildedConfigPath)\n  ? buildedConfigPath\n  : `${appDirname}/config/`;\n\nexport const config = new Config(configPath).loadSync({ packageConfig });\n\nexport type AppOptions = Omit<\n  AlpNodeAppOptions,\n  'appDirname' | 'packageDirname' | 'config'\n>;\n\nexport default class App extends AlpNodeApp {\n  constructor(options?: AppOptions) {\n    super({\n      ...options,\n      appDirname,\n      packageDirname,\n      config,\n    });\n  }\n}\n"],"names":["logger","Logger","AlpNodeApp","Koa","constructor","appDirname","packageDirname","config","certPath","publicPath","dirname","path","normalize","Object","defineProperty","get","deprecate","configurable","enumerable","_config","context","params","language","translate","use","compress","existsConfigSync","name","loadConfigSync","createContext","req","res","ctx","sanitizedState","servePublic","serve","catchErrors","errors","listen","Error","close","_server","emit","start","fn","server","_listen","callback","success","process","send","err","error","resolve","packagePath","findUp","cwd","String","debug","packageConfig","JSON","parse","readFileSync","buildedConfigPath","configPath","existsSync","Config","loadSync","App","options"],"mappings":"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"}