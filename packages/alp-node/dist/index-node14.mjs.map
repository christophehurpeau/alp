{"version":3,"file":"index-node14.mjs","sources":["../src/AlpNodeApp.ts","../src/index.ts"],"sourcesContent":["import type { IncomingMessage, Server, ServerResponse } from 'http';\nimport path from 'path';\nimport { deprecate } from 'util';\nimport _listen from 'alp-listen';\nimport type { Config } from 'alp-node-config';\nimport _config from 'alp-node-config';\nimport errors from 'alp-node-errors';\nimport language from 'alp-node-language';\nimport params from 'alp-params';\nimport translate from 'alp-translate';\nimport type {\n  NodeApplication,\n  NodeConfig,\n  Context as AlpContext,\n  ContextState,\n  ContextSanitizedState,\n  ContextRequest,\n} from 'alp-types';\nimport Koa from 'koa';\nimport type { ParameterizedContext, DefaultState, BaseRequest } from 'koa';\nimport compress from 'koa-compress';\nimport serve from 'koa-static';\nimport { Logger } from 'nightingale-logger';\n\nconst logger = new Logger('alp');\n\nexport interface AlpNodeAppOptions {\n  appDirname: string;\n  packageDirname: string;\n  config: Config & NodeConfig;\n  certPath?: string;\n  publicPath?: string;\n}\n\ndeclare module 'koa' {\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/no-shadow\n  interface DefaultState extends ContextState {}\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface DefaultContext extends AlpContext {}\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface BaseContext extends AlpContext {}\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface, @typescript-eslint/no-shadow\n  interface BaseRequest extends ContextRequest {}\n}\n\nexport class AlpNodeApp extends Koa<ContextState> implements NodeApplication {\n  dirname: string;\n\n  certPath: string;\n\n  publicPath: string;\n\n  config: NodeConfig & Config;\n\n  declare request: BaseRequest & ContextRequest;\n\n  _server?: Server;\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.certPath] directory of the ssl certificates\n   * @param {string} [options.publicPath] directory of public files\n   */\n  constructor({\n    appDirname,\n    packageDirname,\n    config,\n    certPath,\n    publicPath,\n  }: AlpNodeAppOptions) {\n    super();\n\n    this.dirname = path.normalize(appDirname);\n\n    Object.defineProperty(this, 'packageDirname', {\n      get: deprecate(() => packageDirname, 'packageDirname'),\n      configurable: false,\n      enumerable: false,\n    });\n\n    this.certPath = certPath || `${packageDirname}/config/cert`;\n    this.publicPath = publicPath || `${packageDirname}/public/`;\n\n    this.config = _config(this, config);\n    this.context.config = this.config;\n\n    params(this);\n    language(this);\n    translate('locales')(this);\n\n    this.use(compress());\n  }\n\n  existsConfigSync(name: string): ReturnType<Config['existsConfigSync']> {\n    return this.config.existsConfigSync(name);\n  }\n\n  loadConfigSync(name: string): ReturnType<Config['loadConfigSync']> {\n    return this.config.loadConfigSync(name);\n  }\n\n  createContext<StateT = DefaultState>(\n    req: IncomingMessage,\n    res: ServerResponse,\n  ): ParameterizedContext<StateT> {\n    const ctx = super.createContext<StateT>(req, res);\n    ctx.sanitizedState = {} as ContextSanitizedState;\n    return ctx;\n  }\n\n  servePublic(): void {\n    this.use(serve(this.publicPath)); // static files\n  }\n\n  catchErrors(): void {\n    this.use(errors);\n  }\n\n  listen(): Server {\n    throw new Error('Use start instead');\n  }\n\n  /**\n   * Close server and emit close event\n   */\n  close(): void {\n    if (this._server) {\n      this._server.close();\n      this.emit('close');\n    }\n  }\n\n  async start(fn: () => Promise<void> | void): Promise<Server> {\n    await fn();\n    try {\n      const server = await _listen(this.config, this.callback(), this.certPath);\n      this._server = server;\n      logger.success('started');\n      if (process.send) process.send('ready');\n      return server;\n    } catch (err: unknown) {\n      logger.error('start fail', { err });\n      throw err;\n    }\n  }\n}\n\nexport type { Context } from 'koa';\n","import { existsSync, readFileSync } from 'fs';\nimport path from 'path';\nimport { Config } from 'alp-node-config';\nimport { Logger } from 'nightingale-logger';\nimport type { AlpNodeAppOptions } from './AlpNodeApp';\nimport { AlpNodeApp } from './AlpNodeApp';\n\nexport { default as fetch } from 'node-fetch';\n\nexport type { Context } from './AlpNodeApp';\nexport { Config } from 'alp-node-config';\n\nconst logger = new Logger('alp');\n\nexport const appDirname = path.resolve('build');\n\nconst packagePath = path.resolve('package.json');\nif (!packagePath) {\n  throw new Error(`Could not find package.json: \"${String(packagePath)}\"`);\n}\nexport const packageDirname = path.dirname(packagePath);\n\nlogger.debug('init', { appDirname, packageDirname });\n\nexport const packageConfig: Record<string, unknown> = JSON.parse(\n  readFileSync(packagePath, 'utf-8'),\n) as Record<string, unknown>;\n\nconst buildedConfigPath = `${appDirname}/build/config/`;\nconst configPath = existsSync(buildedConfigPath)\n  ? buildedConfigPath\n  : `${appDirname}/config/`;\n\nexport const config = new Config(configPath).loadSync({ packageConfig });\n\nexport type AppOptions = Omit<\n  AlpNodeAppOptions,\n  'appDirname' | 'packageDirname' | 'config'\n>;\n\nexport default class App extends AlpNodeApp {\n  constructor(options?: AppOptions) {\n    super({\n      ...options,\n      appDirname,\n      packageDirname,\n      config,\n    });\n  }\n}\n"],"names":["logger","Logger","AlpNodeApp","Koa","constructor","appDirname","packageDirname","config","certPath","publicPath","dirname","path","normalize","Object","defineProperty","get","deprecate","configurable","enumerable","_config","context","params","language","translate","use","compress","existsConfigSync","name","loadConfigSync","createContext","req","res","ctx","sanitizedState","servePublic","serve","catchErrors","errors","listen","Error","close","_server","emit","start","fn","server","_listen","callback","success","process","send","err","error","resolve","packagePath","String","debug","packageConfig","JSON","parse","readFileSync","buildedConfigPath","configPath","existsSync","Config","loadSync","App","options"],"mappings":"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"}