{"version":3,"file":"index-node18.mjs","sources":["../src/config.ts","../src/errors.ts","../src/language.ts","../src/listen.ts","../src/params/ParamValidationResult.ts","../src/params/ParamValid.ts","../src/params/ParamValueValidator.ts","../src/params/ParamValueStringValidator.ts","../src/params/ParamValueFromContext.ts","../src/params/index.ts","../src/translate/load.ts","../src/translate/index.ts","../src/AlpNodeApp.ts","../src/router.ts","../src/index.ts"],"sourcesContent":["import { existsSync, readFileSync } from \"node:fs\";\nimport deepFreeze from \"deep-freeze-es6\";\nimport minimist from \"minimist\";\nimport parseJSON from \"parse-json-object-as-map\";\nimport type { NodeApplication, NodeConfig, PackageConfig } from \"./types\";\n\nconst argv = minimist(process.argv.slice(2));\n\nfunction _existsConfigSync(dirname: string, name: string): boolean {\n  return existsSync(`${dirname}${name}.json`);\n}\n\nfunction _loadConfigSync(dirname: string, name: string): Map<string, unknown> {\n  const content = readFileSync(`${dirname}${name}.json`, \"utf8\");\n  return parseJSON(content) as Map<string, unknown>;\n}\n\nexport interface ConfigOptions {\n  argv?: string[];\n  packageConfig?: PackageConfig;\n  version?: string;\n}\n\nexport class Config {\n  packageConfig?: PackageConfig;\n\n  private _map: Map<string, unknown>;\n\n  private readonly _dirname: string;\n\n  constructor(dirname: string, options?: ConfigOptions) {\n    this._map = new Map<string, unknown>();\n    this._dirname = dirname.replace(/\\/*$/, \"/\");\n    if (options) {\n      this.loadSync(options);\n    }\n  }\n\n  loadSync(options: ConfigOptions = {}): Config & NodeConfig {\n    const env = process.env.CONFIG_ENV || process.env.NODE_ENV || \"development\";\n    const { argv: argvOverrides = [], packageConfig, version } = options;\n    this.packageConfig = packageConfig;\n\n    const config = this.loadConfigSync(\"common\") as Map<string, unknown>;\n    for (const [key, value] of this.loadConfigSync(env)) {\n      config.set(key, value);\n    }\n\n    if (this.existsConfigSync(\"local\")) {\n      for (const [key, value] of this.loadConfigSync(\"local\")) {\n        config.set(key, value);\n      }\n    }\n\n    if (config.has(\"version\")) {\n      throw new Error('Cannot have \"version\", in config.');\n    }\n\n    config.set(\n      \"version\",\n      String(version || argv.version || packageConfig?.version),\n    );\n\n    const socketPath: string | undefined = (argv.socket ||\n      argv[\"socket-path\"] ||\n      argv.socketPath) as string | undefined;\n    if (socketPath) {\n      config.set(\"socketPath\", socketPath);\n    } else if (argv.port) {\n      config.set(\"port\", argv.port);\n      config.delete(\"socketPath\");\n    } else if (process.env.PORT) {\n      config.set(\"port\", Number(process.env.PORT));\n      config.delete(\"socketPath\");\n    }\n\n    argvOverrides.forEach((key) => {\n      const splitted = key.split(\".\");\n      const value =\n        splitted.length > 0 &&\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return,unicorn/no-array-reduce\n        splitted.reduce((config, partialKey) => config[partialKey], argv);\n      if (value !== undefined) {\n        const last = splitted.pop()!;\n        const map =\n          splitted.length === 0\n            ? config\n            : // eslint-disable-next-line unicorn/no-array-reduce\n              splitted.reduce(\n                (config, partialKey) =>\n                  config.get(partialKey) as Map<string, unknown>,\n                config,\n              );\n        map.set(last, value);\n      }\n    });\n\n    this._map = deepFreeze(config);\n    return this as Config & NodeConfig;\n  }\n\n  get<T>(key: string): T {\n    return this._map.get(key) as T;\n  }\n\n  existsConfigSync(name: string): boolean {\n    return _existsConfigSync(this._dirname, name);\n  }\n\n  loadConfigSync(name: string): ReadonlyMap<string, unknown> {\n    return _loadConfigSync(this._dirname, name);\n  }\n}\n\nexport default function getConfig(\n  app: NodeApplication,\n  config: Config & NodeConfig,\n): Config & NodeConfig {\n  return config;\n}\n","/* eslint-disable complexity */\nimport { STATUS_CODES } from \"node:http\";\nimport ErrorHtmlRenderer from \"error-html\";\nimport { Logger } from \"nightingale-logger\";\nimport type { Context } from \"./AlpNodeApp\";\nimport type { HtmlError } from \"./types\";\n\nconst logger = new Logger(\"alp:errors\");\nconst errorHtmlRenderer = new ErrorHtmlRenderer({\n  appPath: `${process.cwd()}/`,\n});\n\nexport default async function alpNodeErrors(\n  ctx: Context,\n  next: () => Promise<void> | void,\n): Promise<void> {\n  try {\n    await next();\n  } catch (error: unknown) {\n    // eslint-disable-next-line no-ex-assign\n    if (!error) error = new Error(\"Unknown error\");\n    // eslint-disable-next-line no-ex-assign\n    if (typeof error === \"string\") error = new Error(error);\n\n    ctx.status = (error as HtmlError).status || 500;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    logger.error(error as any);\n\n    switch (ctx.request.accepts(\"html\", \"text\", \"json\")) {\n      case \"json\":\n        ctx.type = \"application/json\";\n        if (\n          process.env.NODE_ENV !== \"production\" ||\n          (error as HtmlError).expose\n        ) {\n          ctx.body = { error: (error as Error).message };\n        } else {\n          ctx.body = { error: STATUS_CODES[ctx.status] };\n        }\n\n        break;\n\n      case \"html\":\n        ctx.type = \"text/html\";\n        if (process.env.NODE_ENV !== \"production\") {\n          ctx.body = errorHtmlRenderer.render(error as Error);\n        } else if ((error as HtmlError).expose) {\n          ctx.body = (error as Error).message;\n        } else {\n          throw error;\n        }\n\n        break;\n\n      case \"text\":\n      default:\n        ctx.type = \"text/plain\";\n        if (\n          process.env.NODE_ENV !== \"production\" ||\n          (error as HtmlError).expose\n        ) {\n          ctx.body = (error as Error).message;\n        } else {\n          throw error;\n        }\n\n        break;\n    }\n  }\n}\n","import type { Context } from \"koa\";\nimport { defineLazyProperty } from \"object-properties\";\nimport type { AlpNodeApp } from \"./AlpNodeApp\";\n\nexport interface AlpLanguageContext {\n  readonly firstAcceptedLanguage: string;\n  readonly language: string;\n}\nexport default function alpLanguage(app: AlpNodeApp): void {\n  const config = app.context.config;\n  const availableLanguages: string[] = config.get(\"availableLanguages\");\n  if (!availableLanguages) {\n    throw new Error('Missing config \"availableLanguages\"');\n  }\n\n  defineLazyProperty(app.context, \"language\", function (this: Context): string {\n    return this.acceptsLanguages(availableLanguages) || availableLanguages[0];\n  });\n\n  defineLazyProperty(\n    app.context,\n    \"firstAcceptedLanguage\",\n    function (this: Context): string {\n      return this.acceptsLanguages()[0] || availableLanguages[0];\n    },\n  );\n}\n","import { chmodSync, unlinkSync, readFileSync } from \"node:fs\";\nimport { createServer as createServerHttp } from \"node:http\";\nimport type { Server, IncomingMessage, ServerResponse } from \"node:http\";\nimport { createServer as createServerHttps } from \"node:https\";\nimport { Logger } from \"nightingale-logger\";\nimport type { Config } from \"./config\";\n\nconst logger = new Logger(\"alp:listen\");\n\ntype RequestListener = (req: IncomingMessage, res: ServerResponse) => void;\n\nconst createServer = (\n  callback: RequestListener,\n  socketPath?: string,\n  tls?: boolean,\n  dirname = \"\",\n  // eslint-disable-next-line @typescript-eslint/max-params\n): Server => {\n  const createHttpServer =\n    !socketPath && tls ? createServerHttps : createServerHttp;\n\n  if (!tls) {\n    return (createHttpServer as typeof createServerHttps)(callback);\n  }\n\n  const options = {\n    key: readFileSync(`${dirname}/server.key`),\n    cert: readFileSync(`${dirname}/server.crt`),\n  };\n\n  return (createHttpServer as typeof createServerHttps)(options, callback);\n};\n\nexport default function alpListen(\n  config: Config,\n  callback: RequestListener,\n  dirname?: string,\n): Promise<Server> {\n  return new Promise((resolve) => {\n    const socketPath = config.get<string>(\"socketPath\");\n    const port = config.get<number>(\"port\");\n    const hostname = config.get<string>(\"hostname\");\n    const tls = config.get<boolean>(\"tls\");\n\n    logger.info(\"Creating server\", socketPath ? { socketPath } : { port });\n    const server = createServer(callback, socketPath, tls, dirname);\n\n    if (socketPath) {\n      try {\n        unlinkSync(socketPath);\n      } catch {}\n\n      server.listen(socketPath, () => {\n        if (socketPath) {\n          chmodSync(socketPath, \"777\");\n        }\n\n        logger.info(\"Server listening\", { socketPath });\n        resolve(server);\n      });\n    } else {\n      server.listen(port, hostname, () => {\n        logger.info(\"Server listening\", { port });\n        resolve(server);\n      });\n    }\n  });\n}\n","export type Errors = Record<string, any>;\n\nexport class ParamValidationResult {\n  _errors?: Errors;\n\n  _error(name: string, key: string, value: unknown): void {\n    if (!this._errors) {\n      this._errors = {};\n    }\n\n    this._errors[name] = { error: key, value };\n  }\n\n  getErrors(): Errors | undefined {\n    return this._errors;\n  }\n\n  hasErrors(): boolean {\n    return this._errors !== undefined;\n  }\n\n  isValid(): boolean {\n    return this._errors === undefined;\n  }\n\n  // string(name: string): ParamValueStringValidator {\n  //   return new ParamValueStringValidator(this, name, this.context.param(name));\n  // }\n  /* int(name, position) {\n   return new ParamValueIntValidator(this, name, this.context.param(name, position));\n   }\n   model(modelName, name) {\n   name = name || S.string.lcFirst(modelName);\n   console.log('paramvalidator model', modelName, M[modelName]);\n   let data = this.context.getOrPostParam(name);\n   return new ParamValueModelValidator(this, name, !data ? null : new M[modelName](data));\n   } */\n}\n","import type { Context } from \"../AlpNodeApp\";\nimport { ParamValidationResult } from \"./ParamValidationResult\";\n\nexport default class ParamValid extends ParamValidationResult {\n  context: Context;\n\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  override _error(): void {\n    this.context.throw(400, \"Invalid params\", { validator: this });\n  }\n}\n","import type { ParamValidationResult } from \"./ParamValidationResult\";\n\nexport default class ParamValueValidator<T> {\n  readonly validationResult: ParamValidationResult;\n\n  readonly name: string;\n\n  readonly value: T;\n\n  constructor(validationResult: ParamValidationResult, name: string, value: T) {\n    this.validationResult = validationResult;\n    this.name = name;\n    this.value = value;\n  }\n\n  isValid(): boolean {\n    return this.validationResult.isValid();\n  }\n\n  _error(key: string): void {\n    this.validationResult._error(this.name, key, this.value);\n  }\n}\n","import ParamValueValidator from \"./ParamValueValidator\";\n\nexport default class ParamValueStringValidator<\n  T extends string = string,\n> extends ParamValueValidator<T | null | undefined> {\n  notEmpty(): ParamValueValidator<T> {\n    if (this.value == null || this.value.trim() === \"\") {\n      this._error(\"notEmpty\");\n    }\n\n    return this as ParamValueValidator<T>;\n  }\n}\n","import type { Context } from \"../AlpNodeApp\";\nimport type { ParamValidationResult } from \"./ParamValidationResult\";\nimport ParamValueStringValidator from \"./ParamValueStringValidator\";\n\nexport class ParamValueFromContext {\n  readonly validationResult: ParamValidationResult;\n\n  readonly context: Context;\n\n  constructor(context: Context, validationResult: ParamValidationResult) {\n    this.validationResult = validationResult;\n    this.context = context;\n  }\n\n  namedParam(name: string): ParamValueStringValidator {\n    return new ParamValueStringValidator(\n      this.validationResult,\n      name,\n      this.context.namedParam(name),\n    );\n  }\n\n  otherParam(position: number): ParamValueStringValidator {\n    return new ParamValueStringValidator(\n      this.validationResult,\n      String(position),\n      this.context.otherParam(position),\n    );\n  }\n\n  queryParam(name: string): ParamValueStringValidator {\n    return new ParamValueStringValidator(\n      this.validationResult,\n      name,\n      this.context.queryParam(name),\n    );\n  }\n\n  // bodyParam: <T>(name: string): ParamValueValidator<string | undefined> {\n\n  // }\n}\n","import { defineLazyProperty } from \"object-properties\";\nimport type { AlpNodeApp, Context } from \"../AlpNodeApp\";\nimport ParamValid from \"./ParamValid\";\nimport { ParamValidationResult } from \"./ParamValidationResult\";\nimport { ParamValueFromContext } from \"./ParamValueFromContext\";\n\nexport interface AlpParamsContext {\n  params: ParamValueFromContext;\n  validParams: ParamValueFromContext;\n  namedParam: (name: string) => string | undefined;\n  otherParam: (position: number) => string | undefined;\n  queryParam: (name: string) => string | undefined;\n  bodyParam: <T>(name: string) => T | undefined;\n}\n\nexport interface AlpParamsRequest {\n  searchParams: URLSearchParams;\n}\n\nexport default function alpParams(app: AlpNodeApp): void {\n  Object.assign(app.context, {\n    namedRouteParam(this: Context, name: string): string | undefined {\n      const namedParams = this.route.namedParams;\n      return namedParams?.get(name);\n    },\n\n    otherRouteParam(this: Context, position: number): string | undefined {\n      const otherParams = this.route.otherParams;\n      return otherParams?.[position - 1];\n    },\n\n    queryParam(this: Context, name: string): string | undefined {\n      const searchParams = this.request.searchParams;\n      return searchParams.get(name) ?? undefined;\n    },\n\n    bodyParam<T>(this: Context, name: string): T | undefined {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access\n      return (this.body as any)[name];\n    },\n  });\n\n  defineLazyProperty(\n    app.request,\n    \"searchParams\",\n    function (this: Context[\"request\"]): URLSearchParams {\n      return new URLSearchParams(this.search);\n    },\n  );\n\n  defineLazyProperty(\n    app.context,\n    \"params\",\n    function (this: Context): ParamValueFromContext {\n      return new ParamValueFromContext(this, new ParamValidationResult());\n    },\n  );\n\n  defineLazyProperty(\n    app.context,\n    \"validParams\",\n    function (this: Context): ParamValueFromContext {\n      return new ParamValueFromContext(this, new ParamValid(this));\n    },\n  );\n}\n","import IntlMessageFormatDefault from \"intl-messageformat\";\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst IntlMessageFormat: typeof IntlMessageFormatDefault =\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  (IntlMessageFormatDefault as any).default || IntlMessageFormatDefault;\n\nexport type Translations = ReadonlyMap<string, IntlMessageFormatDefault>;\n\nexport default function load(\n  translations: ReadonlyMap<string, unknown>,\n  language: string,\n): Translations {\n  const result = new Map();\n\n  (function loadMap(map, prefix) {\n    map.forEach((value: any, key) => {\n      if (typeof value === \"object\") {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        loadMap(value, `${prefix}${key}.`);\n        return;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      result.set(`${prefix}${key}`, new IntlMessageFormat(value, language));\n    });\n  })(translations, \"\");\n\n  return result;\n}\n","import { Logger } from \"nightingale-logger\";\nimport type { AlpNodeApp, Context } from \"../AlpNodeApp\";\nimport type { Translations } from \"./load\";\nimport load from \"./load\";\n\nconst logger = new Logger(\"alp:translate\");\n\ntype Args = Record<string, any>;\n\nexport interface TranslateBaseContext {\n  t: (id: string, args: Args) => string;\n}\nexport interface TranslateContext {\n  readonly language: string;\n}\n\nexport default function alpTranslate(\n  dirname: string,\n): (app: AlpNodeApp) => void {\n  dirname = dirname.replace(/\\/*$/, \"/\");\n  return (app: AlpNodeApp) => {\n    const appTranslations = new Map<string, Translations>();\n\n    Object.assign(app.context, {\n      t(this: Context, id: string, args: Args): string {\n        const msg = appTranslations.get(this.language)!.get(id);\n        if (!msg) {\n          logger.warn(\"invalid msg\", { language: this.language, id });\n          return id;\n        }\n\n        return msg.format(args) as string;\n      },\n    });\n\n    const config = app.config;\n\n    config.get<string[]>(\"availableLanguages\").forEach((language) => {\n      const translations = app.loadConfigSync(dirname + language);\n      appTranslations.set(language, load(translations, language));\n    });\n\n    return appTranslations;\n  };\n}\n","import type { IncomingMessage, Server, ServerResponse } from \"node:http\";\nimport path from \"node:path\";\nimport { deprecate } from \"node:util\";\nimport Koa from \"koa\";\nimport type { ParameterizedContext, DefaultState } from \"koa\";\nimport compress from \"koa-compress\";\nimport serve from \"koa-static\";\nimport { Logger } from \"nightingale-logger\";\nimport type { Router } from \"router-segments\";\nimport type { Config } from \"./config\";\nimport _config from \"./config\";\nimport errors from \"./errors\";\nimport type { AlpLanguageContext } from \"./language\";\nimport language from \"./language\";\nimport _listen from \"./listen\";\nimport type { AlpParamsContext, AlpParamsRequest } from \"./params\";\nimport params from \"./params\";\nimport type {\n  AlpRouteRef,\n  RouterContext as AlpRouterContext,\n  UrlGenerator,\n} from \"./router\";\nimport type { TranslateBaseContext, TranslateContext } from \"./translate\";\nimport translate from \"./translate\";\nimport type {\n  NodeApplication,\n  NodeConfig,\n  Context as AlpContext,\n  ContextState,\n  ContextSanitizedState,\n} from \"./types\";\n\nconst logger = new Logger(\"alp\");\n\nexport interface AlpNodeAppOptions {\n  appDirname: string;\n  packageDirname: string;\n  config: Config & NodeConfig;\n  certPath?: string;\n  publicPath?: string;\n}\n\ndeclare module \"koa\" {\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface DefaultState extends ContextState {}\n\n  interface DefaultContext\n    extends AlpContext,\n      AlpParamsContext,\n      AlpRouterContext,\n      AlpLanguageContext,\n      TranslateContext {}\n\n  interface BaseContext extends AlpContext, TranslateBaseContext {\n    urlGenerator: UrlGenerator;\n    redirectTo: <P extends Record<string, unknown>>(\n      to: string,\n      params?: P,\n    ) => void;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface BaseRequest extends AlpParamsRequest {}\n}\n\nexport class AlpNodeApp extends Koa<ContextState> implements NodeApplication {\n  dirname: string;\n\n  certPath: string;\n\n  publicPath: string;\n\n  config: Config & NodeConfig;\n\n  _server?: Server;\n\n  router?: Router<any, AlpRouteRef>;\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.certPath] directory of the ssl certificates\n   * @param {string} [options.publicPath] directory of public files\n   */\n  constructor({\n    appDirname,\n    packageDirname,\n    config,\n    certPath,\n    publicPath,\n  }: AlpNodeAppOptions) {\n    super();\n\n    this.dirname = path.normalize(appDirname);\n\n    Object.defineProperty(this, \"packageDirname\", {\n      get: deprecate(() => packageDirname, \"packageDirname\"),\n      configurable: false,\n      enumerable: false,\n    });\n\n    this.certPath = certPath || `${packageDirname}/config/cert`;\n    this.publicPath = publicPath || `${packageDirname}/public/`;\n\n    this.config = _config(this, config);\n    this.context.config = this.config;\n\n    params(this);\n    language(this);\n    translate(\"locales\")(this);\n\n    this.use(compress());\n  }\n\n  existsConfigSync(name: string): ReturnType<Config[\"existsConfigSync\"]> {\n    return this.config.existsConfigSync(name);\n  }\n\n  loadConfigSync(name: string): ReturnType<Config[\"loadConfigSync\"]> {\n    return this.config.loadConfigSync(name);\n  }\n\n  override createContext<StateT = DefaultState>(\n    req: IncomingMessage,\n    res: ServerResponse,\n  ): ParameterizedContext<StateT> {\n    const ctx = super.createContext<StateT>(req, res);\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    ctx.sanitizedState = {} as ContextSanitizedState;\n    return ctx;\n  }\n\n  servePublic(): void {\n    this.use(serve(this.publicPath)); // static files\n  }\n\n  catchErrors(): void {\n    this.use(errors);\n  }\n\n  override listen(): never {\n    throw new Error(\"Use start instead\");\n  }\n\n  /**\n   * Close server and emit close event\n   */\n  close(): void {\n    if (this._server) {\n      this._server.close();\n      this.emit(\"close\");\n    }\n  }\n\n  async start(fn: () => Promise<void> | void): Promise<Server> {\n    await fn();\n    try {\n      const server = await _listen(this.config, this.callback(), this.certPath);\n      this._server = server;\n      logger.success(\"started\");\n      if (process.send) process.send(\"ready\");\n      return server;\n    } catch (error: unknown) {\n      logger.error(\"start fail\", { err: error });\n      throw error;\n    }\n  }\n}\n\nexport type { Context } from \"koa\";\n\nexport { type NodeApplication } from \"./types\";\n","import type {\n  Router,\n  LocaleType,\n  RouterBuilder,\n  RouteMatch,\n} from \"router-segments\";\nimport { createRouterBuilder } from \"router-segments\";\nimport type { AlpNodeApp, Context } from \"./AlpNodeApp\";\n\nexport type AlpRouter<Locales extends LocaleType> = Router<\n  Locales,\n  AlpRouteRef\n>;\nexport type AlpRouteRef = (ctx: Context) => Promise<void> | void;\ntype ReturnType = (app: AlpNodeApp) => AlpRouteRef;\n\nexport interface RouterContext {\n  route: RouteMatch<any, AlpRouteRef>;\n}\nexport const createAlpRouterBuilder = <\n  Locales extends LocaleType,\n>(): RouterBuilder<Locales, AlpRouteRef> =>\n  createRouterBuilder<Locales, AlpRouteRef>();\n\nexport type UrlGenerator = <P extends Record<string, unknown> | undefined>(\n  routeKey: string,\n  params?: P,\n) => string;\n\nexport default function alpRouter<Locales extends string>(\n  router: Router<Locales, AlpRouteRef>,\n): ReturnType {\n  return (app: AlpNodeApp) => {\n    app.router = router;\n\n    app.context.urlGenerator = function <\n      P extends Record<string, unknown> | undefined,\n    >(this: Context, routeKey: string, params?: P): string {\n      return router.toLocalizedPath(this.language as Locales, routeKey, params);\n    };\n\n    app.context.redirectTo = function <\n      P extends Record<string, unknown> | undefined,\n    >(this: Context, to: string, params?: P): void {\n      this.redirect(\n        router.toLocalizedPath(this.language as Locales, to, params),\n      );\n    };\n\n    return async (ctx: Context): Promise<void> => {\n      // eslint-disable-next-line unicorn/no-array-method-this-argument\n      const routeMatch = router.find(ctx.request.path, ctx.language as Locales);\n\n      if (!routeMatch) {\n        ctx.status = 404;\n        throw new Error(`Route not found: ${ctx.request.path}`);\n      }\n\n      ctx.route = routeMatch;\n\n      await routeMatch.ref(ctx);\n    };\n  };\n}\n","import { existsSync, readFileSync } from \"node:fs\";\nimport path from \"node:path\";\nimport { Logger } from \"nightingale-logger\";\nimport type { AlpNodeAppOptions } from \"./AlpNodeApp\";\nimport { AlpNodeApp } from \"./AlpNodeApp\";\nimport { Config } from \"./config\";\n\nexport type {\n  BaseContext,\n  NodeApplication,\n  NodeConfig,\n  ContextState,\n  ContextSanitizedState,\n} from \"./types\";\nexport type { Context } from \"./AlpNodeApp\";\n\nconst logger = new Logger(\"alp\");\n\nexport const appDirname = path.resolve(\"build\");\n\nconst packagePath = path.resolve(\"package.json\");\nif (!packagePath) {\n  throw new Error(`Could not find package.json: \"${String(packagePath)}\"`);\n}\nexport const packageDirname = path.dirname(packagePath);\n\nlogger.debug(\"init\", { appDirname, packageDirname });\n\nexport const packageConfig: Record<string, unknown> = JSON.parse(\n  readFileSync(packagePath, \"utf8\"),\n) as Record<string, unknown>;\n\nconst buildedConfigPath = `${appDirname}/build/config/`;\nconst configPath = existsSync(buildedConfigPath)\n  ? buildedConfigPath\n  : `${appDirname}/config/`;\n\nexport const config = new Config(configPath).loadSync({ packageConfig });\n\nexport type AppOptions = Omit<\n  AlpNodeAppOptions,\n  \"appDirname\" | \"config\" | \"packageDirname\"\n>;\n\nexport default class App extends AlpNodeApp {\n  constructor(options?: AppOptions) {\n    super({\n      ...options,\n      appDirname,\n      packageDirname,\n      config,\n    });\n  }\n}\n\nexport { Config } from \"./config\";\n\nexport {\n  default as router,\n  createAlpRouterBuilder,\n  type AlpRouteRef,\n  type AlpRouter,\n} from \"./router\";\n"],"names":["argv","minimist","process","slice","_existsConfigSync","dirname","name","existsSync","_loadConfigSync","content","readFileSync","parseJSON","Config","constructor","options","_map","Map","_dirname","replace","loadSync","env","CONFIG_ENV","NODE_ENV","argvOverrides","packageConfig","version","config","loadConfigSync","key","value","set","existsConfigSync","has","Error","String","socketPath","socket","port","delete","PORT","Number","forEach","splitted","split","length","reduce","partialKey","undefined","last","pop","map","get","deepFreeze","getConfig","app","logger","Logger","errorHtmlRenderer","ErrorHtmlRenderer","appPath","cwd","alpNodeErrors","ctx","next","error","status","request","accepts","type","expose","body","message","STATUS_CODES","render","alpLanguage","context","availableLanguages","defineLazyProperty","acceptsLanguages","createServer","callback","tls","createHttpServer","createServerHttps","createServerHttp","cert","alpListen","Promise","resolve","hostname","info","server","unlinkSync","listen","chmodSync","ParamValidationResult","_error","_errors","getErrors","hasErrors","isValid","ParamValid","throw","validator","ParamValueValidator","validationResult","ParamValueStringValidator","notEmpty","trim","ParamValueFromContext","namedParam","otherParam","position","queryParam","alpParams","Object","assign","namedRouteParam","namedParams","route","otherRouteParam","otherParams","searchParams","bodyParam","URLSearchParams","search","IntlMessageFormat","IntlMessageFormatDefault","default","load","translations","language","result","loadMap","prefix","alpTranslate","appTranslations","t","id","args","msg","warn","format","AlpNodeApp","Koa","appDirname","packageDirname","certPath","publicPath","path","normalize","defineProperty","deprecate","configurable","enumerable","_config","params","translate","use","compress","createContext","req","res","sanitizedState","servePublic","serve","catchErrors","errors","close","_server","emit","start","fn","_listen","success","send","err","createAlpRouterBuilder","createRouterBuilder","alpRouter","router","urlGenerator","routeKey","toLocalizedPath","redirectTo","to","redirect","routeMatch","find","ref","packagePath","debug","JSON","parse","buildedConfigPath","configPath","App"],"mappings":"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"}