{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;sDAYS,O;;;;AAZT;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAIqB,G,GAAN,MAAM,GAAN,uBAAsB;;;;;;;AAOjC,kBAAgG;AAAA,YAApF,cAAoF,yDAAnE,QAAQ,GAAR,EAAmE;AAAA,YAApD,UAAoD,yDAAvC,CAAC,AAAD,GAAG,cAAH,EAAkB,IAAlB,CAAuC;AAAA,YAAd,OAAc,yDAAJ,EAAI;;AAC5F;AACA,aAAK,cAAL,GAAsB,cAAtB;AACA,aAAK,OAAL,GAAe,UAAf;AACA,cAAM,gBAAgB,QAAQ,CAAC,AAAD,GAAG,cAAH,EAAkB,aAAlB,CAAR,CAAtB;AACA,iCAAO,CAAC,AAAD,GAAG,KAAK,OAAR,EAAgB,OAAhB,CAAP,EAAiC;AAC7B,wCAD6B;AAE7B,kBAAM,QAAQ;AAFe,SAAjC,EAGG,IAHH;AAIA,qCAAO,IAAP;AACA,mCAAS,IAAT;AACA,iCAAO,IAAP;AACA,oCAAU,SAAV,EAAqB,IAArB;AACA,aAAK,GAAL,CAAS,4BAAT;AACH;;;;MAED,IAAI,WAAJ,GAAkB;AACd,eAAO,KAAK,GAAZ;AACH;;;;MAED,IAAI,UAAJ,GAAiB;AACb,eAAO,KAAK,GAAL,KAAa,MAAb,IAAuB,KAAK,GAAL,KAAa,YAA3C;AACH;;;;;MAED,aAAa,aAAb,EAA4B,WAA5B,EAAyC;AACrC,eAAO,yBAAO,aAAP,EAAsB,WAAtB,EAAmC,IAAnC,CAAP;AACH;;AAED,kBAAc;AACV,aAAK,GAAL,CAAS,yBAAM,CAAC,AAAD,GAAG,KAAK,cAAR,EAAuB,QAAvB,CAAN,CAAT,E;AACH;;AAED,kBAAc;AACV,aAAK,GAAL;AACH;;;;;MAED,UAAU,aAAV,EAAyB,WAAzB,EAAsC;AAClC,wBAAgB,iBAAiB,QAAQ,CAAC,AAAD,GAAG,KAAK,OAAR,EAAgB,cAAhB,CAAR,CAAjC;AACA,sBAAc,eAAe,QAAQ,CAAC,AAAD,GAAG,KAAK,OAAR,EAAgB,YAAhB,CAAR,CAA7B;AACA,aAAK,GAAL,CAAS,KAAK,YAAL,CAAkB,aAAlB,EAAiC,WAAjC,CAAT;AACH;;AAED,aAAS;AACL,eAAO,yBAAQ,CAAC,AAAD,GAAG,KAAK,cAAR,EAAuB,YAAvB,CAAR,EAA8C,IAA9C,EACF,KADE,CACI,OAAO;AACV,iBAAK,MAAL,CAAY,KAAZ,CAAkB,GAAlB;AACA,kBAAM,GAAN;AACH,SAJE,CAAP;AAKH;AAvDgC,C;kBAAhB,G","file":"index.js","sourcesContent":["import Koa from 'koa';\nimport compress from 'koa-compress';\nimport serve from 'koa-static';\nimport config from 'alp-config';\nimport errors from 'alp-errors-node';\nimport params from 'alp-params-node';\nimport language from 'alp-language';\nimport logger from 'alp-logger';\nimport translate from 'alp-translate';\nimport router from 'alp-limosa';\nimport _listen from 'alp-listen';\n\nexport { default as newController } from 'alp-controller';\n\nexport default class Alp extends Koa {\n    /**\n     * @param {string} [packageDirname] directory of the package (where package.json is)\n     * @param {string} [srcDirname] directory of the application\n     * @param {Object} [options]\n     * @param {array} [options.argv] list of overridable config by argv\n     */\n    constructor(packageDirname = process.cwd(), srcDirname = `${packageDirname}/lib`, options = {}) {\n        super();\n        this.packageDirname = packageDirname;\n        this.dirname = srcDirname;\n        const packageConfig = require(`${packageDirname}/package.json`);\n        config(`${this.dirname}/config`, {\n            packageConfig,\n            argv: options.argv,\n        })(this);\n        params(this);\n        language(this);\n        logger(this);\n        translate('locales')(this);\n        this.use(compress());\n    }\n\n    get environment() {\n        return this.env;\n    }\n\n    get production() {\n        return this.env === 'prod' || this.env === 'production';\n    }\n\n    createRouter(routerBuilder, controllers) {\n        return router(routerBuilder, controllers)(this);\n    }\n\n    servePublic() {\n        this.use(serve(`${this.packageDirname}/public/`)); // static files\n    }\n\n    catchErrors() {\n        this.use(errors);\n    }\n\n    useRouter(routerBuilder, controllers) {\n        routerBuilder = routerBuilder || require(`${this.dirname}/routerBuilder`);\n        controllers = controllers || require(`${this.dirname}/controllers`);\n        this.use(this.createRouter(routerBuilder, controllers));\n    }\n\n    listen() {\n        return _listen(`${this.packageDirname}/config/cert`)(this)\n            .catch(err => {\n                this.logger.error(err);\n                throw err;\n            });\n    }\n}\n"]}