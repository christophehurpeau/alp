{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEqB,MAAN,MAAM,GAAN,uBAAsB;;;;;;AAMjC,kBAA4D;YAAhD,gEAAU,CAAC,GAAE,QAAQ,GAAR,EAAH,EAAiB,IAAjB,iBAAsC;YAAd,gEAAU,kBAAI;;AACxD,gBADwD;AAExD,aAAK,OAAL,GAAe,OAAf,CAFwD;AAGxD,cAAM,gBAAgB,QAAQ,CAAC,GAAE,OAAH,EAAW,gBAAX,CAAR,CAAhB,CAHkD;AAIxD,iCAAO,CAAC,GAAE,KAAK,OAAL,EAAa,OAAhB,CAAP,EAAiC;AAC7B,wCAD6B;AAE7B,kBAAM,QAAQ,IAAR;SAFV,EAGG,IAHH,EAJwD;AAQxD,qCAAO,IAAP,EARwD;AASxD,mCAAS,IAAT,EATwD;AAUxD,iCAAO,IAAP,EAVwD;AAWxD,oCAAU,SAAV,EAAqB,IAArB,EAXwD;AAYxD,aAAK,GAAL,CAAS,4BAAT,EAZwD;KAA5D;;;;MAeA,IAAI,WAAJ,GAAkB;AACd,eAAO,KAAK,GAAL,CADO;KAAlB;;;;;MAIA,aAAa,aAAb,EAA4B,WAA5B,EAAyC;AACrC,eAAO,yBAAO,aAAP,EAAsB,WAAtB,EAAmC,IAAnC,CAAP,CADqC;KAAzC;;AAIA,kBAAc;AACV,aAAK,GAAL,CAAS,yBAAM,CAAC,GAAE,KAAK,OAAL,EAAa,WAAhB,CAAN,CAAT;AADU,KAAd;;AAIA,kBAAc;AACV,aAAK,GAAL,0BADU;KAAd;;;;;MAIA,UAAU,aAAV,EAAyB,WAAzB,EAAsC;AAClC,wBAAgB,iBAAiB,QAAQ,CAAC,GAAE,KAAK,OAAL,EAAa,cAAhB,CAAR,CAAjB,CADkB;AAElC,sBAAc,eAAe,QAAQ,CAAC,GAAE,KAAK,OAAL,EAAa,YAAhB,CAAR,CAAf,CAFoB;AAGlC,aAAK,GAAL,CAAS,KAAK,YAAL,CAAkB,aAAlB,EAAiC,WAAjC,CAAT,EAHkC;KAAtC;;AAMA,aAAS;AACL,eAAO,yBAAQ,CAAC,GAAE,KAAK,OAAL,EAAa,eAAhB,CAAR,EAA0C,IAA1C,EACF,KADE,CACI,OAAO;AACV,iBAAK,MAAL,CAAY,KAAZ,CAAkB,GAAlB,EADU;AAEV,kBAAM,GAAN,CAFU;SAAP,CADX,CADK;KAAT;CA3CW;kBAAM","file":"index.js","sourcesContent":["import Koa from 'koa';\nimport compress from 'koa-compress';\nimport serve from 'koa-static';\nimport config from 'alp-config';\nimport errors from 'alp-errors-node';\nimport params from 'alp-params-node';\nimport language from 'alp-language';\nimport logger from 'alp-logger';\nimport translate from 'alp-translate';\nimport router from 'alp-limosa';\nimport _listen from 'alp-listen';\n\nexport default class Alp extends Koa {\n    /**\n     * @param {string} [dirname] directory of the application (lib/) or `process.cwd() + '/lib'`\n     * @param {Object} [options]\n     * @param {array} [options.argv] list of overridable config by argv\n     */\n    constructor(dirname = `${process.cwd()}/lib`, options = {}) {\n        super();\n        this.dirname = dirname;\n        const packageConfig = require(`${dirname}/../package.json`);\n        config(`${this.dirname}/config`, {\n            packageConfig,\n            argv: options.argv,\n        })(this);\n        params(this);\n        language(this);\n        logger(this);\n        translate('locales')(this);\n        this.use(compress());\n    }\n\n    get environment() {\n        return this.env;\n    }\n\n    createRouter(routerBuilder, controllers) {\n        return router(routerBuilder, controllers)(this);\n    }\n\n    servePublic() {\n        this.use(serve(`${this.dirname}/../public/`)); // static files\n    }\n\n    catchErrors() {\n        this.use(errors);\n    }\n\n    useRouter(routerBuilder, controllers) {\n        routerBuilder = routerBuilder || require(`${this.dirname}/routerBuilder`);\n        controllers = controllers || require(`${this.dirname}/controllers`);\n        this.use(this.createRouter(routerBuilder, controllers));\n    }\n\n    listen() {\n        return _listen(`${this.dirname}/../config/cert`)(this)\n            .catch(err => {\n                this.logger.error(err);\n                throw err;\n            });\n    }\n}\n"]}