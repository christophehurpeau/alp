{"version":3,"sources":["../../src/http/RequestContext.js"],"names":[],"mappings":";;;;;;;;;;;;;;IAAqB,cAAc;AACpB,aADM,cAAc,CACnB,OAAO,EAAE,QAAQ,EAAE;8BADd,cAAc;;AAE3B,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,YAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,YAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;KAC1B;;;;;;;;;;;;;;iBALgB,cAAc;;eAarB,oBAAC,cAAc,EAAE,UAAU,EAAE;AACnC,kBAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;AACjC,gBAAI,CAAC,UAAU,EAAE;AACb,0BAAU,GAAG,cAAc,CAAC;AAC5B,8BAAc,GAAG,KAAK,CAAC,UAAU,CAAC;aACrC;;AAED,kBAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAC9D,gBAAI,CAAC,UAAU,EAAE;AACb,uBAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,EAAE,wBAAwB,GAAG,cAAc,CAAC,CAAC;aACvF;;AAED,kBAAM,MAAM,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC;AACtC,gBAAI,CAAC,MAAM,2BAA0B;AACjC,2BAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,EAAE,oBAAoB,GAChD,KAAK,CAAC,UAAU,GAAG,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;iBACvD;;AAED,gBAAI;AACA,uBAAO,SAAQ,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;aAC1F,CAAC,OAAO,GAAG,EAAE;AACV,uBAAO,SAAQ,MAAM,CAAC,GAAG,CAAC,CAAC;aAC9B;SACJ;;;WApCgB,cAAc;;;kBAAd,cAAc","file":"RequestContext.js","sourcesContent":["export default class RequestContext {\n    constructor(request, response) {\n        this.request = request;\n        this.response = response;\n        this.app = request.app;\n    }\n\n    /**\n     *\n     * @param {string} controllerName\n     * @param {string} actionName\n     * @returns {*}\n     */\n    callAction(controllerName, actionName) {\n        const route = this.request.route;\n        if (!actionName) {\n            actionName = controllerName;\n            controllerName = route.controller;\n        }\n\n        const controller = this.app.controllers.get(route.controller);\n        if (!controller) {\n            return this.response.notFound(undefined, 'Controller not found: ' + controllerName);\n        }\n\n        const action = controller[actionName];\n        if (!action/* || !action.isAction*/) {\n            return this.response.notFound(undefined, 'Action not found: ' +\n                         route.controller + '.' + route.action);\n        }\n\n        try {\n            return Promise.resolve(controller[actionName].call(this, this.request, this.response));\n        } catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\n"]}