{"version":3,"sources":["../src/browser.js"],"names":["React","render","Helmet","Logger","createAlpAppWrapper","createBrowserStore","createModuleStoreReducer","websocketMiddleware","combineReducers","connect","createAction","createReducer","createLoader","classNames","createPureStatelessComponent","identityReducer","AlpModule","AlpReduxModule","Body","AppContainer","logger","renderApp","createElement","App","document","getElementById","app","sharedReducers","moduleStoreReducer","store","reducer","middlewares","websocket","filter","Boolean","loggerWebsocket","child","debug","on","action","dispatch","ctx","createContext","urlGenerator","WrappedApp","context","setModuleReducers","set","reducers","success"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,MAAP;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,kBAAP,MAA+B,4BAA/B;AACA,OAAOC,wBAAP,MAAqC,kCAArC;AACA,SAASC,mBAAT,QAAoC,aAApC;;AAEA,SAASL,MAAT;AACA,SAASM,eAAT;AACA,SAASC,OAAT;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,UAJF,EAKEC,4BALF,EAMEC,eANF,QAOO,eAPP;uBAQsB,oB;uBAAfC,S;4BACoB,+B;4BAApBC,c;kBACU,e;kBAAVC,I;0BACkB,uB;0BAAlBC,Y;;;AAEP,IAAMC,SAAS,IAAIjB,MAAJ,CAAW,iBAAX,CAAf;;AAEA,IAAMkB,YAAY,SAAZA,SAAY;AAAA,SAAOpB,OAAOD,MAAMsB,aAAN,CAAoBC,GAApB,CAAP,EAAiCC,SAASC,cAAT,CAAwB,WAAxB,CAAjC,CAAP;AAAA,CAAlB;;AAEA,gBAAe,iBAACC,GAAD,EAAkC;AAAA;AAAA,MAA1BC,cAA0B,QAA1BA,cAA0B;;AAC/C,MAAMC,qBAAqBtB,0BAA3B;AACA,MAAMuB,QAAQxB,mBAAmBqB,GAAnB,EAAwBE,mBAAmBE,OAA3C,EAAoD;AAChEH,kCADgE;AAEhEI,iBAAa,CAACL,IAAIM,SAAJ,IAAiBzB,oBAAoBmB,GAApB,CAAlB,EAA4CO,MAA5C,CAAmDC,OAAnD;AAFmD,GAApD,CAAd;;AAKAR,MAAIG,KAAJ,GAAYA,KAAZ;;AAEA,MAAIH,IAAIM,SAAR,EAAmB;AACjB,QAAMG,kBAAkBf,OAAOgB,KAAP,CAAa,WAAb,CAAxB;AACAD,oBAAgBE,KAAhB,CAAsB,iCAAtB;AACAX,QAAIM,SAAJ,CAAcM,EAAd,CAAiB,cAAjB,EAAiC,kBAAU;AACzCH,sBAAgBE,KAAhB,CAAsB,gCAAtB,EAAwDE,MAAxD;AACA,UAAIV,KAAJ,EAAW;AACTA,cAAMW,QAAN,CAAeD,MAAf;AACD;AACF,KALD;AAMD;;AAED,MAAME,MAAMf,IAAIgB,aAAJ,EAAZ;AACAD,MAAIE,YAAJ,GAAmB;AAAA,WAAM,IAAN;AAAA,GAAnB;;AAEA,SAAO,eAAO;AACZ,QAAMC,aAAaxC,oBAAoBmB,GAApB,EAAyB;AAC1CsB,eAASJ,GADiC;AAE1Cf,cAF0C;AAG1CG,kBAH0C;AAI1CiB,yBAAmB;AAAA,eAAYlB,mBAAmBmB,GAAnB,CAAuBlB,KAAvB,EAA8BmB,QAA9B,CAAZ;AAAA;AAJuB,KAAzB,CAAnB;;AAOA3B,cAAUuB,UAAV;AACAxB,WAAO6B,OAAP,CAAe,UAAf;AACD,GAVD;AAWD,CAlCD","file":"browser.js","sourcesContent":["import React from 'react';\nimport { render } from 'react-dom';\nimport Helmet from 'react-helmet';\nimport Logger from 'nightingale-logger/src';\nimport createAlpAppWrapper from './createAlpAppWrapper';\nimport createBrowserStore from './store/createBrowserStore';\nimport createModuleStoreReducer from './store/createModuleStoreReducer';\nimport { websocketMiddleware } from './websocket';\n\nexport { Helmet };\nexport { combineReducers } from 'redux/src';\nexport { connect } from 'react-redux/src';\nexport {\n  createAction,\n  createReducer,\n  createLoader,\n  classNames,\n  createPureStatelessComponent,\n  identityReducer,\n} from './utils/index';\nexport AlpModule from './module/AlpModule';\nexport AlpReduxModule from './module/AlpReduxModuleServer';\nexport Body from './layout/Body';\nexport AppContainer from './layout/AppContainer';\n\nconst logger = new Logger('alp:react-redux');\n\nconst renderApp = App => render(React.createElement(App), document.getElementById('react-app'));\n\nexport default (app, { sharedReducers } = {}) => {\n  const moduleStoreReducer = createModuleStoreReducer();\n  const store = createBrowserStore(app, moduleStoreReducer.reducer, {\n    sharedReducers,\n    middlewares: [app.websocket && websocketMiddleware(app)].filter(Boolean),\n  });\n\n  app.store = store;\n\n  if (app.websocket) {\n    const loggerWebsocket = logger.child('websocket');\n    loggerWebsocket.debug('register websocket redux:action');\n    app.websocket.on('redux:action', action => {\n      loggerWebsocket.debug('dispatch action from websocket', action);\n      if (store) {\n        store.dispatch(action);\n      }\n    });\n  }\n\n  const ctx = app.createContext();\n  ctx.urlGenerator = () => null;\n\n  return App => {\n    const WrappedApp = createAlpAppWrapper(App, {\n      context: ctx,\n      app,\n      store,\n      setModuleReducers: reducers => moduleStoreReducer.set(store, reducers),\n    });\n\n    renderApp(WrappedApp);\n    logger.success('rendered');\n  };\n};\n"]}