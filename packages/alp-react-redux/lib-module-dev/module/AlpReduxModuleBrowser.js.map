{"version":3,"sources":["../../src/module/AlpReduxModuleBrowser.jsx"],"names":["PropTypes","AlpModule","ReactNodeType","ReactElementType","AlpReduxModule","props","context","state","loading","setModuleReducers","reducers","result","then","setState","nextProps","children","contextTypes","func","isRequired"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAcC,+BAAd,EAA6BC,qCAA7B,QAAqD,UAArD;;;;;;;;;AAEA,oCAAiB,cACf,uBAAU,SAAE,iBAAC,UAAD,EAAU,OAAV,CAAF,CAAV,CADe,EAEf,uBAAU,oBAAV,CAFe,CAAjB;IAKqBC,c;AAOnB,0BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,gIACpBD,KADoB,EACbC,OADa;;AAAA,WAE1B,MAAKC,KAAL,GAAa;AACXC,eAAS,MAAKC,iBAAL,CAAuBJ,MAAMK,QAA7B;AADE,KAFa,EAE1B,MAAKH,KAAL,GAAa,EACXC,SAAS,MAAKC,iBAAL,CAAuBJ,MAAMK,QAA7B,CADE,EAFa;AAK3B;;;;sCAEiBA,Q,EAAU;AAAA;;AAC1B,UAAI,CAAC,KAAKJ,OAAL,CAAaG,iBAAlB,EAAqC,OAAO,KAAP,CADX,CACyB;AACnD,UAAME,SAAS,KAAKL,OAAL,CAAaG,iBAAb,CAA+BC,QAA/B,CAAf;AAF0B,aAGtBC,WAAW,KAHW,KAI1BA,OAAOC,IAAP,CAAY,YAAM;AAChB,eAAKC,QAAL,CAAc,EAAEL,SAAS,KAAX,EAAd,CADgB;AAEjB,OAFD,CAJ0B,EAOnB,IAPmB;AAQ3B;;;8CAEyBM,S,EAAsB;AAAA,2BAAb,gBAAa;;AAAA,8DAC1CA,UAAUJ,QAAV,KAAuB,KAAKL,KAAL,CAAWK,QADQ,IAE5C,KAAKG,QAAL,CAAc;AACZL,iBAAS,KAAKC,iBAAL,CAAuBK,UAAUJ,QAAjC;AADG,OAAd,CAF4C;AAM/C;;;6BAEiC;AAAA,iCAAxB,iCAAmB,QAAnB,CAAwB;;AAChC,gCAAO,KAAKH,KAAL,CAAWC,OAAX,GAAqB,IAArB,GAA4B,KAAKH,KAAL,CAAWU,QAA9C;AACD;;EAlCyCd,S,UAGnCe,Y,GAAe;AACpBP,qBAAmBT,UAAUiB,IAAV,CAAeC;AADd,C;SAHHd,c","file":"AlpReduxModuleBrowser.jsx","sourcesContent":["import PropTypes from 'prop-types';\nimport AlpModule from './AlpModule';\nimport type { ReactNodeType, ReactElementType } from '../types';\n\ntype PropsType = {|\n  reducers: { [string]: any },\n  children: ReactNodeType,\n|};\n\nexport default class AlpReduxModule extends AlpModule {\n  props: PropsType;\n\n  static contextTypes = {\n    setModuleReducers: PropTypes.func.isRequired,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      loading: this.setModuleReducers(props.reducers),\n    };\n  }\n\n  setModuleReducers(reducers) {\n    if (!this.context.setModuleReducers) return false; // pre render\n    const result = this.context.setModuleReducers(reducers);\n    if (result === false) return false;\n    result.then(() => {\n      this.setState({ loading: false });\n    });\n    return true;\n  }\n\n  componentWillReceiveProps(nextProps: PropTypes) {\n    if (nextProps.reducers !== this.props.reducers) {\n      this.setState({\n        loading: this.setModuleReducers(nextProps.reducers),\n      });\n    }\n  }\n\n  render(): ReactElementType | null {\n    return this.state.loading ? null : this.props.children;\n  }\n}\n"]}