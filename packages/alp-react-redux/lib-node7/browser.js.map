{"version":3,"sources":["../src/browser.js"],"names":["Helmet","combineReducers","connect","createAction","createReducer","createLoader","classNames","createEmitAction","createEmitPromiseAction","alpReactRedux","alpReducers","AlpReactApp","AlpReduxApp","createPureStatelessComponent","HYDRATE_STATE","logger","store","currentModuleDescriptorIdentifier","createHydratableReducer","reducer","state","action","type","element","sharedReducers","app","middleware","websocket","loggerWebsocket","child","debug","on","dispatch","push","context","render","moduleDescriptor","data","_loaded","_loadingBar","loader","currentState","identifier","getState","Object","create","then","moduleHasReducers","reducers","undefined","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","assign","isSameModule","replaceReducer","App","appProps","View","props","err"],"mappings":"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","file":"browser.js","sourcesContent":["/* global window */\nimport render, { unmountComponentAtNode } from 'fody/src';\nimport Logger from 'nightingale-logger/src';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux/src';\nimport { promiseMiddleware, createFunctionMiddleware } from './middleware-browser';\nimport { websocketMiddleware } from './websocket';\nimport loadingBar from './loading-bar';\nimport AlpReactApp from './AlpReactApp';\nimport AlpReduxApp from './AlpReduxApp';\nimport * as alpReducers from './reducers';\n\nexport { AlpReactApp, AlpReduxApp };\nexport { Helmet } from 'fody/src';\nexport { combineReducers } from 'redux/src';\nexport { connect } from 'react-redux/src';\nexport createPureStatelessComponent from 'react-pure-stateless-component';\nexport { createAction, createReducer, createLoader, classNames } from './utils';\nexport { createEmitAction, createEmitPromiseAction } from './websocket';\n\nconst HYDRATE_STATE = 'HYDRATE_STATE';\nconst logger = new Logger('alp:react-redux');\n\nlet store;\nlet currentModuleDescriptorIdentifier;\n\nconst createHydratableReducer = (reducer: Function) => (\n  (state, action) => {\n    if (action.type === HYDRATE_STATE) {\n      state = action.state;\n    }\n\n    return reducer(state, action);\n  }\n);\n\ntype OptionsType = {|\n  sharedReducers: ?Object,\n|}\n\nexport default function alpReactRedux(element, { sharedReducers = {} }: OptionsType = {}) {\n  return (app) => {\n    const middleware = [\n      createFunctionMiddleware(app),\n      promiseMiddleware,\n    ];\n\n    if (app.websocket) {\n      const loggerWebsocket = logger.child('websocket');\n      loggerWebsocket.debug('register websocket redux:action');\n      app.websocket.on('redux:action', action => {\n        loggerWebsocket.debug('dispatch action from websocket', action);\n        if (store) {\n          store.dispatch(action);\n        }\n      });\n      middleware.push(websocketMiddleware(app));\n    }\n\n    app.context.render = function (moduleDescriptor, data, _loaded, _loadingBar) {\n      if (!_loadingBar) _loadingBar = loadingBar();\n      logger.debug('render view', { data });\n\n      try {\n        if (!PRODUCTION && !moduleDescriptor.View) {\n          throw new Error('View is undefined, class expected');\n        }\n\n        if (!_loaded && moduleDescriptor.loader) {\n          const currentState = store &&\n          currentModuleDescriptorIdentifier === moduleDescriptor.identifier ?\n            store.getState() : Object.create(null);\n\n          // const _state = data;\n          return moduleDescriptor.loader(currentState, data).then(data => (\n            this.render(moduleDescriptor, data, true, _loadingBar)\n          ));\n        }\n\n        const moduleHasReducers = !!(moduleDescriptor.reducer || moduleDescriptor.reducers);\n        let reducer = moduleDescriptor.reducer ?\n          moduleDescriptor.reducer : (\n            combineReducers({ ...moduleDescriptor.reducers, ...alpReducers, ...sharedReducers })\n          );\n\n        if (!reducer) {\n          if (store) {\n            reducer = () => {};\n            store.dispatch({ type: HYDRATE_STATE, state: Object.create(null) });\n          }\n        } else if (store === undefined) {\n          const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n          store = createStore(\n            createHydratableReducer(reducer),\n            Object.assign(Object.create(null), { context: this }, data),\n            composeEnhancers(applyMiddleware(...middleware)),\n          );\n        } else {\n          const state = Object.create(null);\n          const isSameModule = currentModuleDescriptorIdentifier === moduleDescriptor.identifier;\n\n          if (store) {\n            if (isSameModule) {\n              // keep state\n              Object.assign(state, store.getState());\n            } else {\n              // destroy current component\n              unmountComponentAtNode(element);\n              // replace reducer\n              store.replaceReducer(createHydratableReducer(reducer));\n              // add initial context\n              state.context = this;\n            }\n          }\n\n          if (moduleHasReducers) Object.assign(state, data);\n          store.dispatch({ type: HYDRATE_STATE, state });\n        }\n\n        currentModuleDescriptorIdentifier = moduleDescriptor.identifier;\n\n        if (reducer) {\n          this.store = store;\n        }\n\n        render({\n          App: reducer ? AlpReduxApp : AlpReactApp,\n          appProps: {\n            store,\n            context: this,\n            moduleDescriptor,\n          },\n          View: moduleDescriptor.View,\n          props: moduleHasReducers ? undefined : data,\n          element,\n        });\n      } catch (err) {\n        _loadingBar();\n        throw err;\n      }\n\n      _loadingBar();\n    };\n  };\n}\n"]}