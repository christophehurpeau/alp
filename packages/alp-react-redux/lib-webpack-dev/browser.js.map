{"version":3,"sources":["../src/browser.js"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,UAAvB;AACA,OAAO,QAAP,MAAqB,gBAArB;AACA,OAAO,MAAP,MAAmB,MAAnB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AACA,SAAS,WAAT,QAA4B,OAA5B;;0BAEyB,gB;0BAAlB,Y;2BACmB,iB;2BAAnB,a;;;AAEP,IAAM,SAAS,IAAI,MAAJ,CAAW,iBAAX,CAAf;;AAEA,IAAI,iBAAJ;;AAEA,eAAe,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC3C,WAAO,UAAC,GAAD,EAAS;AACZ,YAAI,OAAJ,CAAY,MAAZ,GAAqB,UAAU,gBAAV,EAA4B,IAA5B,EAAkC;AACnD,mBAAO,KAAP,CAAa,aAAb,EAA4B,EAAE,UAAF,EAA5B;;AAEA,gBAAI,CAAC,iBAAiB,IAAtB,EAA4B;AACxB,sBAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAED,gBAAM,UAAU,iBAAiB,OAAjC;;AAEA,gBAAI,UAAU,SAAd,EAAyB;AACrB,oBAAI,OAAJ,EAAa;AACT,4BAAQ,YAAY,OAAZ,EAAqB,IAArB,CAAR;AACH;AACJ,aAJD,MAIO;AAAA;;AAEH,wBAAM,QAAQ,MAAM,QAAN,EAAd;AACA,2BAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B;AAAA,+BAAO,OAAO,MAAM,GAAN,CAAd;AAAA,qBAA3B;AACA,2BAAO,MAAP,CAAc,KAAd,EAAqB,IAArB;;;AAGA,wBAAI,OAAJ,EAAa;AACT,8BAAM,cAAN,CAAqB,OAArB;AACH,qBAFD,MAEO;AACH,8BAAM,cAAN,CAAqB,UAAC,KAAD,EAAQ,MAAR;AAAA,mCAAmB,KAAnB;AAAA,yBAArB;AACH;AAXE;AAYN;;AAED,gBAAI,OAAJ,EAAa;AACT,qBAAK,KAAL,GAAa,KAAb;AACH;;AAED,mBAAO;AACH,yBAAS,IADN;AAEH,sBAAM,iBAAiB,IAFpB;AAGH,0BAHG;AAIH,gCAJG;AAKH,qBAAK,UAAU,QAAV,GAAqB;AALvB,aAAP;AAOH,SAtCD;AAuCH,KAxCD;AAyCH","file":"browser.js","sourcesContent":["import DefaultApp from 'fody-app';\nimport ReduxApp from 'fody-redux-app';\nimport render from 'fody';\nimport Logger from 'nightingale-logger';\nimport { createStore } from 'redux';\n\nexport createAction from './createAction';\nexport createReducer from './createReducer';\n\nconst logger = new Logger('alp.react-redux');\n\nlet store;\n\nexport default function alpReactRedux(element) {\n    return (app) => {\n        app.context.render = function (moduleDescriptor, data) {\n            logger.debug('render view', { data });\n\n            if (!moduleDescriptor.View) {\n                throw new Error('View is undefined, class expected');\n            }\n\n            const reducer = moduleDescriptor.reducer;\n\n            if (store === undefined) {\n                if (reducer) {\n                    store = createStore(reducer, data);\n                }\n            } else {\n                // replace state\n                const state = store.getState();\n                Object.keys(state).forEach(key => delete state[key]);\n                Object.assign(state, data);\n\n                // replace reducer\n                if (reducer) {\n                    store.replaceReducer(reducer);\n                } else {\n                    store.replaceReducer((state, action) => state);\n                }\n            }\n\n            if (reducer) {\n                this.store = store;\n            }\n\n            render({\n                context: this,\n                View: moduleDescriptor.View,\n                data,\n                element,\n                App: reducer ? ReduxApp : DefaultApp,\n            });\n        };\n    };\n}\n"]}