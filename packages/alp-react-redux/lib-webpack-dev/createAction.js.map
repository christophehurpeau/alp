{"version":3,"sources":["../src/createAction.js"],"names":[],"mappings":";;;;AAAA;;AAEA,eAAe,SAAS,YAAT,CACX,IADW,EAEX,kBAFW,EAGX,IAHW,EAIb;AAAA,eAHE,IAGF;AAAA,gHAHE,IAGF;AAAA;;AAAA,QAFE,kBAEF,0BAFE,kBAEF,KAFE,kBAEF;AAAA;AAAA,eAFE,kBAEF,wBAFE,kBAEF;AAAA,0JAFE,kBAEF;AAAA;;AAAA,QADE,IACF,YADE,IACF,YADQ,MACR;AAAA,iHADE,IACF;AAAA;;AACiB;AACf,QAAI,sBAAsB,OAAO,kBAAP,KAA8B,UAAxD,EAAoE;AAClE,YAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AACD;AACD,QAAI,IAAJ,EAAU,MAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACX;;AAED,MAAI,kBAAJ;;AAEA,MAAM,yBAAyB,kBAAzB,yCAAyB,kBAAzB,CAAN;;AAEA,MAAI,oBAAoB,UAAxB,EAAoC;AAClC,aAAS;AAAA,wBAAgB,UAAhB,IAAyB,IAAzB,EAAkC,8CAAlC;AAAA,KAAT;AACD,GAFD,MAEO;AACL,QAAI,oBAAoB,QAAxB,EAAkC;AAChC,2BAAqB,mBAAmB,KAAnB,CAAyB,GAAzB,CAArB;AACD;;AAED,QAAI,kBAAJ,EAAwB;AACtB,eAAS,kBAAa;AAAA,0CAAT,IAAS;AAAT,cAAS;AAAA;;AACpB,YAAM,oBAAW,UAAX,IAAoB,IAApB,CAAN;AACA,aAAK,OAAL,CAAa,UAAC,KAAD,EAAQ,KAAR;AAAA,iBAAkB,OAAO,mBAAmB,KAAnB,CAAP,IAAoC,KAAtD;AAAA,SAAb;AACA,eAAO,MAAP;AACD,OAJD;AAKD,KAND,MAMO;AACL,eAAS,gBAAC,IAAD;AAAA,cAAC,IAAD,YAAC,IAAD,YAAQ,MAAR;AAAA,uHAAC,IAAD;AAAA;;AAAA,0BAAsB,UAAtB,IAA+B,IAA/B,EAAwC,IAAxC;AAAA,OAAT;AACD;AACF;;AAED,SAAO,IAAP,GAAc,IAAd;AACA,SAAO,QAAP,GAAkB;AAAA,WAAM,IAAN;AAAA,GAAlB;;AAEA,SAAO,MAAP;AACD","file":"createAction.js","sourcesContent":["/* global PRODUCTION */\n\nexport default function createAction(\n    type:string,\n    argsNamesOrHandler:?Array<string>|string|Function,\n    data:?Object,\n) {\n  if (!PRODUCTION) {\n    if (argsNamesOrHandler && typeof argsNamesOrHandler !== 'function') {\n      throw new Error('handler should be a function');\n    }\n    if (data) throw new Error('data is deprecated');\n  }\n\n  let action;\n\n  const typeofSecondArg = typeof argsNamesOrHandler;\n\n  if (typeofSecondArg === 'function') {\n    action = (...args) => ({ type, ...data, ...argsNamesOrHandler(...args) });\n  } else {\n    if (typeofSecondArg === 'string') {\n      argsNamesOrHandler = argsNamesOrHandler.split(',');\n    }\n\n    if (argsNamesOrHandler) {\n      action = (...args) => {\n        const action = { type, ...data };\n        args.forEach((value, index) => action[argsNamesOrHandler[index]] = value);\n        return action;\n      };\n    } else {\n      action = (args: ?Object) => ({ type, ...data, ...args });\n    }\n  }\n\n  action.type = type;\n  action.toString = () => type;\n\n  return action;\n}\n"]}