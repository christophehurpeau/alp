{"version":3,"sources":["../src/browser.js"],"names":[],"mappings":";;;;;kBAWwB;;AAXxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;AAEA,MAAM,SAAS,+BAAkB,iBAAlB,CAAT;;AAEN,IAAI,KAAJ;;;;;EAEe,SAAS,cAAT,OAAoE;QAA1C,yCAA0C;QAAxB,+BAAwB;QAAX,uBAAW;;AAC/E,WAAO,OAAS;AACZ,YAAI,OAAJ,CAAY,MAAZ;;;;+BAAqB,UAAU,gBAAV,EAA4B,IAA5B,EAAkC;AACnD,mBAAO,KAAP,CAAa,aAAb,EAA4B,EAAE,UAAF,EAA5B,EADmD;;AAGnD,gBAAI,CAAC,iBAAiB,IAAjB,EAAuB;AACxB,sBAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN,CADwB;aAA5B;;AAIA,kBAAM,UAAU,iBAAiB,OAAjB,CAPmC;;AASnD,gBAAI,UAAU,SAAV,EAAqB;AACrB,oBAAI,OAAJ,EAAa;AACT,4BAAQ,wBAAY,OAAZ,EAAqB,IAArB,CAAR,CADS;iBAAb;aADJ,MAIO;;AAEH,sBAAM,QAAQ,MAAM,QAAN,EAAR,CAFH;AAGH,uBAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,OAAO,OAAO,MAAM,GAAN,CAAP,CAAlC,CAHG;AAIH,uBAAO,MAAP,CAAc,KAAd,EAAqB,IAArB;;;AAJG,oBAOC,OAAJ,EAAa;AACT,0BAAM,cAAN,CAAqB,OAArB,EADS;iBAAb,MAEO;AACH,0BAAM,cAAN,CAAqB,CAAC,KAAD,EAAQ,MAAR,KAAmB,KAAnB,CAArB,CADG;iBAFP;aAXJ;;AAkBA,gBAAI,OAAJ,EAAa;AACT,qBAAK,KAAL,GAAa,KAAb,CADS;aAAb;;AAIA,gCAAO;AACH,yBAAS,IAAT;AACA,sBAAM,iBAAiB,IAAjB;AACN,0BAHG;AAIH,gCAJG;AAKH,qBAAK,oDAAL;aALJ,EA/BmD;SAAlC,CADT;;AAyCZ,YAAI,gBAAJ,EAAsB;AAClB,kBAAM,UAAU,OAAO,MAAP,CAAc,IAAI,OAAJ,CAAxB,CADY;AAElB,2CAAgB,IAAhB,CAAqB,MAAM;AACvB,uBAAO,KAAP,CAAa,gBAAb,EADuB;AAEvB,wBAAQ,MAAR,CAAe,gBAAf,EAAiC,WAAjC,EAFuB;aAAN,CAArB,CAFkB;SAAtB;KAzCG,CADwE;CAApE","file":"browser.js","sourcesContent":["import DefaultApp from 'fody-app';\nimport ReduxApp from 'fody-redux-app';\nimport contentLoaded from 'content-loaded';\nimport render from 'fody';\nimport { ConsoleLogger } from 'nightingale';\nimport { createStore } from 'redux';\n\nconst logger = new ConsoleLogger('alp.react-redux');\n\nlet store;\n\nexport default function ibexReactRedux({ moduleDescriptor, initialData, element }) {\n    return (app) => {\n        app.context.render = function (moduleDescriptor, data) {\n            logger.debug('render view', { data });\n\n            if (!moduleDescriptor.View) {\n                throw new Error('View is undefined, class expected');\n            }\n\n            const reducer = moduleDescriptor.reducer;\n\n            if (store === undefined) {\n                if (reducer) {\n                    store = createStore(reducer, data);\n                }\n            } else {\n                // replace state\n                const state = store.getState();\n                Object.keys(state).forEach(key => delete state[key]);\n                Object.assign(state, data);\n\n                // replace reducer\n                if (reducer) {\n                    store.replaceReducer(reducer);\n                } else {\n                    store.replaceReducer((state, action) => state);\n                }\n            }\n\n            if (reducer) {\n                this.store = store;\n            }\n\n            render({\n                context: this,\n                View: moduleDescriptor.View,\n                data,\n                element,\n                App: reducer ? ReduxApp : DefaultApp,\n            });\n        };\n\n        if (moduleDescriptor) {\n            const context = Object.create(app.context);\n            contentLoaded().then(() => {\n                logger.debug('document ready');\n                context.render(moduleDescriptor, initialData);\n            });\n        }\n    };\n}\n"]}