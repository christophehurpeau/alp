{"version":3,"sources":["../src/websocket.js"],"names":[],"mappings":";;;;;;QAKgB,gB,GAAA,gB;QAIA,uB,GAAA,uB;;AAThB;;;;AACA;;;;;;AAEA,MAAM,SAAS,gCAAW,2BAAX,CAAf;;AAEO,SAAS,gBAAT,CAA0B,IAA1B,EAAwC,kBAAxC,EAA4F;AAAA,iBAAlE,IAAkE;AAAA,oHAAlE,IAAkE;AAAA;;AAAA,UAApD,kBAAoD,0BAApD,kBAAoD,KAApD,kBAAoD;AAAA;AAAA,iBAApD,kBAAoD,wBAApD,kBAAoD;AAAA,8JAApD,kBAAoD;AAAA;;AAC/F,WAAO,4BAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAE,MAAM,EAAE,WAAW,IAAb,EAAR,EAAvC,CAAP;AACH;;AAEM,SAAS,uBAAT,CAAiC,IAAjC,EAA+C,kBAA/C,EAAmG;AAAA,iBAAlE,IAAkE;AAAA,oHAAlE,IAAkE;AAAA;;AAAA,UAApD,kBAAoD,0BAApD,kBAAoD,KAApD,kBAAoD;AAAA;AAAA,iBAApD,kBAAoD,wBAApD,kBAAoD;AAAA,8JAApD,kBAAoD;AAAA;;AACtG,WAAO,4BAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAE,MAAM,EAAE,WAAW,IAAb,EAAmB,SAAS,IAA5B,EAAR,EAAvC,CAAP;AACH;;AAEM,MAAM,oDAAsB;AAAA,WAAO;AAAA,eAAS;AAAA,mBAAQ,UAAU;AACjE,oBAAI,CAAC,OAAO,IAAR,IAAgB,CAAC,OAAO,IAAP,CAAY,SAAjC,EAA4C;AACxC,2BAAO,KAAK,MAAL,CAAP;AACH;;AAED,oBAAI,CAAC,OAAO,IAAP,CAAY,OAAjB,EAA0B;AACtB,wBAAI,SAAJ,CAAc,IAAd,CAAmB,OAAO,IAA1B,EAAgC,MAAhC;AACA;AACH;;AAED,sBAAM,WAAW,WAAW,MAAM;AAC9B,2BAAO,IAAP,CAAY,wBAAZ,EAAsC,EAAE,MAAF,EAAtC;;AAEA,4BAAQ,GAAR,CAAY,wCAAZ,EAAsD,MAAtD;AACH,iBAJgB,EAId,KAJc,CAAjB;;AAMA,oBAAI,SAAJ,CAAc,IAAd,CAAmB,OAAO,IAA1B,EAAgC,MAAhC,EAAyC,MAAD,IAAY;AAChD,iCAAa,QAAb;AACA,wBAAI,MAAJ,EAAY;AACR,8BAAM,QAAN,CAAe,MAAf;AACH;AACJ,iBALD;AAMH,aAtBkD;AAAA,SAAT;AAAA,KAAP;AAAA,CAA5B","file":"websocket.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport createAction from './createAction';\n\nconst logger = new Logger('alp.react-redux.websocket');\n\nexport function createEmitAction(type: string, argsNamesOrHandler: ?Array<string>|string|Function) {\n    return createAction(type, argsNamesOrHandler, { meta: { websocket: true } });\n}\n\nexport function createEmitPromiseAction(type: string, argsNamesOrHandler: ?Array<string>|string|Function) {\n    return createAction(type, argsNamesOrHandler, { meta: { websocket: true, promise: true } });\n}\n\nexport const websocketMiddleware = app => store => next => action => {\n    if (!action.meta || !action.meta.websocket) {\n        return next(action);\n    }\n\n    if (!action.meta.promise) {\n        app.websocket.emit(action.type, action);\n        return;\n    }\n\n    const resolved = setTimeout(() => {\n        logger.warn('websocket emit timeout', { action });\n        // eslint-disable-next-line no-console\n        console.log('alp.react-redux websocket emit timeout', action);\n    }, 10000);\n\n    app.websocket.emit(action.type, action, (action) => {\n        clearTimeout(resolved);\n        if (action) {\n            store.dispatch(action);\n        }\n    });\n};\n"]}