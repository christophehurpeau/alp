{"version":3,"sources":["../src/browser.js"],"names":[],"mappings":";;;;;;;;;;;;2BAQS,O;;;;;;2BAAS,e;;;;AAFlB;;;;;0BAKS,gB;;;;;;0BAAkB,uB;;;kBAMH,a;;AAhBxB;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;QAIO,Y;QACA,a;;;AAGP,MAAM,SAAS,gCAAW,iBAAX,CAAf;;AAEA,IAAI,KAAJ;;AAEe,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC3C,WAAQ,GAAD,IAAS;AACZ,cAAM,cAAc,CAChB,2CAAyB,GAAzB,CADgB,iCAApB;AAIA,YAAI,IAAI,SAAR,EAAmB;AACf,mBAAO,KAAP,CAAa,iCAAb;AACA,gBAAI,SAAJ,CAAc,EAAd,CAAiB,cAAjB,EAAiC,UAAU;AACvC,uBAAO,IAAP,CAAY,gCAAZ,EAA8C,MAA9C;AACA,oBAAI,KAAJ,EAAW;AACP,0BAAM,QAAN,CAAe,MAAf;AACH;AACJ,aALD;AAMA,wBAAY,IAAZ,CAAiB,oCAAoB,GAApB,CAAjB;AACH;;AAED,YAAI,OAAJ,CAAY,MAAZ,GAAqB,UAAU,gBAAV,EAA4B,IAA5B,EAAkC;AACnD,mBAAO,KAAP,CAAa,aAAb,EAA4B,EAAE,IAAF,EAA5B;;AAEA,gBAAI,CAAC,iBAAiB,IAAtB,EAA4B;AACxB,sBAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAED,kBAAM,UAAU,iBAAiB,OAAjC;;AAEA,gBAAI,UAAU,SAAd,EAAyB;AACrB,oBAAI,OAAJ,EAAa;AACT,4BAAQ,wBACJ,OADI,EAEJ,IAFI,EAGJ,oBACI,4BAAgB,GAAG,WAAnB,CADJ,EAEI,OAAO,iBAAP,GAA2B,OAAO,iBAAP,EAA3B,GAAwD;AAAA,+BAAK,CAAL;AAAA,qBAF5D,CAHI,CAAR;AAQH;AACJ,aAXD,MAWO;AACH;AACA,sBAAM,QAAQ,MAAM,QAAN,EAAd;AACA,uBAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B;AAAA,2BAAO,OAAO,MAAM,GAAN,CAAd;AAAA,iBAA3B;AACA,uBAAO,MAAP,CAAc,KAAd,EAAqB,IAArB;;AAEA;AACA,oBAAI,OAAJ,EAAa;AACT,0BAAM,cAAN,CAAqB,OAArB;AACH,iBAFD,MAEO;AACH,0BAAM,cAAN,CAAqB,CAAC,KAAD,EAAQ,MAAR;AAAA,+BAAmB,KAAnB;AAAA,qBAArB;AACH;AACJ;;AAED,gBAAI,OAAJ,EAAa;AACT,qBAAK,KAAL,GAAa,KAAb;AACH;;AAED,gCAAO;AACH,yBAAS,IADN;AAEH,sBAAM,iBAAiB,IAFpB;AAGH,oBAHG;AAIH,uBAJG;AAKH,qBAAK;AALF,aAAP;AAOH,SA7CD;AA8CH,KA9DD;AA+DH","file":"browser.js","sourcesContent":["/* global window */\nimport render, { App as DefaultApp } from 'fody';\nimport ReduxApp from 'fody-redux-app';\nimport Logger from 'nightingale-logger';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { promiseMiddleware, createFunctionMiddleware } from './middlewares';\nimport { websocketMiddleware } from './websocket';\n\nexport { connect, combineReducers } from 'react-redux';\nexport createAction from './createAction';\nexport createReducer from './createReducer';\nexport { createEmitAction, createEmitPromiseAction } from './websocket';\n\nconst logger = new Logger('alp.react-redux');\n\nlet store;\n\nexport default function alpReactRedux(element) {\n    return (app) => {\n        const middlewares = [\n            createFunctionMiddleware(app),\n            promiseMiddleware,\n        ];\n        if (app.websocket) {\n            logger.debug('register websocket redux:action');\n            app.websocket.on('redux:action', action => {\n                logger.info('dispatch action from websocket', action);\n                if (store) {\n                    store.dispatch(action);\n                }\n            });\n            middlewares.push(websocketMiddleware(app));\n        }\n\n        app.context.render = function (moduleDescriptor, data) {\n            logger.debug('render view', { data });\n\n            if (!moduleDescriptor.View) {\n                throw new Error('View is undefined, class expected');\n            }\n\n            const reducer = moduleDescriptor.reducer;\n\n            if (store === undefined) {\n                if (reducer) {\n                    store = createStore(\n                        reducer,\n                        data,\n                        compose(\n                            applyMiddleware(...middlewares),\n                            window.devToolsExtension ? window.devToolsExtension() : f => f\n                        )\n                    );\n                }\n            } else {\n                // replace state\n                const state = store.getState();\n                Object.keys(state).forEach(key => delete state[key]);\n                Object.assign(state, data);\n\n                // replace reducer\n                if (reducer) {\n                    store.replaceReducer(reducer);\n                } else {\n                    store.replaceReducer((state, action) => state);\n                }\n            }\n\n            if (reducer) {\n                this.store = store;\n            }\n\n            render({\n                context: this,\n                View: moduleDescriptor.View,\n                data,\n                element,\n                App: reducer ? ReduxApp : DefaultApp,\n            });\n        };\n    };\n}\n"]}