{"version":3,"sources":["../../src/browser.js"],"names":[],"mappings":";;;;;kBAWwB,a;;AAXxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;AAEA,IAAM,SAAS,+BAAkB,iBAAlB,CAAf;;AAEA,IAAI,cAAJ;;;;;EAEe,SAAS,aAAT,OAAmE;AAAA,QAA1C,gBAA0C,QAA1C,gBAA0C;AAAA,QAAxB,WAAwB,QAAxB,WAAwB;AAAA,QAAX,OAAW,QAAX,OAAW;;AAC9E,WAAO,UAAC,GAAD,EAAS;AACZ,YAAI,OAAJ,CAAY,MAAZ,G;;;;+BAAqB,UAAU,gBAAV,EAA4B,IAA5B,EAAkC;AACnD,mBAAO,KAAP,CAAa,aAAb,EAA4B,EAAE,UAAF,EAA5B;;AAEA,gBAAI,CAAC,iBAAiB,IAAtB,EAA4B;AACxB,sBAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAED,gBAAM,UAAU,iBAAiB,OAAjC;;AAEA,gBAAI,UAAU,SAAd,EAAyB;AACrB,oBAAI,OAAJ,EAAa;AACT,4BAAQ,wBAAY,OAAZ,EAAqB,IAArB,CAAR;AACH;AACJ,aAJD,MAIO;AAAA,iB;;oBAAA;;AAEH,wBAAM,QAAQ,MAAM,QAAN,EAAd;AACA,2BAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B;AAAA,+BAAO,OAAO,MAAM,GAAN,CAAd;AAAA,qBAA3B;AACA,2BAAO,MAAP,CAAc,KAAd,EAAqB,IAArB;;;AAGA,wBAAI,OAAJ,EAAa;AACT,8BAAM,cAAN,CAAqB,OAArB;AACH,qBAFD,MAEO;AACH,8BAAM,cAAN,CAAqB,UAAC,KAAD,EAAQ,MAAR;AAAA,mCAAmB,KAAnB;AAAA,yBAArB;AACH;AAXE;AAYN;;AAED,gBAAI,OAAJ,EAAa;AACT,qBAAK,KAAL,GAAa,KAAb;AACH;;AAED,gCAAO;AACH,yBAAS,IADN;AAEH,sBAAM,iBAAiB,IAFpB;AAGH,0BAHG;AAIH,gCAJG;AAKH,qBAAK;AALF,aAAP;AAOH,SAtCD;;AAwCA,YAAI,gBAAJ,EAAsB;AAAA,a;;gBAAA;AAClB,oBAAM,UAAU,OAAO,MAAP,CAAc,IAAI,OAAlB,CAAhB;AACA,+CAAgB,IAAhB,CAAqB,YAAM;AACvB,2BAAO,KAAP,CAAa,gBAAb;AACA,4BAAQ,MAAR,CAAe,gBAAf,EAAiC,WAAjC;AACH,iBAHD;AAFkB;AAMrB;AACJ,KAhDD;AAiDH","file":"browser.js","sourcesContent":["import DefaultApp from 'fody-app';\nimport ReduxApp from 'fody-redux-app';\nimport contentLoaded from 'content-loaded';\nimport render from 'fody';\nimport { ConsoleLogger } from 'nightingale';\nimport { createStore } from 'redux';\n\nconst logger = new ConsoleLogger('alp.react-redux');\n\nlet store;\n\nexport default function alpReactRedux({ moduleDescriptor, initialData, element }) {\n    return (app) => {\n        app.context.render = function (moduleDescriptor, data) {\n            logger.debug('render view', { data });\n\n            if (!moduleDescriptor.View) {\n                throw new Error('View is undefined, class expected');\n            }\n\n            const reducer = moduleDescriptor.reducer;\n\n            if (store === undefined) {\n                if (reducer) {\n                    store = createStore(reducer, data);\n                }\n            } else {\n                // replace state\n                const state = store.getState();\n                Object.keys(state).forEach(key => delete state[key]);\n                Object.assign(state, data);\n\n                // replace reducer\n                if (reducer) {\n                    store.replaceReducer(reducer);\n                } else {\n                    store.replaceReducer((state, action) => state);\n                }\n            }\n\n            if (reducer) {\n                this.store = store;\n            }\n\n            render({\n                context: this,\n                View: moduleDescriptor.View,\n                data,\n                element,\n                App: reducer ? ReduxApp : DefaultApp,\n            });\n        };\n\n        if (moduleDescriptor) {\n            const context = Object.create(app.context);\n            contentLoaded().then(() => {\n                logger.debug('document ready');\n                context.render(moduleDescriptor, initialData);\n            });\n        }\n    };\n}\n"]}