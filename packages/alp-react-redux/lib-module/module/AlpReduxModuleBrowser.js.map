{"version":3,"sources":["../../src/module/AlpReduxModuleBrowser.jsx"],"names":["PropTypes","AlpModule","AlpReduxModule","props","context","state","loading","setModuleReducers","reducers","result","then","setState","nextProps","children","contextTypes","func","isRequired"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;IAQqBC,c;;;AAOnB,0BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,gIACpBD,KADoB,EACbC,OADa;;AAE1B,UAAKC,KAAL,GAAa;AACXC,eAAS,MAAKC,iBAAL,CAAuBJ,MAAMK,QAA7B;AADE,KAAb;AAF0B;AAK3B;;;;sCAEiBA,Q,EAAU;AAAA;;AAC1B,UAAI,CAAC,KAAKJ,OAAL,CAAaG,iBAAlB,EAAqC,OAAO,KAAP,CADX,CACyB;AACnD,UAAME,SAAS,KAAKL,OAAL,CAAaG,iBAAb,CAA+BC,QAA/B,CAAf;AACA,UAAIC,WAAW,KAAf,EAAsB,OAAO,KAAP;AACtBA,aAAOC,IAAP,CAAY,YAAM;AAChB,eAAKC,QAAL,CAAc,EAAEL,SAAS,KAAX,EAAd;AACD,OAFD;AAGA,aAAO,IAAP;AACD;;;8CAEyBM,S,EAAsB;AAC9C,UAAIA,UAAUJ,QAAV,KAAuB,KAAKL,KAAL,CAAWK,QAAtC,EAAgD;AAC9C,aAAKG,QAAL,CAAc;AACZL,mBAAS,KAAKC,iBAAL,CAAuBK,UAAUJ,QAAjC;AADG,SAAd;AAGD;AACF;;;6BAEiC;AAChC,aAAO,KAAKH,KAAL,CAAWC,OAAX,GAAqB,IAArB,GAA4B,KAAKH,KAAL,CAAWU,QAA9C;AACD;;;;EAlCyCZ,S,UAGnCa,Y,GAAe;AACpBP,qBAAmBP,UAAUe,IAAV,CAAeC;AADd,C;SAHHd,c","file":"AlpReduxModuleBrowser.jsx","sourcesContent":["import PropTypes from 'prop-types';\nimport AlpModule from './AlpModule';\nimport type { ReactNodeType, ReactElementType } from '../types';\n\ntype PropsType = {|\n  reducers: { [string]: any },\n  children: ReactNodeType,\n|};\n\nexport default class AlpReduxModule extends AlpModule {\n  props: PropsType;\n\n  static contextTypes = {\n    setModuleReducers: PropTypes.func.isRequired,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      loading: this.setModuleReducers(props.reducers),\n    };\n  }\n\n  setModuleReducers(reducers) {\n    if (!this.context.setModuleReducers) return false; // pre render\n    const result = this.context.setModuleReducers(reducers);\n    if (result === false) return false;\n    result.then(() => {\n      this.setState({ loading: false });\n    });\n    return true;\n  }\n\n  componentWillReceiveProps(nextProps: PropTypes) {\n    if (nextProps.reducers !== this.props.reducers) {\n      this.setState({\n        loading: this.setModuleReducers(nextProps.reducers),\n      });\n    }\n  }\n\n  render(): ReactElementType | null {\n    return this.state.loading ? null : this.props.children;\n  }\n}\n"]}