{"version":3,"sources":["../src/websocket.js"],"names":["createEmitAction","createEmitPromiseAction","logger","type","argsNamesOrHandler","meta","websocket","promise","websocketMiddleware","app","store","next","action","emit","resolved","setTimeout","warn","console","log","clearTimeout","dispatch"],"mappings":";;;;;;QAOgBA,gB,GAAAA,gB;QAIAC,uB,GAAAA,uB;;AAXhB;;;;AACA;;;;;;AAEA,MAAMC,SAAS,gCAAW,2BAAX,CAAf;;AAIO,SAASF,gBAAT,CAA0BG,IAA1B,EAAwCC,kBAAxC,EAAqF;AAC1F,SAAO,4BAAaD,IAAb,EAAmBC,kBAAnB,EAAuC,EAAEC,MAAM,EAAEC,WAAW,IAAb,EAAR,EAAvC,CAAP;AACD;;AAEM,SAASL,uBAAT,CACLE,IADK,EAELC,kBAFK,EAGL;AACA,SAAO,4BAAaD,IAAb,EAAmBC,kBAAnB,EAAuC,EAAEC,MAAM,EAAEC,WAAW,IAAb,EAAmBC,SAAS,IAA5B,EAAR,EAAvC,CAAP;AACD;;AAEM,MAAMC,oDAAsBC,OAAOC,SAASC,QAAQC,UAAU;AACnE,MAAI,CAACA,OAAOP,IAAR,IAAgB,CAACO,OAAOP,IAAP,CAAYC,SAAjC,EAA4C;AAC1C,WAAOK,KAAKC,MAAL,CAAP;AACD;;AAED,MAAI,CAACA,OAAOP,IAAP,CAAYE,OAAjB,EAA0B;AACxBE,QAAIH,SAAJ,CAAcO,IAAd,CAAmBD,OAAOT,IAA1B,EAAgCS,MAAhC;AACA;AACD;;AAED,QAAME,WAAWC,WAAW,MAAM;AAChCb,WAAOc,IAAP,CAAY,wBAAZ,EAAsC,EAAEJ,MAAF,EAAtC;AACA;AACAK,YAAQC,GAAR,CAAY,wCAAZ,EAAsDN,MAAtD;AACD,GAJgB,EAId,KAJc,CAAjB;;AAMAH,MAAIH,SAAJ,CAAcO,IAAd,CAAmBD,OAAOT,IAA1B,EAAgCS,MAAhC,EAAwCA,UAAU;AAChDO,iBAAaL,QAAb;AACA,QAAIF,MAAJ,EAAY;AACVF,YAAMU,QAAN,CAAeR,MAAf;AACD;AACF,GALD;AAMD,CAtBM","file":"websocket.js","sourcesContent":["import Logger from 'nightingale-logger/src';\nimport createAction from './utils/createAction';\n\nconst logger = new Logger('alp:react-redux:websocket');\n\ntype ArgsNamesOfHandlerType = Array<string> | string | Function;\n\nexport function createEmitAction(type: string, argsNamesOrHandler: ?ArgsNamesOfHandlerType) {\n  return createAction(type, argsNamesOrHandler, { meta: { websocket: true } });\n}\n\nexport function createEmitPromiseAction(\n  type: string,\n  argsNamesOrHandler: ?Array<string> | string | Function,\n) {\n  return createAction(type, argsNamesOrHandler, { meta: { websocket: true, promise: true } });\n}\n\nexport const websocketMiddleware = app => store => next => action => {\n  if (!action.meta || !action.meta.websocket) {\n    return next(action);\n  }\n\n  if (!action.meta.promise) {\n    app.websocket.emit(action.type, action);\n    return;\n  }\n\n  const resolved = setTimeout(() => {\n    logger.warn('websocket emit timeout', { action });\n    // eslint-disable-next-line no-console\n    console.log('alp.react-redux websocket emit timeout', action);\n  }, 10000);\n\n  app.websocket.emit(action.type, action, action => {\n    clearTimeout(resolved);\n    if (action) {\n      store.dispatch(action);\n    }\n  });\n};\n"]}