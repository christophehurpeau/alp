{"version":3,"sources":["../src/browser.js"],"names":["combineReducers","connect","createAction","createReducer","createLoader","classNames","createPureStatelessComponent","identityReducer","Helmet","AlpModule","AlpReduxModule","Body","AppContainer","logger","renderApp","App","createElement","document","getElementById","app","sharedReducers","moduleStoreReducer","store","reducer","middlewares","websocket","filter","Boolean","loggerWebsocket","child","debug","on","action","dispatch","ctx","createContext","urlGenerator","WrappedApp","context","setModuleReducers","reducers","set","success"],"mappings":";;;;;;;;;;;;kBAUSA,e;;;;;;;;;uBACAC,O;;;;;;;;;kBAEPC,Y;;;;;;kBACAC,a;;;;;;kBACAC,Y;;;;;;kBACAC,U;;;;;;kBACAC,4B;;;;;;kBACAC,e;;;;AAlBF;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;QAESC,M;QAWFC,S;QACAC,c;QACAC,I;QACAC,Y;;;AAEP,MAAMC,SAAS,gCAAW,iBAAX,CAAf;;AAEA,MAAMC,YAAYC,OAAO,sBAAO,gBAAMC,aAAN,CAAoBD,GAApB,CAAP,EAAiCE,SAASC,cAAT,CAAwB,WAAxB,CAAjC,CAAzB;;kBAEe,CAACC,GAAD,EAAM,EAAEC,cAAF,OAAN,KAAkC;AAC/C,QAAMC,qBAAqB,yCAA3B;AACA,QAAMC,QAAQ,kCAAmBH,GAAnB,EAAwBE,mBAAmBE,OAA3C,EAAoD;AAChEH,kBADgE;AAEhEI,iBAAa,CAACL,IAAIM,SAAJ,IAAiB,oCAAoBN,GAApB,CAAlB,EAA4CO,MAA5C,CAAmDC,OAAnD;AAFmD,GAApD,CAAd;;AAKAR,MAAIG,KAAJ,GAAYA,KAAZ;;AAEA,MAAIH,IAAIM,SAAR,EAAmB;AACjB,UAAMG,kBAAkBf,OAAOgB,KAAP,CAAa,WAAb,CAAxB;AACAD,oBAAgBE,KAAhB,CAAsB,iCAAtB;AACAX,QAAIM,SAAJ,CAAcM,EAAd,CAAiB,cAAjB,EAAiCC,UAAU;AACzCJ,sBAAgBE,KAAhB,CAAsB,gCAAtB,EAAwDE,MAAxD;AACA,UAAIV,KAAJ,EAAW;AACTA,cAAMW,QAAN,CAAeD,MAAf;AACD;AACF,KALD;AAMD;;AAED,QAAME,MAAMf,IAAIgB,aAAJ,EAAZ;AACAD,MAAIE,YAAJ,GAAmB,MAAM,IAAzB;;AAEA,SAAOrB,OAAO;AACZ,UAAMsB,aAAa,mCAAoBtB,GAApB,EAAyB;AAC1CuB,eAASJ,GADiC;AAE1Cf,SAF0C;AAG1CG,WAH0C;AAI1CiB,yBAAmBC,YAAYnB,mBAAmBoB,GAAnB,CAAuBnB,KAAvB,EAA8BkB,QAA9B;AAJW,KAAzB,CAAnB;;AAOA1B,cAAUuB,UAAV;AACAxB,WAAO6B,OAAP,CAAe,UAAf;AACD,GAVD;AAWD,C","file":"browser.js","sourcesContent":["import React from 'react';\nimport { render } from 'react-dom';\nimport Helmet from 'react-helmet';\nimport Logger from 'nightingale-logger/src';\nimport createAlpAppWrapper from './createAlpAppWrapper';\nimport createBrowserStore from './store/createBrowserStore';\nimport createModuleStoreReducer from './store/createModuleStoreReducer';\nimport { websocketMiddleware } from './websocket';\n\nexport { Helmet };\nexport { combineReducers } from 'redux/src';\nexport { connect } from 'react-redux/src';\nexport {\n  createAction,\n  createReducer,\n  createLoader,\n  classNames,\n  createPureStatelessComponent,\n  identityReducer,\n} from './utils/index';\nexport AlpModule from './module/AlpModule';\nexport AlpReduxModule from './module/AlpReduxModuleServer';\nexport Body from './layout/Body';\nexport AppContainer from './layout/AppContainer';\n\nconst logger = new Logger('alp:react-redux');\n\nconst renderApp = App => render(React.createElement(App), document.getElementById('react-app'));\n\nexport default (app, { sharedReducers } = {}) => {\n  const moduleStoreReducer = createModuleStoreReducer();\n  const store = createBrowserStore(app, moduleStoreReducer.reducer, {\n    sharedReducers,\n    middlewares: [app.websocket && websocketMiddleware(app)].filter(Boolean),\n  });\n\n  app.store = store;\n\n  if (app.websocket) {\n    const loggerWebsocket = logger.child('websocket');\n    loggerWebsocket.debug('register websocket redux:action');\n    app.websocket.on('redux:action', action => {\n      loggerWebsocket.debug('dispatch action from websocket', action);\n      if (store) {\n        store.dispatch(action);\n      }\n    });\n  }\n\n  const ctx = app.createContext();\n  ctx.urlGenerator = () => null;\n\n  return App => {\n    const WrappedApp = createAlpAppWrapper(App, {\n      context: ctx,\n      app,\n      store,\n      setModuleReducers: reducers => moduleStoreReducer.set(store, reducers),\n    });\n\n    renderApp(WrappedApp);\n    logger.success('rendered');\n  };\n};\n"]}