{"version":3,"sources":["../../src/store/createServerStore.js"],"names":["ctx","moduleReducer","sharedReducers","initialContext","computeInitialContextForBrowser","state","keys","Object","initialContextReducers","create","forEach","key","rootReducer","app","alpReducers","module"],"mappings":";;;;;;AAAA;;AACA;;;;;;kBAEe,CAACA,GAAD,EAAMC,aAAN,EAAqB,EAAEC,cAAF,EAArB,KAA4C;AACzD;AACA,QAAMC,iBAAiBH,IAAII,+BAAJ,GAAsCC,KAA7D;AACA,QAAMC,OAAOC,OAAOD,IAAP,CAAYH,cAAZ,CAAb;AACA,QAAMK,yBAAyBD,OAAOE,MAAP,CAAc,IAAd,CAA/B;AACAH,OAAKI,OAAL,CAAaC,OAAQH,uBAAuBG,GAAvB,6BAArB;;AAEA,QAAMC,cAAc,8CACfJ,sBADe,EAEfR,IAAIa,GAAJ,CAAQC,WAFO,EAGfZ,cAHe;AAIlBa,YAAQd;AAJU,KAApB;;AAOA,SAAO,wBAAYW,WAAZ,EAAyBT,cAAzB,CAAP;AACD,C","file":"createServerStore.js","sourcesContent":["import { combineReducers, createStore } from 'redux/src';\nimport identityReducer from '../utils/identityReducer';\n\nexport default (ctx, moduleReducer, { sharedReducers }) => {\n  // TODO create new API ?\n  const initialContext = ctx.computeInitialContextForBrowser().state;\n  const keys = Object.keys(initialContext);\n  const initialContextReducers = Object.create(null);\n  keys.forEach(key => (initialContextReducers[key] = identityReducer));\n\n  const rootReducer = combineReducers({\n    ...initialContextReducers,\n    ...ctx.app.alpReducers,\n    ...sharedReducers,\n    module: moduleReducer,\n  });\n\n  return createStore(rootReducer, initialContext);\n};\n"]}