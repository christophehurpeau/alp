{"version":3,"sources":["../../src/module/AlpReduxModuleBrowser.jsx"],"names":["AlpReduxModule","constructor","props","context","state","loading","setModuleReducers","reducers","result","then","setState","componentWillReceiveProps","nextProps","render","children","contextTypes","func","isRequired"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,0DAAiB,kCACf,2CAAU,6BAAE,qCAAC,8BAAD,EAAU,2BAAV,CAAF,CAAV,CADe,EAEf,2CAAU,wCAAV,CAFe,CAAjB;;IAKqBA,c,qBAAN,kCAAuC;;AAOpDC,cAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAC1B,UAAMD,KAAN,EAAaC,OAAb,CAD0B,EAE1B,KAAKC,KAAL,GAAa;AACXC,eAAS,KAAKC,iBAAL,CAAuBJ,MAAMK,QAA7B;AADE,KAFa;AAK3B;;AAEDD,oBAAkBC,QAAlB,EAA4B;AAC1B,QAAI,CAAC,KAAKJ,OAAL,CAAaG,iBAAlB,EAAqC,OAAO,KAAP,CADX,CACyB;AACnD,UAAME,SAAS,KAAKL,OAAL,CAAaG,iBAAb,CAA+BC,QAA/B,CAAf;AAF0B,WAGtBC,WAAW,KAHW,KAI1BA,OAAOC,IAAP,CAAY,MAAM;AAChB,WAAKC,QAAL,CAAc,EAAEL,SAAS,KAAX,EAAd,CADgB;AAEjB,KAFD,CAJ0B,EAOnB,IAPmB;AAQ3B;;AAEDM,4BAA0BC,SAA1B,EAAgD;AAAA,yBAAb,8CAAa;;AAAA,gFAC1CA,UAAUL,QAAV,KAAuB,KAAKL,KAAL,CAAWK,QADQ,IAE5C,KAAKG,QAAL,CAAc;AACZL,eAAS,KAAKC,iBAAL,CAAuBM,UAAUL,QAAjC;AADG,KAAd,CAF4C;AAM/C;;AAEDM,WAAkC;AAAA,qDAAxB,yEAAmB,4BAAnB,CAAwB;;AAChC,8BAAO,KAAKT,KAAL,CAAWC,OAAX,GAAqB,IAArB,GAA4B,KAAKH,KAAL,CAAWY,QAA9C;AACD;AAlCmD,C,SAG7CC,Y,GAAe;AACpBT,qBAAmB,oBAAUU,IAAV,CAAeC;AADd,C;kBAHHjB,c","file":"AlpReduxModuleBrowser.jsx","sourcesContent":["import PropTypes from 'prop-types';\nimport AlpModule from './AlpModule';\nimport type { ReactNodeType, ReactElementType } from '../types';\n\ntype PropsType = {|\n  reducers: { [string]: any },\n  children: ReactNodeType,\n|};\n\nexport default class AlpReduxModule extends AlpModule {\n  props: PropsType;\n\n  static contextTypes = {\n    setModuleReducers: PropTypes.func.isRequired,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      loading: this.setModuleReducers(props.reducers),\n    };\n  }\n\n  setModuleReducers(reducers) {\n    if (!this.context.setModuleReducers) return false; // pre render\n    const result = this.context.setModuleReducers(reducers);\n    if (result === false) return false;\n    result.then(() => {\n      this.setState({ loading: false });\n    });\n    return true;\n  }\n\n  componentWillReceiveProps(nextProps: PropTypes) {\n    if (nextProps.reducers !== this.props.reducers) {\n      this.setState({\n        loading: this.setModuleReducers(nextProps.reducers),\n      });\n    }\n  }\n\n  render(): ReactElementType | null {\n    return this.state.loading ? null : this.props.children;\n  }\n}\n"]}