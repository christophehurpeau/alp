{"version":3,"sources":["../src/AlpReactApp.jsx"],"names":["children","context","moduleDescriptor","scriptName","initialData","initialBrowserContext","version","config","get","moduleIdentifier","identifier","Error","charset","name","content","rel","href","src","innerHTML","defer","filter","Boolean"],"mappings":";;;;;;;;;;AACA;;AACA;;;;AACA;;;;;;kBAWe,UAOiB;AAAA,MAN9BA,QAM8B,QAN9BA,QAM8B;AAAA,MAL9BC,OAK8B,QAL9BA,OAK8B;AAAA,MAJ9BC,gBAI8B,QAJ9BA,gBAI8B;AAAA,MAH9BC,UAG8B,QAH9BA,UAG8B;AAAA,MAF9BC,WAE8B,QAF9BA,WAE8B;AAAA,MAD9BC,qBAC8B,QAD9BA,qBAC8B;;AAC9B,QAAMC,UAAkBL,QAAQM,MAAR,CAAeC,GAAf,CAAmB,SAAnB,CAAxB;AACA,QAAMC,mBAA4BP,oBAAoBA,iBAAiBQ,UAAvE;AACA,MAAI,CAACJ,OAAL,EAAc,MAAM,IAAIK,KAAJ,CAAU,iBAAV,CAAN;;AAEd,SACE;AAAA;AAAA,MAAY,SAASV,OAArB;AACE;AAAA;AAAA,QAAK,WAAU,WAAf;AAEI;AACE,cAAM,CACJ,EAAEW,SAAS,OAAX,EADI,EAEJ,EAAEC,MAAM,UAAR,EAAoBC,SAAS,qCAA7B,EAFI,CADR;AAKE,cAAM,CACJ,EAAEC,KAAK,YAAP,EAAqBC,MAAM,wBAAS,YAAT,EAAuBV,OAAvB,CAA3B,EADI,EAEJ,EAAES,KAAK,YAAP,EAAqBC,MAAM,wBAAS,aAAT,EAAwBV,OAAxB,CAA3B,EAFI,CALR;AASE,gBAAQ,CACN,EAAEW,KAAK,sGAAP,EADM,EAEN,EAAEC,WACE,IAAET,mBAAoB,8BAA4BA,gBAAiB,KAAjE,GAAuE,EAAG,GAA9E,GACG,oBAAkBH,OAAQ,KAD7B,GAEG,uBAAqB,sBAAOF,WAAP,CAAoB,IAF5C,IAGG,CAACC,qBAAD,GAAyB,EAAzB,GACE,iCAA+B,sBAAOA,qBAAP,CAA8B,IAJlE,CADF,EAFM,EAUN,EAAEc,OAAO,EAAT,EAAaF,KAAK,wBAAU,KAAGd,UAAW,MAAxB,EAA8BG,OAA9B,CAAlB,EAVM,EAWNc,MAXM,CAWCC,OAXD;AATV,QAFJ;AAyBGrB;AAzBH;AADF,GADF;AA+BD,C,EAzDD","file":"AlpReactApp.jsx","sourcesContent":["/* eslint-disable prefer-template */\nimport { Helmet, App as DefaultApp } from 'fody/src';\nimport uneval from './uneval';\nimport assetUrl from './helmet/assetUrl';\nimport type { ReactNodeType, ModuleDescriptorType } from './types';\n\ntype PropsType = {\n  children: ReactNodeType,\n  context: Object,\n  moduleDescriptor: ModuleDescriptorType,\n  scriptName: ?string,\n  initialData: ?Object,\n};\n\nexport default ({\n  children,\n  context,\n  moduleDescriptor,\n  scriptName,\n  initialData,\n  initialBrowserContext,\n}: PropsType): ReactNodeType => {\n  const version: string = context.config.get('version');\n  const moduleIdentifier: ?string = moduleDescriptor && moduleDescriptor.identifier;\n  if (!version) throw new Error('Invalid version');\n\n  return (\n    <DefaultApp context={context}>\n      <div className=\"react-app\">\n        {BROWSER ? null : (\n          <Helmet\n            meta={[\n              { charset: 'utf-8' },\n              { name: 'viewport', content: 'width=device-width, initial-scale=1' },\n            ]}\n            link={[\n              { rel: 'stylesheet', href: assetUrl('/index.css', version) },\n              { rel: 'stylesheet', href: assetUrl('/styles.css', version) },\n            ]}\n            script={[\n              { src: 'https://polyfill.io/v2/polyfill.min.js?features=default,es6,localStorage,fetch,Intl&unknown=polyfill' },\n              { innerHTML: (\n                (`${moduleIdentifier ? `window.MODULE_IDENTIFIER='${moduleIdentifier}';` : ''}`)\n                + `window.VERSION='${version}';`\n                + `window.initialData=${uneval(initialData)};`\n                + (!initialBrowserContext ? '' : (\n                    `window.initialBrowserContext=${uneval(initialBrowserContext)};`\n                ))\n              ) },\n              { defer: '', src: assetUrl(`/${scriptName}.js`, version) },\n            ].filter(Boolean)}\n          />\n        )}\n        {children}\n      </div>\n    </DefaultApp>\n  );\n};\n"]}