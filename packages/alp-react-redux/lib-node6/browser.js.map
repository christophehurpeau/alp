{"version":3,"sources":["../src/browser.js"],"names":[],"mappings":";;;;;;;AAIA;;;;;kBAIS,e;;;;;;;;;uBACA,O;;;;AAHT;;;;;sBAQS,gB;;;;;;sBAAkB,uB;;;kBAOH,a;;AApBxB;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;QAKO,4B;QACA,Y;QACA,a;QACA,Y;;;AAGP,MAAM,SAAS,gCAAW,iBAAX,CAAf;;AAEA,IAAI,KAAJ;AACA,IAAI,iCAAJ;;AAEe,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC7C,SAAQ,GAAD,IAAS;AACd,UAAM,cAAc,CAClB,2CAAyB,GAAzB,CADkB,iCAApB;AAIA,QAAI,IAAI,SAAR,EAAmB;AACjB,aAAO,KAAP,CAAa,iCAAb;AACA,UAAI,SAAJ,CAAc,EAAd,CAAiB,cAAjB,EAAiC,UAAU;AACzC,eAAO,IAAP,CAAY,gCAAZ,EAA8C,MAA9C;AACA,YAAI,KAAJ,EAAW;AACT,gBAAM,QAAN,CAAe,MAAf;AACD;AACF,OALD;AAMA,kBAAY,IAAZ,CAAiB,oCAAoB,GAApB,CAAjB;AACD;;AAED,QAAI,OAAJ,CAAY,MAAZ,GAAqB,UAAU,gBAAV,EAA4B,IAA5B,EAAkC,OAAlC,EAA2C;AAC9D,aAAO,KAAP,CAAa,aAAb,EAA4B,EAAE,IAAF,EAA5B;;AAEA,UAAI,CAAC,iBAAiB,IAAtB,EAA4B;AAC1B,cAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACD;;AAED,UAAI,CAAC,OAAD,IAAY,iBAAiB,MAAjC,EAAyC;AACvC,cAAM,eAAe,SACA,sCAAsC,iBAAiB,UADvD,GAEA,MAAM,QAAN,EAFA,GAEmB,SAFxC;;AAIQ;AACR,eAAO,iBAAiB,MAAjB,CAAwB,YAAxB,EAAsC,IAAtC,EAA4C,IAA5C,CAAiD,QAC5C,KAAK,MAAL,CAAY,gBAAZ,EAA8B,IAA9B,EAAoC,IAApC,CADL,CAAP;AAGD;;AAED,YAAM,UAAU,iBAAiB,OAAjC;;AAEA,UAAI,CAAC,OAAL,EAAc;AACZ,gBAAQ,SAAR;AACD,OAFD,MAEO,IAAI,UAAU,SAAd,EAAyB;AAC9B,gBAAQ,wBACI,OADJ,EAEI,IAFJ,EAGI,oBACI,4BAAgB,GAAG,WAAnB,CADJ,EAEI,OAAO,iBAAP,GAA2B,OAAO,iBAAP,EAA3B,GAAwD,KAAK,CAFjE,CAHJ,CAAR;AAQD,OATM,MASA;AACL,cAAM,QAAQ,MAAM,QAAN,EAAd;;AAEA,YAAI,sCAAsC,iBAAiB,UAA3D,EAAuE;AACrE;AACA,iBAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,OAAO,OAAO,MAAM,GAAN,CAAzC;AACD;;AAED,eAAO,MAAP,CAAc,KAAd,EAAqB,IAArB;;AAEA;AACA,cAAM,cAAN,CAAqB,OAArB;AACD;;AAED,0CAAoC,iBAAiB,UAArD;AACA,WAAK,KAAL,GAAa,KAAb;;AAEA,0BAAO;AACL,iBAAS,IADJ;AAEL,cAAM,iBAAiB,IAFlB;AAGL,cAAM,IAHD;AAIL,eAJK;AAKL,aAAK;AALA,OAAP;AAOD,KAvDD;AAwDD,GAxED;AAyED","file":"browser.js","sourcesContent":["/* global window */\nimport render, { App as DefaultApp } from 'fody';\nimport ReduxApp from 'fody-redux-app';\nimport Logger from 'nightingale-logger';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { promiseMiddleware, createFunctionMiddleware } from './middlewares';\nimport { websocketMiddleware } from './websocket';\n\nexport { combineReducers } from 'redux';\nexport { connect } from 'react-redux';\nexport createPureStatelessComponent from 'react-pure-stateless-component';\nexport createAction from './createAction';\nexport createReducer from './createReducer';\nexport createLoader from './createLoader';\nexport { createEmitAction, createEmitPromiseAction } from './websocket';\n\nconst logger = new Logger('alp.react-redux');\n\nlet store;\nlet currentModuleDescriptorIdentifier;\n\nexport default function alpReactRedux(element) {\n  return (app) => {\n    const middlewares = [\n      createFunctionMiddleware(app),\n      promiseMiddleware,\n    ];\n    if (app.websocket) {\n      logger.debug('register websocket redux:action');\n      app.websocket.on('redux:action', action => {\n        logger.info('dispatch action from websocket', action);\n        if (store) {\n          store.dispatch(action);\n        }\n      });\n      middlewares.push(websocketMiddleware(app));\n    }\n\n    app.context.render = function (moduleDescriptor, data, _loaded) {\n      logger.debug('render view', { data });\n\n      if (!moduleDescriptor.View) {\n        throw new Error('View is undefined, class expected');\n      }\n\n      if (!_loaded && moduleDescriptor.loader) {\n        const currentState = store &&\n                             currentModuleDescriptorIdentifier === moduleDescriptor.identifier ?\n                             store.getState() : undefined;\n\n                // const _state = data;\n        return moduleDescriptor.loader(currentState, data).then(data => (\n                    this.render(moduleDescriptor, data, true)\n                ));\n      }\n\n      const reducer = moduleDescriptor.reducer;\n\n      if (!reducer) {\n        store = undefined;\n      } else if (store === undefined) {\n        store = createStore(\n                    reducer,\n                    data,\n                    compose(\n                        applyMiddleware(...middlewares),\n                        window.devToolsExtension ? window.devToolsExtension() : f => f,\n                    ),\n                );\n      } else {\n        const state = store.getState();\n\n        if (currentModuleDescriptorIdentifier !== moduleDescriptor.identifier) {\n          // replace state\n          Object.keys(state).forEach(key => delete state[key]);\n        }\n\n        Object.assign(state, data);\n\n        // replace reducer and dispatch init action\n        store.replaceReducer(reducer);\n      }\n\n      currentModuleDescriptorIdentifier = moduleDescriptor.identifier;\n      this.store = store;\n\n      render({\n        context: this,\n        View: moduleDescriptor.View,\n        data: data,\n        element,\n        App: reducer ? ReduxApp : DefaultApp,\n      });\n    };\n  };\n}\n"]}