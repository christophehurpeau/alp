{"version":3,"sources":["../src/browser.js"],"names":["Helmet","combineReducers","connect","createEmitAction","createEmitPromiseAction","alpReactRedux","AlpReactApp","AlpReduxApp","createPureStatelessComponent","createAction","createReducer","createLoader","HYDRATE_STATE","logger","store","currentModuleDescriptorIdentifier","element","app","middlewares","websocket","debug","on","action","info","dispatch","push","context","render","moduleDescriptor","data","_loaded","_loadingBar","loader","currentState","identifier","getState","undefined","then","reducer","type","state","Object","create","window","devToolsExtension","f","assign","App","appProps","View","props","err"],"mappings":"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","file":"browser.js","sourcesContent":["/* global window */\nimport render from 'fody/src';\nimport Logger from 'nightingale-logger/src';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { promiseMiddleware, createFunctionMiddleware } from './middlewares-browser';\nimport { websocketMiddleware } from './websocket';\nimport loadingBar from './loading-bar';\nimport AlpReactApp from './AlpReactApp';\nimport AlpReduxApp from './AlpReduxApp';\n\nexport { AlpReactApp, AlpReduxApp };\nexport { Helmet } from 'fody/src';\nexport { combineReducers } from 'redux';\nexport { connect } from 'react-redux';\nexport createPureStatelessComponent from 'react-pure-stateless-component';\nexport createAction from './createAction';\nexport createReducer from './createReducer';\nexport createLoader from './createLoader';\nexport { createEmitAction, createEmitPromiseAction } from './websocket';\n\nconst HYDRATE_STATE = 'HYDRATE_STATE';\nconst logger = new Logger('alp:react-redux');\n\nlet store;\nlet currentModuleDescriptorIdentifier;\n\n\nexport default function alpReactRedux(element) {\n  return (app) => {\n    const middlewares = [\n      createFunctionMiddleware(app),\n      promiseMiddleware,\n    ];\n\n    if (app.websocket) {\n      logger.debug('register websocket redux:action');\n      app.websocket.on('redux:action', action => {\n        logger.info('dispatch action from websocket', action);\n        if (store) {\n          store.dispatch(action);\n        }\n      });\n      middlewares.push(websocketMiddleware(app));\n    }\n\n    app.context.render = function (moduleDescriptor, data, _loaded, _loadingBar) {\n      if (!_loadingBar) _loadingBar = loadingBar();\n      logger.debug('render view', { data });\n\n      try {\n        if (!PRODUCTION && !moduleDescriptor.View) {\n          throw new Error('View is undefined, class expected');\n        }\n\n        if (!_loaded && moduleDescriptor.loader) {\n          const currentState = store &&\n          currentModuleDescriptorIdentifier === moduleDescriptor.identifier ?\n            store.getState() : undefined;\n\n          // const _state = data;\n          return moduleDescriptor.loader(currentState, data).then(data => (\n            this.render(moduleDescriptor, data, true, _loadingBar)\n          ));\n        }\n\n        let reducer = moduleDescriptor.reducer;\n\n        if (!reducer) {\n          if (store) {\n            reducer = () => {};\n            store.dispatch({ type: HYDRATE_STATE, state: Object.create(null) });\n          }\n        } else if (store === undefined) {\n          store = createStore(\n            (state, action) => {\n              if (action.type === HYDRATE_STATE) {\n                state = action.state;\n              }\n\n              return reducer(state, action);\n            },\n            data,\n            compose(\n              applyMiddleware(...middlewares),\n              window.devToolsExtension ? window.devToolsExtension() : f => f,\n            ),\n          );\n        } else {\n          const state = Object.create(null);\n\n          if (store && currentModuleDescriptorIdentifier === moduleDescriptor.identifier) {\n            // keep state\n            Object.assign(state, store.getState());\n          }\n\n          Object.assign(state, data);\n          store.dispatch({ type: HYDRATE_STATE, state });\n        }\n\n        currentModuleDescriptorIdentifier = moduleDescriptor.identifier;\n        this.store = store;\n\n        render({\n          App: moduleDescriptor.reducer ? AlpReduxApp : AlpReactApp,\n          appProps: {\n            store: store,\n            context: this,\n            moduleDescriptor,\n          },\n          View: moduleDescriptor.View,\n          props: data,\n          element,\n        });\n      } catch (err) {\n        _loadingBar();\n        throw err;\n      }\n\n      _loadingBar();\n    };\n  };\n}\n"]}