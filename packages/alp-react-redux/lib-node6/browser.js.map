{"version":3,"sources":["../src/browser.js"],"names":[],"mappings":";;;;;;kBAawB,a;;AAbxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;QAEO,Y;QACA,a;;;AAEP,MAAM,SAAS,gCAAW,iBAAX,CAAf;;AAEA,IAAI,KAAJ;;AAEe,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC3C,WAAQ,GAAD,IAAS;AACZ,YAAI,OAAJ,CAAY,MAAZ,GAAqB,UAAU,gBAAV,EAA4B,IAA5B,EAAkC;AACnD,mBAAO,KAAP,CAAa,aAAb,EAA4B,EAAE,IAAF,EAA5B;;AAEA,gBAAI,CAAC,iBAAiB,IAAtB,EAA4B;AACxB,sBAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAED,kBAAM,UAAU,iBAAiB,OAAjC;;AAEA,gBAAI,UAAU,SAAd,EAAyB;AACrB,oBAAI,OAAJ,EAAa;AACT,4BAAQ,wBAAY,OAAZ,EAAqB,IAArB,CAAR;AACH;AACJ,aAJD,MAIO;;AAEH,sBAAM,QAAQ,MAAM,QAAN,EAAd;AACA,uBAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,OAAO,OAAO,MAAM,GAAN,CAAzC;AACA,uBAAO,MAAP,CAAc,KAAd,EAAqB,IAArB;;;AAGA,oBAAI,OAAJ,EAAa;AACT,0BAAM,cAAN,CAAqB,OAArB;AACH,iBAFD,MAEO;AACH,0BAAM,cAAN,CAAqB,CAAC,KAAD,EAAQ,MAAR,KAAmB,KAAxC;AACH;AACJ;;AAED,gBAAI,OAAJ,EAAa;AACT,qBAAK,KAAL,GAAa,KAAb;AACH;;AAED,gCAAO;AACH,yBAAS,IADN;AAEH,sBAAM,iBAAiB,IAFpB;AAGH,oBAHG;AAIH,uBAJG;AAKH,qBAAK;AALF,aAAP;AAOH,SAtCD;AAuCH,KAxCD;AAyCH","file":"browser.js","sourcesContent":["import DefaultApp from 'fody-app';\nimport ReduxApp from 'fody-redux-app';\nimport render from 'fody';\nimport Logger from 'nightingale-logger';\nimport { createStore } from 'redux';\n\nexport createAction from './createAction';\nexport createReducer from './createReducer';\n\nconst logger = new Logger('alp.react-redux');\n\nlet store;\n\nexport default function alpReactRedux(element) {\n    return (app) => {\n        app.context.render = function (moduleDescriptor, data) {\n            logger.debug('render view', { data });\n\n            if (!moduleDescriptor.View) {\n                throw new Error('View is undefined, class expected');\n            }\n\n            const reducer = moduleDescriptor.reducer;\n\n            if (store === undefined) {\n                if (reducer) {\n                    store = createStore(reducer, data);\n                }\n            } else {\n                // replace state\n                const state = store.getState();\n                Object.keys(state).forEach(key => delete state[key]);\n                Object.assign(state, data);\n\n                // replace reducer\n                if (reducer) {\n                    store.replaceReducer(reducer);\n                } else {\n                    store.replaceReducer((state, action) => state);\n                }\n            }\n\n            if (reducer) {\n                this.store = store;\n            }\n\n            render({\n                context: this,\n                View: moduleDescriptor.View,\n                data,\n                element,\n                App: reducer ? ReduxApp : DefaultApp,\n            });\n        };\n    };\n}\n"]}