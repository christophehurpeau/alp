{"version":3,"sources":["../src/websocket.js"],"names":[],"mappings":"AAAA,OAAO,MAAP,MAAmB,oBAAnB;AACA,OAAO,YAAP,MAAyB,gBAAzB;;AAEA,IAAM,SAAS,IAAI,MAAJ,CAAW,2BAAX,CAAf;;AAEA,OAAO,SAAS,gBAAT,CAA0B,IAA1B,EAAwC,kBAAxC,EAA4F;AACjG,SAAO,aAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAE,MAAM,EAAE,WAAW,IAAb,EAAR,EAAvC,CAAP;AACD;;AAED,OAAO,SAAS,uBAAT,CACL,IADK,EAEL,kBAFK,EAGL;AACA,SAAO,aAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAE,MAAM,EAAE,WAAW,IAAb,EAAmB,SAAS,IAA5B,EAAR,EAAvC,CAAP;AACD;;AAED,OAAO,IAAM,sBAAsB,OAAO,SAAS,QAAQ,UAAU;AACnE,MAAI,CAAC,OAAO,IAAR,IAAgB,CAAC,OAAO,IAAP,CAAY,SAAjC,EAA4C;AAC1C,WAAO,KAAK,MAAL,CAAP;AACD;;AAED,MAAI,CAAC,OAAO,IAAP,CAAY,OAAjB,EAA0B;AACxB,QAAI,SAAJ,CAAc,IAAd,CAAmB,OAAO,IAA1B,EAAgC,MAAhC;AACA;AACD;;AAED,MAAM,WAAW,WAAW,MAAM;AAChC,WAAO,IAAP,CAAY,wBAAZ,EAAsC,EAAE,MAAF,EAAtC;AACA;AACA,YAAQ,GAAR,CAAY,wCAAZ,EAAsD,MAAtD;AACD,GAJgB,EAId,KAJc,CAAjB;;AAMA,MAAI,SAAJ,CAAc,IAAd,CAAmB,OAAO,IAA1B,EAAgC,MAAhC,EAAyC,MAAD,IAAY;AAClD,iBAAa,QAAb;AACA,QAAI,MAAJ,EAAY;AACV,YAAM,QAAN,CAAe,MAAf;AACD;AACF,GALD;AAMD,CAtBM","file":"websocket.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport createAction from './createAction';\n\nconst logger = new Logger('alp.react-redux.websocket');\n\nexport function createEmitAction(type: string, argsNamesOrHandler: ?Array<string>|string|Function) {\n  return createAction(type, argsNamesOrHandler, { meta: { websocket: true } });\n}\n\nexport function createEmitPromiseAction(\n  type: string,\n  argsNamesOrHandler: ?Array<string>|string|Function,\n) {\n  return createAction(type, argsNamesOrHandler, { meta: { websocket: true, promise: true } });\n}\n\nexport const websocketMiddleware = app => store => next => action => {\n  if (!action.meta || !action.meta.websocket) {\n    return next(action);\n  }\n\n  if (!action.meta.promise) {\n    app.websocket.emit(action.type, action);\n    return;\n  }\n\n  const resolved = setTimeout(() => {\n    logger.warn('websocket emit timeout', { action });\n    // eslint-disable-next-line no-console\n    console.log('alp.react-redux websocket emit timeout', action);\n  }, 10000);\n\n  app.websocket.emit(action.type, action, (action) => {\n    clearTimeout(resolved);\n    if (action) {\n      store.dispatch(action);\n    }\n  });\n};\n"]}