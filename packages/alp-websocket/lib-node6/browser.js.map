{"version":3,"sources":["../src/browser.js"],"names":["alpWebsocket","logger","socket","successfulConnection","connected","websocket","on","off","emit","isConnected","isDisconnected","app","namespaceName","start","config","context","Error","webSocketConfig","get","has","secure","port","location","hostname","reconnectionDelay","reconnectionDelayMax","timeout","transports","success","warn","version","window","VERSION","process","env","NODE_ENV","confirm","t","reload","args","debug","Promise","resolve","reject","resolved","setTimeout","error","result","clearTimeout","type","handler"],"mappings":"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","file":"browser.js","sourcesContent":["/* global location, window, confirm */\nimport socketio from 'socket.io-client';\nimport Logger from 'nightingale-logger/src';\n\nconst logger = new Logger('alp:websocket');\nlet socket;\nlet successfulConnection = false;\nlet connected = false;\n\nexport const websocket = {\n  get connected() { return connected; },\n  on,\n  off,\n  emit,\n  isConnected,\n  isDisconnected,\n};\n\nexport default function alpWebsocket(app, namespaceName) {\n  start(app, namespaceName);\n  app.websocket = websocket;\n  websocket.socket = socket;\n  return socket;\n}\n\nfunction start({ config, context }, namespaceName = '') {\n  if (socket) {\n    throw new Error('WebSocket already started');\n  }\n\n  const webSocketConfig = config.get('webSocket') || config.get('websocket');\n\n  if (!webSocketConfig) {\n    throw new Error('Missing config webSocket');\n  }\n\n  if (!webSocketConfig.has('port')) {\n    throw new Error('Missing config webSocket.port');\n  }\n\n  const secure = webSocketConfig.get('secure');\n  const port = webSocketConfig.get('port');\n\n  socket = socketio(`http${secure ? 's' : ''}://${location.hostname}:${port}/${namespaceName}`, {\n    reconnectionDelay: 500,\n    reconnectionDelayMax: 2500,\n    timeout: 4000,\n    transports: ['websocket'],\n  });\n\n  socket.on('connect', () => {\n    logger.success('connected');\n    successfulConnection = true;\n    connected = true;\n  });\n\n  socket.on('reconnect', () => {\n    logger.success('reconnected');\n    connected = true;\n  });\n\n  socket.on('disconnect', () => {\n    logger.warn('disconnected');\n    connected = false;\n  });\n\n  socket.on('hello', ({ version }) => {\n    if (version !== window.VERSION) {\n      // eslint-disable-next-line no-alert\n      if (process.env.NODE_ENV !== 'production' || confirm(context.t('newversion'))) {\n        return location.reload(true);\n      }\n    }\n  });\n\n  return socket;\n}\n\nfunction emit(...args): Promise {\n  logger.debug('emit', { args });\n  return new Promise((resolve, reject) => {\n    const resolved = setTimeout(() => {\n      logger.warn('websocket emit timeout', { args });\n      reject(new Error('websocket response timeout'));\n    }, 10000);\n\n    socket.emit(...args, (error, result) => {\n      clearTimeout(resolved);\n      if (error != null) return reject(error);\n      resolve(result);\n    });\n  });\n}\n\nfunction on(type, handler) {\n  socket.on(type, handler);\n  return handler;\n}\n\nfunction off(type, handler) {\n  socket.off(type, handler);\n}\n\n\nfunction isConnected() {\n  // socket.connected is not updated after reconnect event\n  return socket && connected;\n}\n\nfunction isDisconnected() {\n  return successfulConnection && !isConnected();\n}\n"]}