{"version":3,"sources":["../src/index.js"],"names":["readFileSync","socketio","Logger","logger","io","alpWebsocket","app","dirname","start","config","certPath","websocket","on","close","subscribe","socket","name","callbackOnSubscribe","callbackOnUnsubscribe","diconnect","info","join","callback","leave","removeListener","Error","webSocketConfig","get","has","secure","port","createServer","require","server","key","cert","listen","error","err","debug","id","emit","version"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable no-use-before-define */\nimport { readFileSync } from 'fs';\nimport socketio from 'socket.io';\nimport Logger from 'nightingale-logger/src';\n\nconst logger = new Logger('alp:websocket');\n\nlet io;\n\n/**\n * @param {Koa|AlpNodeApp} app\n * @param {string} [dirname] for tls, dirname of server.key server.crt. If undefined: app.certPath\n */\nexport default function alpWebsocket(app, dirname) {\n  start(app.config, dirname || app.certPath);\n  app.websocket = io;\n  app.on('close', close);\n  return io;\n}\n\nexport function close() {\n  io.close();\n}\n\nexport function subscribe(socket, name, callbackOnSubscribe, callbackOnUnsubscribe) {\n  const diconnect = callbackOnUnsubscribe && (() => callbackOnUnsubscribe());\n  socket.on(`subscribe:${name}`, callback => {\n    logger.info('join', { name });\n    socket.join(name);\n\n    if (callbackOnSubscribe) {\n      callback(null, callbackOnSubscribe());\n    } else {\n      callback(null);\n    }\n\n    if (diconnect) socket.on('disconnect', diconnect);\n  });\n\n  socket.on(`unsubscribe:${name}`, callback => {\n    logger.info('leave', { name });\n    socket.leave(name);\n    if (diconnect) socket.removeListener('disconnect', diconnect);\n\n    if (callbackOnUnsubscribe) {\n      callback(null, callbackOnUnsubscribe());\n    } else {\n      callback(null);\n    }\n  });\n}\n\nfunction start(config, dirname) {\n  if (io) {\n    throw new Error('Already started');\n  }\n\n  const webSocketConfig = config.get('webSocket') || config.get('websocket');\n\n  if (!webSocketConfig) {\n    throw new Error('Missing config webSocket');\n  }\n\n  if (!webSocketConfig.has('port')) {\n    throw new Error('Missing config webSocket.port');\n  }\n\n  const secure = webSocketConfig.get('secure');\n  const port = webSocketConfig.get('port');\n  // eslint-disable-next-line global-require, import/no-dynamic-require\n  const createServer = require(secure ? 'https' : 'http').createServer;\n\n  const server = (() => {\n    if (!secure) {\n      return createServer();\n    }\n\n    return createServer({\n      key: readFileSync(`${dirname}/server.key`),\n      cert: readFileSync(`${dirname}/server.crt`),\n    });\n  })();\n\n  logger.info('Starting', { port });\n  server.listen(port, () => logger.info('Listening', { port }));\n  server.on('error', err => logger.error(err));\n  io = socketio(server);\n\n  io.on('connection', socket => {\n    logger.debug('connected', { id: socket.id });\n    socket.emit('hello', { version: config.get('version') });\n\n    socket.on('error', err => logger.error(err));\n    socket.on('disconnect', () => {\n      logger.debug('disconnected', { id: socket.id });\n    });\n  });\n\n  io.on('error', err => logger.error(err));\n\n  return io;\n}\n"]}