{"version":3,"sources":["../src/index.js"],"names":["readFileSync","socketio","Logger","logger","io","alpWebsocket","app","dirname","reduxReducers","websocket","state","start","config","certPath","on","close","subscribe","socket","name","callbackOnSubscribe","callbackOnUnsubscribe","diconnect","callback","info","join","leave","removeListener","Error","webSocketConfig","get","has","secure","port","createServer","require","server","key","cert","listen","err","error","debug","id","emit","version"],"mappings":"AAAA;AACA,SAASA,YAAT,QAA6B,IAA7B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,MAAP;;AAEA,MAAMC,SAAS,IAAID,MAAJ,CAAW,eAAX,CAAf;;AAEA,IAAIE,EAAJ;;AAEA;;;;AAIA,eAAe,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,OAA3B,EAAoC;AACjDD,MAAIE,aAAJ,CAAkBC,SAAlB,GAA8B,CAACC,QAAQ,cAAT,KAA4BA,KAA1D;;AAEAC,QAAML,IAAIM,MAAV,EAAkBL,WAAWD,IAAIO,QAAjC;AACAP,MAAIG,SAAJ,GAAgBL,EAAhB;AACAE,MAAIQ,EAAJ,CAAO,OAAP,EAAgBC,KAAhB;AACA,SAAOX,EAAP;AACD;;AAED,OAAO,SAASW,KAAT,GAAiB;AACtBX,KAAGW,KAAH;AACD;;AAED,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,IAA3B,EAAiCC,mBAAjC,EAAsDC,qBAAtD,EAA6E;AAClF,QAAMC,YAAYD,0BAA0B,MAAMA,uBAAhC,CAAlB;AACAH,SAAOH,EAAP,CAAW,aAAYI,IAAK,EAA5B,EAA+BI,YAAY;AACzCnB,WAAOoB,IAAP,CAAY,MAAZ,EAAoB,EAAEL,IAAF,EAApB;AACAD,WAAOO,IAAP,CAAYN,IAAZ;;AAEA,QAAIC,mBAAJ,EAAyB;AACvBG,eAAS,IAAT,EAAeH,qBAAf;AACD,KAFD,MAEO;AACLG,eAAS,IAAT;AACD;;AAED,QAAID,SAAJ,EAAeJ,OAAOH,EAAP,CAAU,YAAV,EAAwBO,SAAxB;AAChB,GAXD;;AAaAJ,SAAOH,EAAP,CAAW,eAAcI,IAAK,EAA9B,EAAiCI,YAAY;AAC3CnB,WAAOoB,IAAP,CAAY,OAAZ,EAAqB,EAAEL,IAAF,EAArB;AACAD,WAAOQ,KAAP,CAAaP,IAAb;AACA,QAAIG,SAAJ,EAAeJ,OAAOS,cAAP,CAAsB,YAAtB,EAAoCL,SAApC;;AAEf,QAAID,qBAAJ,EAA2B;AACzBE,eAAS,IAAT,EAAeF,uBAAf;AACD,KAFD,MAEO;AACLE,eAAS,IAAT;AACD;AACF,GAVD;AAWD;;AAED,SAASX,KAAT,CAAeC,MAAf,EAAuBL,OAAvB,EAAgC;AAC9B,MAAIH,EAAJ,EAAQ;AACN,UAAM,IAAIuB,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,QAAMC,kBAAkBhB,OAAOiB,GAAP,CAAW,WAAX,KAA2BjB,OAAOiB,GAAP,CAAW,WAAX,CAAnD;;AAEA,MAAI,CAACD,eAAL,EAAsB;AACpB,UAAM,IAAID,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,MAAI,CAACC,gBAAgBE,GAAhB,CAAoB,MAApB,CAAL,EAAkC;AAChC,UAAM,IAAIH,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,QAAMI,SAASH,gBAAgBC,GAAhB,CAAoB,QAApB,CAAf;AACA,QAAMG,OAAOJ,gBAAgBC,GAAhB,CAAoB,MAApB,CAAb;AACA;AACA,QAAMI,eAAeC,QAAQH,SAAS,OAAT,GAAmB,MAA3B,EAAmCE,YAAxD;;AAEA,QAAME,SAAS,CAAC,MAAM;AACpB,QAAI,CAACJ,MAAL,EAAa;AACX,aAAOE,cAAP;AACD;;AAED,WAAOA,aAAa;AAClBG,WAAKpC,aAAc,GAAEO,OAAQ,aAAxB,CADa;AAElB8B,YAAMrC,aAAc,GAAEO,OAAQ,aAAxB;AAFY,KAAb,CAAP;AAID,GATc,GAAf;;AAWAJ,SAAOoB,IAAP,CAAY,UAAZ,EAAwB,EAAES,IAAF,EAAxB;AACAG,SAAOG,MAAP,CAAcN,IAAd,EAAoB,MAAM7B,OAAOoB,IAAP,CAAY,WAAZ,EAAyB,EAAES,IAAF,EAAzB,CAA1B;AACAG,SAAOrB,EAAP,CAAU,OAAV,EAAmByB,OAAOpC,OAAOqC,KAAP,CAAaD,GAAb,CAA1B;AACAnC,OAAKH,SAASkC,MAAT,CAAL;;AAEA/B,KAAGU,EAAH,CAAM,YAAN,EAAoBG,UAAU;AAC5Bd,WAAOsC,KAAP,CAAa,WAAb,EAA0B,EAAEC,IAAIzB,OAAOyB,EAAb,EAA1B;AACAzB,WAAO0B,IAAP,CAAY,OAAZ,EAAqB,EAAEC,SAAShC,OAAOiB,GAAP,CAAW,SAAX,CAAX,EAArB;;AAEAZ,WAAOH,EAAP,CAAU,OAAV,EAAmByB,OAAOpC,OAAOqC,KAAP,CAAaD,GAAb,CAA1B;AACAtB,WAAOH,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5BX,aAAOsC,KAAP,CAAa,cAAb,EAA6B,EAAEC,IAAIzB,OAAOyB,EAAb,EAA7B;AACD,KAFD;AAGD,GARD;;AAUAtC,KAAGU,EAAH,CAAM,OAAN,EAAeyB,OAAOpC,OAAOqC,KAAP,CAAaD,GAAb,CAAtB;;AAEA,SAAOnC,EAAP;AACD","file":"index.js","sourcesContent":["/* eslint-disable no-use-before-define */\nimport { readFileSync } from 'fs';\nimport socketio from 'socket.io';\nimport Logger from 'nightingale-logger/src';\n\nconst logger = new Logger('alp:websocket');\n\nlet io;\n\n/**\n * @param {Koa|AlpNodeApp} app\n * @param {string} [dirname] for tls, dirname of server.key server.crt. If undefined: app.certPath\n */\nexport default function alpWebsocket(app, dirname) {\n  app.reduxReducers.websocket = (state = 'disconnected') => state;\n\n  start(app.config, dirname || app.certPath);\n  app.websocket = io;\n  app.on('close', close);\n  return io;\n}\n\nexport function close() {\n  io.close();\n}\n\nexport function subscribe(socket, name, callbackOnSubscribe, callbackOnUnsubscribe) {\n  const diconnect = callbackOnUnsubscribe && (() => callbackOnUnsubscribe());\n  socket.on(`subscribe:${name}`, callback => {\n    logger.info('join', { name });\n    socket.join(name);\n\n    if (callbackOnSubscribe) {\n      callback(null, callbackOnSubscribe());\n    } else {\n      callback(null);\n    }\n\n    if (diconnect) socket.on('disconnect', diconnect);\n  });\n\n  socket.on(`unsubscribe:${name}`, callback => {\n    logger.info('leave', { name });\n    socket.leave(name);\n    if (diconnect) socket.removeListener('disconnect', diconnect);\n\n    if (callbackOnUnsubscribe) {\n      callback(null, callbackOnUnsubscribe());\n    } else {\n      callback(null);\n    }\n  });\n}\n\nfunction start(config, dirname) {\n  if (io) {\n    throw new Error('Already started');\n  }\n\n  const webSocketConfig = config.get('webSocket') || config.get('websocket');\n\n  if (!webSocketConfig) {\n    throw new Error('Missing config webSocket');\n  }\n\n  if (!webSocketConfig.has('port')) {\n    throw new Error('Missing config webSocket.port');\n  }\n\n  const secure = webSocketConfig.get('secure');\n  const port = webSocketConfig.get('port');\n  // eslint-disable-next-line global-require, import/no-dynamic-require\n  const createServer = require(secure ? 'https' : 'http').createServer;\n\n  const server = (() => {\n    if (!secure) {\n      return createServer();\n    }\n\n    return createServer({\n      key: readFileSync(`${dirname}/server.key`),\n      cert: readFileSync(`${dirname}/server.crt`),\n    });\n  })();\n\n  logger.info('Starting', { port });\n  server.listen(port, () => logger.info('Listening', { port }));\n  server.on('error', err => logger.error(err));\n  io = socketio(server);\n\n  io.on('connection', socket => {\n    logger.debug('connected', { id: socket.id });\n    socket.emit('hello', { version: config.get('version') });\n\n    socket.on('error', err => logger.error(err));\n    socket.on('disconnect', () => {\n      logger.debug('disconnected', { id: socket.id });\n    });\n  });\n\n  io.on('error', err => logger.error(err));\n\n  return io;\n}\n"]}