{"version":3,"sources":["../src/browser.js"],"names":["socketio","Logger","logger","socket","websocket","on","off","emit","isConnected","alpWebsocket","app","namespaceName","start","config","context","Error","webSocketConfig","get","has","secure","port","location","hostname","reconnectionDelay","reconnectionDelayMax","timeout","transports","success","warn","version","window","VERSION","process","env","NODE_ENV","confirm","t","reload","args","debug","Promise","resolve","reject","resolved","setTimeout","error","result","clearTimeout","type","handler","connected"],"mappings":"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","file":"browser.js","sourcesContent":["/* global location, window, confirm */\nimport socketio from 'socket.io-client';\nimport Logger from 'nightingale-logger';\n\nconst logger = new Logger('alp.websocket');\nlet socket;\n\nexport const websocket = {\n  on,\n  off,\n  emit,\n  isConnected,\n};\n\nexport default function alpWebsocket(app, namespaceName) {\n  start(app, namespaceName);\n  websocket.socket = socket;\n  return socket;\n}\n\nfunction start({ config, context }, namespaceName = '') {\n  if (socket) {\n    throw new Error('WebSocket already started');\n  }\n\n  const webSocketConfig = config.get('webSocket') || config.get('websocket');\n\n  if (!webSocketConfig) {\n    throw new Error('Missing config webSocket');\n  }\n\n  if (!webSocketConfig.has('port')) {\n    throw new Error('Missing config webSocket.port');\n  }\n\n  const secure = webSocketConfig.get('secure');\n  const port = webSocketConfig.get('port');\n\n  socket = socketio(`http${secure ? 's' : ''}://${location.hostname}:${port}/${namespaceName}`, {\n    reconnectionDelay: 500,\n    reconnectionDelayMax: 2500,\n    timeout: 4000,\n    transports: ['websocket'],\n  });\n\n  socket.on('connect', () => {\n    logger.success('connected');\n  });\n\n  socket.on('disconnect', () => {\n    logger.warn('disconnected');\n  });\n\n  socket.on('hello', ({ version }) => {\n    if (version !== window.VERSION) {\n      // eslint-disable-next-line no-alert\n      if (process.env.NODE_ENV !== 'production' || confirm(context.t('newversion'))) {\n        return location.reload(true);\n      }\n    }\n  });\n\n  return socket;\n}\n\nfunction emit(...args): Promise {\n  logger.debug('emit', { args });\n  return new Promise((resolve, reject) => {\n    const resolved = setTimeout(() => {\n      logger.warn('websocket emit timeout', { args });\n      reject(new Error('websocket response timeout'));\n    }, 10000);\n\n    socket.emit(...args, (error, result) => {\n      clearTimeout(resolved);\n      if (error != null) return reject(error);\n      resolve(result);\n    });\n  });\n}\n\nfunction on(type, handler) {\n  socket.on(type, handler);\n  return handler;\n}\n\nfunction off(type, handler) {\n  socket.off(type, handler);\n}\n\n\nfunction isConnected() {\n  return socket && socket.connected;\n}\n"]}