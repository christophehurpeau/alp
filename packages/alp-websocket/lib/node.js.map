{"version":3,"sources":["../src/node.js"],"names":[],"mappings":";;;;;kBAYwB;;AAZxB;;AACA;;;;AACA;;;;;;;;AAEA,MAAM,SAAS,+BAAkB,eAAlB,EAAmC,sBAAS,IAAT,CAA5C;;AAEN,IAAI,EAAJ;;;;;;;;;;EAMe,SAAS,YAAT,CAAsB,GAAtB,EAA2B,OAA3B,EAAoC;AAC/C,UAAM,IAAI,MAAJ,EAAY,WAAW,CAAC,GAAE,IAAI,OAAJ,EAAY,eAAf,CAAX,CAAlB,CAD+C;AAE/C,QAAI,SAAJ,GAAgB,EAAhB,CAF+C;;AAI/C,WAAO,EAAP,CAJ+C;CAApC;;;;;;EAOf,SAAS,KAAT,CAAe,MAAf,EAAuB,OAAvB,EAAgC;AAC5B,QAAI,EAAJ,EAAQ;AACJ,cAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN,CADI;KAAR;;AAIA,UAAM,kBAAkB,OAAO,GAAP,CAAW,WAAX,CAAlB,CALsB;;AAO5B,QAAI,CAAC,eAAD,EAAkB;AAClB,cAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN,CADkB;KAAtB;;AAIA,QAAI,CAAC,gBAAgB,GAAhB,CAAoB,MAApB,CAAD,EAA8B;AAC9B,cAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN,CAD8B;KAAlC;;AAIA,UAAM,SAAS,gBAAgB,GAAhB,CAAoB,QAApB,CAAT,CAfsB;AAgB5B,UAAM,OAAO,gBAAgB,GAAhB,CAAoB,MAApB,CAAP,CAhBsB;AAiB5B,UAAM,eAAe,QAAQ,SAAS,OAAT,GAAmB,MAAnB,CAAR,CAAmC,YAAnC,CAjBO;;AAmB5B,UAAM,SAAS,CAAC,MAAM;AAClB,YAAI,CAAC,MAAD,EAAS;AACT,mBAAO,cAAP,CADS;SAAb;;AAIA,cAAM,UAAU;AACZ,iBAAK,sBAAa,CAAC,GAAE,OAAH,EAAW,WAAX,CAAb,CAAL;AACA,kBAAM,sBAAa,CAAC,GAAE,OAAH,EAAW,WAAX,CAAb,CAAN;SAFE,CALY;;AAUlB,eAAO,aAAa,OAAb,CAAP,CAVkB;KAAN,CAAD,EAAT,CAnBsB;;AAgC5B,WAAO,IAAP,CAAY,UAAZ,EAAwB,EAAE,UAAF,EAAxB,EAhC4B;AAiC5B,WAAO,MAAP,CAAc,IAAd,EAAoB,MAAM,OAAO,IAAP,CAAY,WAAZ,EAAyB,EAAE,UAAF,EAAzB,CAAN,CAApB,CAjC4B;AAkC5B,WAAO,EAAP,CAAU,OAAV,EAAmB,OAAO,KAAP,CAAnB,CAlC4B;AAmC5B,SAAK,sBAAS,MAAT,CAAL,CAnC4B;;AAqC5B,OAAG,EAAH,CAAM,YAAN,EAAoB,UAAU;AAC1B,eAAO,IAAP,CAAY,WAAZ,EAAyB,EAAE,IAAI,OAAO,EAAP,EAA/B,EAD0B;AAE1B,eAAO,IAAP,CAAY,OAAZ,EAAqB,EAAE,SAAS,OAAO,GAAP,CAAW,SAAX,CAAT,EAAvB,EAF0B;;AAI1B,eAAO,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC1B,mBAAO,IAAP,CAAY,cAAZ,EAA4B,EAAE,IAAI,OAAO,EAAP,EAAlC,EAD0B;SAAN,CAAxB,CAJ0B;KAAV,CAApB,CArC4B;;AA8C5B,OAAG,EAAH,CAAM,OAAN,EAAe,OAAO,KAAP,CAAf,CA9C4B;;AAgD5B,WAAO,EAAP,CAhD4B;CAAhC","file":"node.js","sourcesContent":["import { readFileSync } from 'fs';\nimport socketio from 'socket.io';\nimport { ConsoleLogger, LogLevel } from 'nightingale';\n\nconst logger = new ConsoleLogger('alp-websocket', LogLevel.INFO);\n\nlet io;\n\n/**\n * @param {Koa} app\n * @param {string} dirname for tls server, dirname of the server.key and server.crt\n */\nexport default function alpWebsocket(app, dirname) {\n    start(app.config, dirname || `${app.dirname}/../config/cert`);\n    app.websocket = io;\n\n    return io;\n}\n\nfunction start(config, dirname) {\n    if (io) {\n        throw new Error('Already started');\n    }\n\n    const webSocketConfig = config.get('webSocket');\n\n    if (!webSocketConfig) {\n        throw new Error('Missing config webSocket');\n    }\n\n    if (!webSocketConfig.has('port')) {\n        throw new Error('Missing config webSocket.port');\n    }\n\n    const secure = webSocketConfig.get('secure');\n    const port = webSocketConfig.get('port');\n    const createServer = require(secure ? 'https' : 'http').createServer;\n\n    const server = (() => {\n        if (!secure) {\n            return createServer();\n        }\n\n        const options = {\n            key: readFileSync(`${dirname}/server.key`),\n            cert: readFileSync(`${dirname}/server.crt`),\n        };\n\n        return createServer(options);\n    })();\n\n    logger.info('Starting', { port });\n    server.listen(port, () => logger.info('Listening', { port }));\n    server.on('error', logger.error);\n    io = socketio(server);\n\n    io.on('connection', socket => {\n        logger.info('connected', { id: socket.id });\n        socket.emit('hello', { version: config.get('version') });\n\n        socket.on('disconnect', () => {\n            logger.info('disconnected', { id: socket.id });\n        });\n    });\n\n    io.on('error', logger.error);\n\n    return io;\n}\n"]}