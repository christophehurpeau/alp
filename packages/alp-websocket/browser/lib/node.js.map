{"version":3,"sources":["../../src/node.js"],"names":[],"mappings":";;;;;kBAYwB,Y;;AAZxB;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAM,SAAS,gCAAW,eAAX,CAAf;;AAEA,IAAI,WAAJ;;;;;;;;;;EAMe,SAAS,YAAT,CAAsB,GAAtB,EAA2B,OAA3B,EAAoC;AAC/C,UAAM,IAAI,MAAV,EAAkB,WAAc,IAAI,OAAlB,oBAAlB;AACA,QAAI,SAAJ,GAAgB,EAAhB;;AAEA,WAAO,EAAP;AACH;;;;;;EAED,SAAS,KAAT,CAAe,MAAf,EAAuB,OAAvB,EAAgC;AAC5B,QAAI,EAAJ,EAAQ;AACJ,cAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,QAAM,kBAAkB,OAAO,GAAP,CAAW,WAAX,CAAxB;;AAEA,QAAI,CAAC,eAAL,EAAsB;AAClB,cAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AACH;;AAED,QAAI,CAAC,gBAAgB,GAAhB,CAAoB,MAApB,CAAL,EAAkC;AAC9B,cAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACH;;AAED,QAAM,SAAS,gBAAgB,GAAhB,CAAoB,QAApB,CAAf;AACA,QAAM,OAAO,gBAAgB,GAAhB,CAAoB,MAApB,CAAb;AACA,QAAM,eAAe,QAAQ,SAAS,OAAT,GAAmB,MAA3B,EAAmC,YAAxD;;AAEA,QAAM,SAAU,YAAM;AAClB,YAAI,CAAC,MAAL,EAAa;AACT,mBAAO,cAAP;AACH;;AAED,YAAM,UAAU;AACZ,iBAAK,sBAAgB,OAAhB,iBADO;AAEZ,kBAAM,sBAAgB,OAAhB;AAFM,SAAhB;;AAKA,eAAO,aAAa,OAAb,CAAP;AACH,KAXc,EAAf;;AAaA,WAAO,IAAP,CAAY,UAAZ,EAAwB,EAAE,UAAF,EAAxB;AACA,WAAO,MAAP,CAAc,IAAd,EAAoB;AAAA,eAAM,OAAO,IAAP,CAAY,WAAZ,EAAyB,EAAE,UAAF,EAAzB,CAAN;AAAA,KAApB;AACA,WAAO,EAAP,CAAU,OAAV,EAAmB,OAAO,KAA1B;AACA,SAAK,sBAAS,MAAT,CAAL;;AAEA,OAAG,EAAH,CAAM,YAAN,EAAoB,kBAAU;AAC1B,eAAO,KAAP,CAAa,WAAb,EAA0B,EAAE,IAAI,OAAO,EAAb,EAA1B;AACA,eAAO,IAAP,CAAY,OAAZ,EAAqB,EAAE,SAAS,OAAO,GAAP,CAAW,SAAX,CAAX,EAArB;;AAEA,eAAO,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC1B,mBAAO,KAAP,CAAa,cAAb,EAA6B,EAAE,IAAI,OAAO,EAAb,EAA7B;AACH,SAFD;AAGH,KAPD;;AASA,OAAG,EAAH,CAAM,OAAN,EAAe,OAAO,KAAtB;;AAEA,WAAO,EAAP;AACH","file":"node.js","sourcesContent":["import { readFileSync } from 'fs';\nimport socketio from 'socket.io';\nimport Logger from 'nightingale-logger';\n\nconst logger = new Logger('alp.websocket');\n\nlet io;\n\n/**\n * @param {Koa} app\n * @param {string} dirname for tls server, dirname of the server.key and server.crt\n */\nexport default function alpWebsocket(app, dirname) {\n    start(app.config, dirname || `${app.dirname}/../config/cert`);\n    app.websocket = io;\n\n    return io;\n}\n\nfunction start(config, dirname) {\n    if (io) {\n        throw new Error('Already started');\n    }\n\n    const webSocketConfig = config.get('webSocket');\n\n    if (!webSocketConfig) {\n        throw new Error('Missing config webSocket');\n    }\n\n    if (!webSocketConfig.has('port')) {\n        throw new Error('Missing config webSocket.port');\n    }\n\n    const secure = webSocketConfig.get('secure');\n    const port = webSocketConfig.get('port');\n    const createServer = require(secure ? 'https' : 'http').createServer;\n\n    const server = (() => {\n        if (!secure) {\n            return createServer();\n        }\n\n        const options = {\n            key: readFileSync(`${dirname}/server.key`),\n            cert: readFileSync(`${dirname}/server.crt`),\n        };\n\n        return createServer(options);\n    })();\n\n    logger.info('Starting', { port });\n    server.listen(port, () => logger.info('Listening', { port }));\n    server.on('error', logger.error);\n    io = socketio(server);\n\n    io.on('connection', socket => {\n        logger.debug('connected', { id: socket.id });\n        socket.emit('hello', { version: config.get('version') });\n\n        socket.on('disconnect', () => {\n            logger.debug('disconnected', { id: socket.id });\n        });\n    });\n\n    io.on('error', logger.error);\n\n    return io;\n}\n"]}