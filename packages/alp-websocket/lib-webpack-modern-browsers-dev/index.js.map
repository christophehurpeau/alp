{"version":3,"sources":["../src/index.js"],"names":["readFileSync","socketio","Logger","logger","io","alpWebsocket","app","dirname","start","config","websocket","subscribe","socket","name","callbackOnSubscribe","on","callback","info","join","leave","Error","webSocketConfig","get","has","secure","port","createServer","require","server","key","cert","listen","err","error","debug","id","emit","version"],"mappings":"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","file":"index.js","sourcesContent":["import { readFileSync } from 'fs';\nimport socketio from 'socket.io';\nimport Logger from 'nightingale-logger';\n\nconst logger = new Logger('alp.websocket');\n\nlet io;\n\n/**\n * @param {Koa} app\n * @param {string} dirname for tls server, dirname of the server.key and server.crt\n */\nexport default function alpWebsocket(app, dirname) {\n  start(app.config, dirname);\n  app.websocket = io;\n\n  return io;\n}\n\nexport function subscribe(socket, name, callbackOnSubscribe) {\n  socket.on(`subscribe:${name}`, callback => {\n    logger.info('join', { name });\n    socket.join(name);\n\n    if (callbackOnSubscribe) {\n      callback(null, callbackOnSubscribe());\n    } else {\n      callback(null);\n    }\n  });\n\n  socket.on(`unsubscribe:${name}`, callback => {\n    logger.info('leave', { name });\n    socket.leave(name);\n    callback(null);\n  });\n}\n\nfunction start(config, dirname) {\n  if (io) {\n    throw new Error('Already started');\n  }\n\n  const webSocketConfig = config.get('webSocket') || config.get('websocket');\n\n  if (!webSocketConfig) {\n    throw new Error('Missing config webSocket');\n  }\n\n  if (!webSocketConfig.has('port')) {\n    throw new Error('Missing config webSocket.port');\n  }\n\n  const secure = webSocketConfig.get('secure');\n  const port = webSocketConfig.get('port');\n  // eslint-disable-next-line global-require\n  const createServer = require(secure ? 'https' : 'http').createServer;\n\n  const server = (() => {\n    if (!secure) {\n      return createServer();\n    }\n\n    return createServer({\n      key: readFileSync(`${dirname}/server.key`),\n      cert: readFileSync(`${dirname}/server.crt`),\n    });\n  })();\n\n  logger.info('Starting', { port });\n  server.listen(port, () => logger.info('Listening', { port }));\n  server.on('error', err => logger.error(err));\n  io = socketio(server);\n\n  io.on('connection', socket => {\n    logger.debug('connected', { id: socket.id });\n    socket.emit('hello', { version: config.get('version') });\n\n    socket.on('disconnect', () => {\n      logger.debug('disconnected', { id: socket.id });\n    });\n  });\n\n  io.on('error', err => logger.error(err));\n\n  return io;\n}\n"]}