{"version":3,"sources":["../src/node.js"],"names":[],"mappings":";;;;;kBAYwB,Y;QAOR,S,GAAA,S;;AAnBhB;;AACA;;;;AACA;;;;;;AAEA,MAAM,SAAS,gCAAW,eAAX,CAAf;;AAEA,IAAI,EAAJ;;AAEA;;;;AAIe,SAAS,YAAT,CAAsB,GAAtB,EAA2B,OAA3B,EAAoC;AAC/C,UAAM,IAAI,MAAV,EAAkB,OAAlB;AACA,QAAI,SAAJ,GAAgB,EAAhB;;AAEA,WAAO,EAAP;AACH;;AAEM,SAAS,SAAT,CAAmB,MAAnB,EAA2B,IAA3B,EAAiC,mBAAjC,EAAsD;AACzD,WAAO,EAAP,CAAW,cAAY,IAAK,GAA5B,EAA+B,YAAY;AACvC,eAAO,IAAP,CAAY,MAAZ,EAAoB,EAAE,IAAF,EAApB;AACA,eAAO,IAAP,CAAY,IAAZ;;AAEA,YAAI,mBAAJ,EAAyB;AACrB,qBAAS,IAAT,EAAe,qBAAf;AACH,SAFD,MAEO;AACH,qBAAS,IAAT;AACH;AACJ,KATD;;AAWA,WAAO,EAAP,CAAW,gBAAc,IAAK,GAA9B,EAAiC,YAAY;AACzC,eAAO,IAAP,CAAY,OAAZ,EAAqB,EAAE,IAAF,EAArB;AACA,eAAO,KAAP,CAAa,IAAb;AACA,iBAAS,IAAT;AACH,KAJD;AAKH;;AAED,SAAS,KAAT,CAAe,MAAf,EAAuB,OAAvB,EAAgC;AAC5B,QAAI,EAAJ,EAAQ;AACJ,cAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,UAAM,kBAAkB,OAAO,GAAP,CAAW,WAAX,KAA2B,OAAO,GAAP,CAAW,WAAX,CAAnD;;AAEA,QAAI,CAAC,eAAL,EAAsB;AAClB,cAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AACH;;AAED,QAAI,CAAC,gBAAgB,GAAhB,CAAoB,MAApB,CAAL,EAAkC;AAC9B,cAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACH;;AAED,UAAM,SAAS,gBAAgB,GAAhB,CAAoB,QAApB,CAAf;AACA,UAAM,OAAO,gBAAgB,GAAhB,CAAoB,MAApB,CAAb;AACA;AACA,UAAM,eAAe,QAAQ,SAAS,OAAT,GAAmB,MAA3B,EAAmC,YAAxD;;AAEA,UAAM,SAAS,CAAC,MAAM;AAClB,YAAI,CAAC,MAAL,EAAa;AACT,mBAAO,cAAP;AACH;;AAED,eAAO,aAAa;AAChB,iBAAK,sBAAc,IAAE,OAAQ,cAAxB,CADW;AAEhB,kBAAM,sBAAc,IAAE,OAAQ,cAAxB;AAFU,SAAb,CAAP;AAIH,KATc,GAAf;;AAWA,WAAO,IAAP,CAAY,UAAZ,EAAwB,EAAE,IAAF,EAAxB;AACA,WAAO,MAAP,CAAc,IAAd,EAAoB;AAAA,eAAM,OAAO,IAAP,CAAY,WAAZ,EAAyB,EAAE,IAAF,EAAzB,CAAN;AAAA,KAApB;AACA,WAAO,EAAP,CAAU,OAAV,EAAmB;AAAA,eAAO,OAAO,KAAP,CAAa,GAAb,CAAP;AAAA,KAAnB;AACA,SAAK,sBAAS,MAAT,CAAL;;AAEA,OAAG,EAAH,CAAM,YAAN,EAAoB,UAAU;AAC1B,eAAO,KAAP,CAAa,WAAb,EAA0B,EAAE,IAAI,OAAO,EAAb,EAA1B;AACA,eAAO,IAAP,CAAY,OAAZ,EAAqB,EAAE,SAAS,OAAO,GAAP,CAAW,SAAX,CAAX,EAArB;;AAEA,eAAO,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC1B,mBAAO,KAAP,CAAa,cAAb,EAA6B,EAAE,IAAI,OAAO,EAAb,EAA7B;AACH,SAFD;AAGH,KAPD;;AASA,OAAG,EAAH,CAAM,OAAN,EAAe;AAAA,eAAO,OAAO,KAAP,CAAa,GAAb,CAAP;AAAA,KAAf;;AAEA,WAAO,EAAP;AACH","file":"node.js","sourcesContent":["import { readFileSync } from 'fs';\nimport socketio from 'socket.io';\nimport Logger from 'nightingale-logger';\n\nconst logger = new Logger('alp.websocket');\n\nlet io;\n\n/**\n * @param {Koa} app\n * @param {string} dirname for tls server, dirname of the server.key and server.crt\n */\nexport default function alpWebsocket(app, dirname) {\n    start(app.config, dirname);\n    app.websocket = io;\n\n    return io;\n}\n\nexport function subscribe(socket, name, callbackOnSubscribe) {\n    socket.on(`subscribe:${name}`, callback => {\n        logger.info('join', { name });\n        socket.join(name);\n\n        if (callbackOnSubscribe) {\n            callback(null, callbackOnSubscribe());\n        } else {\n            callback(null);\n        }\n    });\n\n    socket.on(`unsubscribe:${name}`, callback => {\n        logger.info('leave', { name });\n        socket.leave(name);\n        callback(null);\n    });\n}\n\nfunction start(config, dirname) {\n    if (io) {\n        throw new Error('Already started');\n    }\n\n    const webSocketConfig = config.get('webSocket') || config.get('websocket');\n\n    if (!webSocketConfig) {\n        throw new Error('Missing config webSocket');\n    }\n\n    if (!webSocketConfig.has('port')) {\n        throw new Error('Missing config webSocket.port');\n    }\n\n    const secure = webSocketConfig.get('secure');\n    const port = webSocketConfig.get('port');\n    // eslint-disable-next-line global-require\n    const createServer = require(secure ? 'https' : 'http').createServer;\n\n    const server = (() => {\n        if (!secure) {\n            return createServer();\n        }\n\n        return createServer({\n            key: readFileSync(`${dirname}/server.key`),\n            cert: readFileSync(`${dirname}/server.crt`),\n        });\n    })();\n\n    logger.info('Starting', { port });\n    server.listen(port, () => logger.info('Listening', { port }));\n    server.on('error', err => logger.error(err));\n    io = socketio(server);\n\n    io.on('connection', socket => {\n        logger.debug('connected', { id: socket.id });\n        socket.emit('hello', { version: config.get('version') });\n\n        socket.on('disconnect', () => {\n            logger.debug('disconnected', { id: socket.id });\n        });\n    });\n\n    io.on('error', err => logger.error(err));\n\n    return io;\n}\n"]}