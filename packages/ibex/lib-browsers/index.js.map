{"version":3,"sources":["../src/index.js"],"names":["logger","respond","ctx","body","document","innerHTML","nodeType","appendChild","Error","Application","middleware","context","Object","create","app","state","fn","debug","name","push","e","error","url","listeners","length","on","onerror","callback","load","request","response","startsWith","window","location","pathname","createContext","then","catch","emit","err","env"],"mappings":";;;;;;;;;AAGA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;+eARA;AACA;;AASA,IAAMA,SAAS,gCAAW,MAAX,CAAf;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB;AACA,MAAIA,IAAID,OAAJ,KAAgB,KAApB,EAA2B;AACzB;AACD;;AAED,MAAIE,OAAOD,IAAIC,IAAf;AACA,MAAIA,QAAQ,IAAZ,EAAkB;;AAElB;;AAEA,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BC,aAASD,IAAT,CAAcE,SAAd,GAA0BF,IAA1B;AACA;AACD;;AAED,MAAIA,KAAKG,QAAT,EAAmB;AACjBF,aAASD,IAAT,CAAcE,SAAd,GAA0B,EAA1B;AACAD,aAASD,IAAT,CAAcI,WAAd,CAA0BJ,IAA1B;AACD;;AAED,QAAM,IAAIK,KAAJ,CAAU,qBAAV,CAAN;AACD;;IAEoBC,W;;;AAInB,yBAAc;AAAA;;AAAA;;AAEZ,UAAKC,UAAL;AACA,UAAKC,OAAL,GAAeC,OAAOC,MAAP,mBAAf;AACA,UAAKF,OAAL,CAAaG,GAAb;AACA,UAAKH,OAAL,CAAaI,KAAb;AALY;AAMb;;;;wBAMGC,E,EAAc;AAChBhB,aAAOiB,KAAP,CAAa,KAAb,EAAoB,EAAEC,MAAMF,GAAGE,IAAH,IAAW,GAAnB,EAApB;AACA,WAAKR,UAAL,CAAgBS,IAAhB,CAAqBH,EAArB;AACA,aAAO,IAAP;AACD;;;4BAEOI,C,EAAQ;AACdpB,aAAOqB,KAAP,CAAaD,CAAb;AACD;;;wBAEGE,G,EAAY;AACd,UAAI,CAAC,KAAKC,SAAL,CAAe,OAAf,EAAwBC,MAA7B,EAAqC;AACnC,aAAKC,EAAL,CAAQ,OAAR,EAAiB,KAAKC,OAAtB;AACD;;AAED,WAAKC,QAAL,GAAgB,uBAAQ,KAAKjB,UAAb,CAAhB;;AAEA,UAAIY,GAAJ,EAAS;AACP,aAAKM,IAAL,CAAUN,GAAV;AACD;AACF;;;oCAEe;AACd,UAAMX,UAAUC,OAAOC,MAAP,CAAc,KAAKF,OAAnB,CAAhB;AACAA,cAAQkB,OAAR,GAAkBjB,OAAOC,MAAP,mBAAlB;AACAF,cAAQmB,QAAR,GAAmBlB,OAAOC,MAAP,oBAAnB;AACA;AACAF,cAAQkB,OAAR,CAAgBf,GAAhB,GAAsBH,QAAQmB,QAAR,CAAiBhB,GAAjB,GAAuB,IAA7C;AACA,aAAOH,OAAP;AACD;;;yBAEIW,G,EAAa;AAAA;;AAChBtB,aAAOiB,KAAP,CAAa,MAAb,EAAqB,EAAEK,QAAF,EAArB;;AAEA,UAAIA,IAAIS,UAAJ,CAAe,GAAf,CAAJ,EAAyB;AACvBT,cAAMU,OAAOC,QAAP,CAAgBC,QAAhB,GAA2BZ,GAAjC;AACD;;AAED,UAAMX,UAAU,KAAKwB,aAAL,EAAhB;AACA,aAAO,KAAKR,QAAL,CAAchB,OAAd,EACJyB,IADI,CACC;AAAA,eAAMnC,QAAQU,OAAR,CAAN;AAAA,OADD,EAEJ0B,KAFI,CAEE;AAAA,eAAO,OAAKC,IAAL,CAAU,OAAV,EAAmBC,GAAnB,CAAP;AAAA,OAFF,CAAP;AAGD;;;wBA9CyB;AACxB,aAAO,KAAKC,GAAZ;AACD;;;;;;kBAdkB/B,W","file":"index.js","sourcesContent":["/* eslint class-methods-use-this: 'off' */\n/* global window, document */\n\nimport Logger from 'nightingale-logger';\nimport { EventEmitter } from 'events';\nimport compose from './compose';\nimport context from './context';\nimport request from './request';\nimport response from './response';\n\nconst logger = new Logger('ibex');\n\nfunction respond(ctx) {\n  // allow bypassing\n  if (ctx.respond === false) {\n    return;\n  }\n\n  let body = ctx.body;\n  if (body == null) return;\n\n  // const code = ctx.status;\n\n  if (typeof body === 'string') {\n    document.body.innerHTML = body;\n    return;\n  }\n\n  if (body.nodeType) {\n    document.body.innerHTML = '';\n    document.body.appendChild(body);\n  }\n\n  throw new Error('Invalid body result');\n}\n\nexport default class Application extends EventEmitter {\n  middleware: Array<Function>;\n  context: Object;\n\n  constructor() {\n    super();\n    this.middleware = [];\n    this.context = Object.create(context);\n    this.context.app = this;\n    this.context.state = {};\n  }\n\n  get environment(): string {\n    return this.env;\n  }\n\n  use(fn: Function) {\n    logger.debug('use', { name: fn.name || '-' });\n    this.middleware.push(fn);\n    return this;\n  }\n\n  onerror(e: any) {\n    logger.error(e);\n  }\n\n  run(url: mixed) {\n    if (!this.listeners('error').length) {\n      this.on('error', this.onerror);\n    }\n\n    this.callback = compose(this.middleware);\n\n    if (url) {\n      this.load(url);\n    }\n  }\n\n  createContext() {\n    const context = Object.create(this.context);\n    context.request = Object.create(request);\n    context.response = Object.create(response);\n    // eslint-disable-next-line no-multi-assign\n    context.request.app = context.response.app = this;\n    return context;\n  }\n\n  load(url: string) {\n    logger.debug('load', { url });\n\n    if (url.startsWith('?')) {\n      url = window.location.pathname + url;\n    }\n\n    const context = this.createContext();\n    return this.callback(context)\n      .then(() => respond(context))\n      .catch(err => this.emit('error', err));\n  }\n}\n"]}