{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,MAAM,SAAS,gCAAW,MAAX,CAAf;;AAEe,MAAM,WAAN,8BAAuC;;AAIlD,kBAAc;AACV;AACA,aAAK,UAAL,GAAkB,EAAlB;AACA,aAAK,OAAL,GAAe,OAAO,MAAP,mBAAf;AACH;;AAED,QAAI,WAAJ,GAA0B;AACtB,eAAO,KAAK,GAAZ;AACH;;AAED,QAAI,EAAJ,EAAkB;AACd,eAAO,KAAP,CAAa,KAAb,EAAoB,EAAE,MAAM,GAAG,IAAH,IAAW,GAAnB,EAApB;AACA,aAAK,UAAL,CAAgB,IAAhB,CAAqB,EAArB;AACA,eAAO,IAAP;AACH;;AAED,YAAQ,CAAR,EAAgB;AACZ,eAAO,KAAP,CAAa,CAAb;AACH;;AAED,QAAI,GAAJ,EAAgB;AACZ,YAAI,CAAC,KAAK,SAAL,CAAe,OAAf,EAAwB,MAA7B,EAAqC;AACjC,iBAAK,EAAL,CAAQ,OAAR,EAAiB,KAAK,OAAtB;AACH;;AAED,aAAK,QAAL,GAAgB,uBAAQ,KAAK,UAAb,CAAhB;;AAEA,YAAI,GAAJ,EAAS;AACL,iBAAK,IAAL,CAAU,GAAV;AACH;AACJ;;AAED,SAAK,GAAL,EAAkB;AACd,eAAO,KAAP,CAAa,MAAb,EAAqB,EAAE,QAAF,EAArB;;AAEA,YAAI,IAAI,UAAJ,CAAe,GAAf,CAAJ,EAAyB;AACrB,kBAAM,OAAO,QAAP,CAAgB,QAAhB,GAA2B,GAAjC;AACH;;AAED,cAAM,UAAU,OAAO,MAAP,CAAc,KAAK,OAAnB,CAAhB;AACA,gBAAQ,IAAR,GAAe,GAAf;AACA,aAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB,EACK,IADL,CACU,MAAM,QAAQ,IAAR,CAAa,OAAb,CADhB,EAEK,KAFL,CAEY,GAAD,IAAS,KAAK,IAAL,CAAU,OAAV,EAAmB,GAAnB,CAFpB;AAGH;AAhDiD;;kBAAjC,W;AAmDrB,SAAS,OAAT,GAAmB;;AAEf,QAAI,KAAK,OAAL,KAAiB,KAArB,EAA4B;AACxB;AACH;;AAED,QAAI,CAAC,KAAK,QAAV,EAAoB;;AAEpB,QAAI,OAAO,KAAK,IAAhB;;;AAGA,QAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC1B,iBAAS,IAAT,CAAc,SAAd,GAA0B,IAA1B;AACA;AACH;;AAED,QAAI,KAAK,QAAT,EAAmB;AACf,iBAAS,IAAT,CAAc,SAAd,GAA0B,EAA1B;AACA,iBAAS,IAAT,CAAc,WAAd,CAA0B,IAA1B;AACH;;AAED,UAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACH","file":"index.js","sourcesContent":["import Logger from 'nightingale-logger';\nimport { EventEmitter } from 'events';\nimport compose from './compose';\nimport context from './context';\n\nconst logger = new Logger('ibex');\n\nexport default class Application extends EventEmitter {\n    middleware: Array<Function>;\n    context: Object;\n\n    constructor() {\n        super();\n        this.middleware = [];\n        this.context = Object.create(context);\n    }\n\n    get environment(): string {\n        return this.env;\n    }\n\n    use(fn: Function) {\n        logger.debug('use', { name: fn.name || '-' });\n        this.middleware.push(fn);\n        return this;\n    }\n\n    onerror(e: any) {\n        logger.error(e);\n    }\n\n    run(url: mixed) {\n        if (!this.listeners('error').length) {\n            this.on('error', this.onerror);\n        }\n\n        this.callback = compose(this.middleware);\n\n        if (url) {\n            this.load(url);\n        }\n    }\n\n    load(url: string) {\n        logger.debug('load', { url });\n\n        if (url.startsWith('?')) {\n            url = window.location.pathname + url;\n        }\n\n        const context = Object.create(this.context);\n        context.path = url;\n        this.callback.call(context)\n            .then(() => respond.call(context))\n            .catch((err) => this.emit('error', err));\n    }\n}\n\nfunction respond() {\n    // allow bypassing\n    if (this.respond === false) {\n        return;\n    }\n\n    if (!this.writable) return;\n\n    let body = this.body;\n    // let code = this.status;\n\n    if (typeof body === 'string') {\n        document.body.innerHTML = body;\n        return;\n    }\n\n    if (body.nodeType) {\n        document.body.innerHTML = '';\n        document.body.appendChild(body);\n    }\n\n    throw new Error('Invalid body result');\n}\n"]}