{"version":3,"sources":["../src/index.js"],"names":["Logger","EventEmitter","compose","context","request","response","logger","Application","constructor","middleware","Object","create","app","state","environment","env","use","fn","debug","name","push","onerror","e","error","run","url","listeners","length","on","callback","load","createContext","startsWith","window","location","pathname","then","respond","catch","err","emit","ctx","body","document","innerHTML","nodeType","appendChild","Error"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint class-methods-use-this: 'off' */\n/* global window, document */\n\nimport Logger from 'nightingale-logger';\nimport { EventEmitter } from 'events';\nimport compose from './compose';\nimport context from './context';\nimport request from './request';\nimport response from './response';\n\nconst logger = new Logger('ibex');\n\nexport default class Application extends EventEmitter {\n  middleware: Array<Function>;\n  context: Object;\n\n  constructor() {\n    super();\n    this.middleware = [];\n    this.context = Object.create(context);\n    this.context.app = this;\n    this.context.state = {};\n  }\n\n  get environment(): string {\n    return this.env;\n  }\n\n  use(fn: Function) {\n    logger.debug('use', { name: fn.name || '-' });\n    this.middleware.push(fn);\n    return this;\n  }\n\n  onerror(e: any) {\n    logger.error(e);\n  }\n\n  run(url: mixed) {\n    if (!this.listeners('error').length) {\n      this.on('error', this.onerror);\n    }\n\n    this.callback = compose(this.middleware);\n\n    if (url) {\n      this.load(url);\n    }\n  }\n\n  createContext() {\n    const context = Object.create(this.context);\n    context.request = Object.create(request);\n    context.response = Object.create(response);\n    context.request.app = context.response.app = this;\n    return context;\n  }\n\n  load(url: string) {\n    logger.debug('load', { url });\n\n    if (url.startsWith('?')) {\n      url = window.location.pathname + url;\n    }\n\n    const context = this.createContext();\n    return this.callback(context)\n      .then(() => respond(context))\n      .catch(err => this.emit('error', err));\n  }\n}\n\nfunction respond(ctx) {\n  // allow bypassing\n  if (ctx.respond === false) {\n    return;\n  }\n\n  let body = ctx.body;\n  if (body == null) return;\n\n  // const code = ctx.status;\n\n  if (typeof body === 'string') {\n    document.body.innerHTML = body;\n    return;\n  }\n\n  if (body.nodeType) {\n    document.body.innerHTML = '';\n    document.body.appendChild(body);\n  }\n\n  throw new Error('Invalid body result');\n}\n"]}