{"version":3,"file":"index-node10.cjs.js","sources":["../src/load.ts","../src/index.ts"],"sourcesContent":["import IntlMessageFormat from 'intl-messageformat';\n\nexport type Translations = ReadonlyMap<string, IntlMessageFormat>;\n\nexport default function load(\n  translations: Map<string, any>,\n  language: string,\n): Translations {\n  const result = new Map();\n\n  (function loadMap(map, prefix) {\n    map.forEach((value, key) => {\n      if (typeof value === 'object') {\n        return loadMap(value, `${prefix}${key}.`);\n      }\n\n      result.set(`${prefix}${key}`, new IntlMessageFormat(value, language));\n    });\n  })(translations, '');\n\n  return result;\n}\n","import Logger from 'nightingale-logger';\nimport { NodeApplicationInCreation, Context } from 'alp-types';\nimport load from './load';\n\nconst logger = new Logger('alp:translate');\n\ninterface Args {\n  [key: string]: any;\n}\n\ndeclare module 'alp-types' {\n  interface Context {\n    t: (id: string, args: Args) => string;\n  }\n}\n\nexport default function alpTranslate(dirname: string) {\n  dirname = dirname.replace(/\\/*$/, '/');\n  return (app: NodeApplicationInCreation) => {\n    const appTranslations = new Map();\n\n    Object.assign(app.context, {\n      t(this: Context, id: string, args: Args): string {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        const msg = appTranslations.get(this.language).get(id);\n        if (!msg) {\n          logger.warn('invalid msg', { language: this.language, id });\n          return id;\n        }\n\n        return msg.format(args);\n      },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    app.config.get('availableLanguages').forEach((language: string) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n      const translations = app.config.loadConfigSync(dirname + language);\n      appTranslations.set(language, load(translations, language));\n    });\n\n    return appTranslations;\n  };\n}\n"],"names":["load","translations","language","result","Map","loadMap","map","prefix","forEach","value","key","set","IntlMessageFormat","logger","Logger","alpTranslate","dirname","replace","app","appTranslations","Object","assign","context","t","id","args","msg","get","warn","format","config","loadConfigSync"],"mappings":";;;;;;;;;AAIe,SAASA,IAAT,CACbC,YADa,EAEbC,QAFa,EAGC;AACd,QAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;;AAEA,GAAC,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,MAAtB,EAA8B;AAC7BD,IAAAA,GAAG,CAACE,OAAJ,CAAY,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC1B,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAOJ,OAAO,CAACI,KAAD,EAAS,GAAEF,MAAO,GAAEG,GAAI,GAAxB,CAAd;AACD;;AAEDP,MAAAA,MAAM,CAACQ,GAAP,CAAY,GAAEJ,MAAO,GAAEG,GAAI,EAA3B,EAA8B,IAAIE,iBAAJ,CAAsBH,KAAtB,EAA6BP,QAA7B,CAA9B;AACD,KAND;AAOD,GARD,EAQGD,YARH,EAQiB,EARjB;;AAUA,SAAOE,MAAP;AACD;;ACjBD,MAAMU,MAAM,GAAG,IAAIC,MAAJ,CAAW,eAAX,CAAf;AAYA,AAAe,SAASC,YAAT,CAAsBC,OAAtB,EAAuC;AACpDA,EAAAA,OAAO,GAAGA,OAAO,CAACC,OAAR,CAAgB,MAAhB,EAAwB,GAAxB,CAAV;AACA,SAAQC,GAAD,IAAoC;AACzC,UAAMC,eAAe,GAAG,IAAIf,GAAJ,EAAxB;AAEAgB,IAAAA,MAAM,CAACC,MAAP,CAAcH,GAAG,CAACI,OAAlB,EAA2B;AACzBC,MAAAA,CAAC,CAAgBC,EAAhB,EAA4BC,IAA5B,EAAgD;AAC/C;AACA;AACA,cAAMC,GAAG,GAAGP,eAAe,CAACQ,GAAhB,CAAoB,KAAKzB,QAAzB,EAAmCyB,GAAnC,CAAuCH,EAAvC,CAAZ;;AACA,YAAI,CAACE,GAAL,EAAU;AACRb,UAAAA,MAAM,CAACe,IAAP,CAAY,aAAZ,EAA2B;AAAE1B,YAAAA,QAAQ,EAAE,KAAKA,QAAjB;AAA2BsB,YAAAA;AAA3B,WAA3B;AACA,iBAAOA,EAAP;AACD;;AAED,eAAOE,GAAG,CAACG,MAAJ,CAAWJ,IAAX,CAAP;AACD;;AAXwB,KAA3B,EAHyC;AAkBzC;;AACAP,IAAAA,GAAG,CAACY,MAAJ,CAAWH,GAAX,CAAe,oBAAf,EAAqCnB,OAArC,CAA8CN,QAAD,IAAsB;AACjE;AACA;AACA,YAAMD,YAAY,GAAGiB,GAAG,CAACY,MAAJ,CAAWC,cAAX,CAA0Bf,OAAO,GAAGd,QAApC,CAArB;AACAiB,MAAAA,eAAe,CAACR,GAAhB,CAAoBT,QAApB,EAA8BF,IAAI,CAACC,YAAD,EAAeC,QAAf,CAAlC;AACD,KALD;AAOA,WAAOiB,eAAP;AACD,GA3BD;AA4BD;;;;"}