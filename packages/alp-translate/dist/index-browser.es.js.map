{"version":3,"file":"index-browser.es.js","sources":["../src/load.ts","../src/browser.ts"],"sourcesContent":["import IntlMessageFormatDefault from 'intl-messageformat';\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst IntlMessageFormat: typeof IntlMessageFormatDefault =\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  (IntlMessageFormatDefault as any).default || IntlMessageFormatDefault;\n\nexport type Translations = ReadonlyMap<string, IntlMessageFormatDefault>;\n\nexport default function load(\n  translations: ReadonlyMap<string, unknown>,\n  language: string,\n): Translations {\n  const result = new Map();\n\n  (function loadMap(map, prefix) {\n    map.forEach((value: any, key) => {\n      if (typeof value === 'object') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        loadMap(value, `${prefix}${key}.`);\n        return;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      result.set(`${prefix}${key}`, new IntlMessageFormat(value, language));\n    });\n  })(translations, '');\n\n  return result;\n}\n","import type { BrowserApplicationInCreation, Context } from 'alp-types';\nimport load from './load';\n\ntype Args = Record<string, any>;\n\ndeclare module 'alp-types' {\n  interface BaseContext {\n    language: string;\n    t: (id: string, args: Args) => string;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-shadow,  @typescript-eslint/no-empty-interface\n  interface Context {}\n}\n\nexport default function alpTranslate(\n  dirname: string,\n): (app: BrowserApplicationInCreation) => Promise<void> {\n  dirname = dirname.replace(/\\/*$/, '/');\n  return async (app: BrowserApplicationInCreation): Promise<void> => {\n    const language = app.context.language;\n\n    const map = await app.loadConfig(dirname + language);\n    const translations = load(map, language);\n\n    Object.assign(app.context, {\n      t(this: Context, key: string, args?: Record<string, any>): string {\n        const msg = translations.get(key);\n        if (!msg) return key;\n        return msg.format(args) as string;\n      },\n    });\n  };\n}\n"],"names":["IntlMessageFormat","IntlMessageFormatDefault","default","load","translations","language","result","Map","loadMap","map","prefix","forEach","value","key","set","alpTranslate","dirname","replace","app","context","loadConfig","Object","assign","t","args","msg","get","format"],"mappings":";;AAEA;AACA,MAAMA,iBAAkD;AACtD;AACCC,wBAAwB,CAASC,OAAO,IAAID,wBAAwB,CAAA;AAIxD,SAASE,IAAIA,CAC1BC,YAA0C,EAC1CC,QAAgB,EACF;AACd,EAAA,MAAMC,MAAM,GAAG,IAAIC,GAAG,EAAE,CAAA;AAExB,EAAA,CAAC,SAASC,OAAOA,CAACC,GAAG,EAAEC,MAAM,EAAE;AAC7BD,IAAAA,GAAG,CAACE,OAAO,CAAC,CAACC,KAAU,EAAEC,GAAG,KAAK;AAC/B,MAAA,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;AAC7B;QACAJ,OAAO,CAACI,KAAK,EAAG,CAAA,EAAEF,MAAO,CAAEG,EAAAA,GAAI,GAAE,CAAC,CAAA;AAClC,QAAA,OAAA;AACF,OAAA;;AAEA;AACAP,MAAAA,MAAM,CAACQ,GAAG,CAAE,CAAEJ,EAAAA,MAAO,GAAEG,GAAI,CAAA,CAAC,EAAE,IAAIb,iBAAiB,CAACY,KAAK,EAAEP,QAAQ,CAAC,CAAC,CAAA;AACvE,KAAC,CAAC,CAAA;AACJ,GAAC,EAAED,YAAY,EAAE,EAAE,CAAC,CAAA;AAEpB,EAAA,OAAOE,MAAM,CAAA;AACf;;ACfe,SAASS,YAAYA,CAClCC,OAAe,EACuC;EACtDA,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;EACtC,OAAO,MAAOC,GAAiC,IAAoB;AACjE,IAAA,MAAMb,QAAQ,GAAGa,GAAG,CAACC,OAAO,CAACd,QAAQ,CAAA;IAErC,MAAMI,GAAG,GAAG,MAAMS,GAAG,CAACE,UAAU,CAACJ,OAAO,GAAGX,QAAQ,CAAC,CAAA;AACpD,IAAA,MAAMD,YAAY,GAAGD,IAAI,CAACM,GAAG,EAAEJ,QAAQ,CAAC,CAAA;AAExCgB,IAAAA,MAAM,CAACC,MAAM,CAACJ,GAAG,CAACC,OAAO,EAAE;AACzBI,MAAAA,CAACA,CAAgBV,GAAW,EAAEW,IAA0B,EAAU;AAChE,QAAA,MAAMC,GAAG,GAAGrB,YAAY,CAACsB,GAAG,CAACb,GAAG,CAAC,CAAA;AACjC,QAAA,IAAI,CAACY,GAAG,EAAE,OAAOZ,GAAG,CAAA;AACpB,QAAA,OAAOY,GAAG,CAACE,MAAM,CAACH,IAAI,CAAC,CAAA;AACzB,OAAA;AACF,KAAC,CAAC,CAAA;GACH,CAAA;AACH;;;;"}