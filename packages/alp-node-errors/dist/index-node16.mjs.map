{"version":3,"file":"index-node16.mjs","sources":["../src/index.ts"],"sourcesContent":["import { STATUS_CODES } from 'http';\nimport type { Context, HtmlError } from 'alp-types';\nimport ErrorHtmlRenderer from 'error-html';\nimport { Logger } from 'nightingale-logger';\n\nconst logger = new Logger('alp:errors');\nconst errorHtmlRenderer = new ErrorHtmlRenderer({\n  appPath: `${process.cwd()}/`,\n});\n\nexport default async function alpNodeErrors(\n  ctx: Context,\n  next: () => void | Promise<void>,\n): Promise<void> {\n  try {\n    await next();\n  } catch (err: unknown) {\n    // eslint-disable-next-line no-ex-assign\n    if (!err) err = new Error('Unknown error');\n    // eslint-disable-next-line no-ex-assign\n    if (typeof err === 'string') err = new Error(err);\n\n    ctx.status = (err as HtmlError).status || 500;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    logger.error(err as any);\n\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (ctx.request.accepts('html', 'text', 'json')) {\n      case 'text':\n        ctx.type = 'text/plain';\n        if (\n          process.env.NODE_ENV !== 'production' ||\n          (err as HtmlError).expose\n        ) {\n          ctx.body = (err as Error).message;\n        } else {\n          throw err;\n        }\n\n        break;\n\n      case 'json':\n        ctx.type = 'application/json';\n        if (\n          process.env.NODE_ENV !== 'production' ||\n          (err as HtmlError).expose\n        ) {\n          ctx.body = { error: (err as Error).message };\n        } else {\n          ctx.body = { error: STATUS_CODES[ctx.status] };\n        }\n\n        break;\n\n      case 'html':\n        ctx.type = 'text/html';\n        if (process.env.NODE_ENV !== 'production') {\n          ctx.body = errorHtmlRenderer.render(err as Error);\n        } else if ((err as HtmlError).expose) {\n          ctx.body = (err as Error).message;\n        } else {\n          throw err;\n        }\n\n        break;\n    }\n  }\n}\n"],"names":["logger","Logger","errorHtmlRenderer","ErrorHtmlRenderer","appPath","process","cwd","alpNodeErrors","ctx","next","err","Error","status","error","request","accepts","type","env","NODE_ENV","expose","body","message","STATUS_CODES","render"],"mappings":";;;;AAKA,MAAMA,MAAM,GAAG,IAAIC,MAAM,CAAC,YAAY,CAAC,CAAA;AACvC,MAAMC,iBAAiB,GAAG,IAAIC,iBAAiB,CAAC;AAC9CC,EAAAA,OAAO,EAAG,CAAA,EAAEC,OAAO,CAACC,GAAG,EAAG,CAAA,CAAA,CAAA;AAC5B,CAAC,CAAC,CAAA;AAEa,eAAeC,aAAa,CACzCC,GAAY,EACZC,IAAgC,EACjB;EACf,IAAI;AACF,IAAA,MAAMA,IAAI,EAAE,CAAA;GACb,CAAC,OAAOC,GAAY,EAAE;AACrB;IACA,IAAI,CAACA,GAAG,EAAEA,GAAG,GAAG,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAA;AAC1C;IACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAEA,GAAG,GAAG,IAAIC,KAAK,CAACD,GAAG,CAAC,CAAA;AAEjDF,IAAAA,GAAG,CAACI,MAAM,GAAIF,GAAG,CAAeE,MAAM,IAAI,GAAG,CAAA;AAC7C;AACAZ,IAAAA,MAAM,CAACa,KAAK,CAACH,GAAG,CAAQ,CAAA;;AAExB;IACA,QAAQF,GAAG,CAACM,OAAO,CAACC,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;AACjD,MAAA,KAAK,MAAM;QACTP,GAAG,CAACQ,IAAI,GAAG,YAAY,CAAA;QACvB,IACEX,OAAO,CAACY,GAAG,CAACC,QAAQ,KAAK,YAAY,IACpCR,GAAG,CAAeS,MAAM,EACzB;AACAX,UAAAA,GAAG,CAACY,IAAI,GAAIV,GAAG,CAAWW,OAAO,CAAA;AACnC,SAAC,MAAM;AACL,UAAA,MAAMX,GAAG,CAAA;AACX,SAAA;AAEA,QAAA,MAAA;AAEF,MAAA,KAAK,MAAM;QACTF,GAAG,CAACQ,IAAI,GAAG,kBAAkB,CAAA;QAC7B,IACEX,OAAO,CAACY,GAAG,CAACC,QAAQ,KAAK,YAAY,IACpCR,GAAG,CAAeS,MAAM,EACzB;UACAX,GAAG,CAACY,IAAI,GAAG;YAAEP,KAAK,EAAGH,GAAG,CAAWW,OAAAA;WAAS,CAAA;AAC9C,SAAC,MAAM;UACLb,GAAG,CAACY,IAAI,GAAG;AAAEP,YAAAA,KAAK,EAAES,YAAY,CAACd,GAAG,CAACI,MAAM,CAAA;WAAG,CAAA;AAChD,SAAA;AAEA,QAAA,MAAA;AAEF,MAAA,KAAK,MAAM;QACTJ,GAAG,CAACQ,IAAI,GAAG,WAAW,CAAA;AACtB,QAAA,IAAIX,OAAO,CAACY,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACzCV,GAAG,CAACY,IAAI,GAAGlB,iBAAiB,CAACqB,MAAM,CAACb,GAAG,CAAU,CAAA;AACnD,SAAC,MAAM,IAAKA,GAAG,CAAeS,MAAM,EAAE;AACpCX,UAAAA,GAAG,CAACY,IAAI,GAAIV,GAAG,CAAWW,OAAO,CAAA;AACnC,SAAC,MAAM;AACL,UAAA,MAAMX,GAAG,CAAA;AACX,SAAA;AAEA,QAAA,MAAA;AAAM,KAAA;AAEZ,GAAA;AACF;;;;"}