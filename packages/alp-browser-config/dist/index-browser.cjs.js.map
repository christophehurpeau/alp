{"version":3,"file":"index-browser.cjs.js","sources":["../src/browserStoredConfig.ts","../src/index.ts"],"sourcesContent":["import deepFreeze from 'deep-freeze-es6';\nimport parseJSON from 'parse-json-object-as-map';\nimport stringify from 'stringify-json';\n\nconst LOCAL_STORAGE_NAME = 'alp-browser-config';\n\nconst map: Map<string, unknown> = (() => {\n  const config = localStorage.getItem(LOCAL_STORAGE_NAME);\n  if (config === null) {\n    return new Map<string, unknown>();\n  }\n\n  return parseJSON(config) as Map<string, unknown>;\n})();\n\nmap.forEach((value: unknown) => deepFreeze(value));\n\nexport function getVersion(): string | undefined {\n  return map.get('version') as string;\n}\n\nexport function has(key: string): boolean {\n  return map.has(key);\n}\n\nexport function get<T = unknown>(key: string): T {\n  return map.get(key) as T;\n}\n\nexport function save(): void {\n  localStorage.setItem(LOCAL_STORAGE_NAME, stringify(map));\n}\n\nexport function set(key: string, value: unknown): void {\n  map.set(key, value);\n  save();\n}\n\nexport function clear(version: string): void {\n  map.clear();\n  map.set('version', version);\n  save();\n}\n","import { POB_ENV } from 'pob-babel';\nimport type { BrowserApplicationInCreation, Config } from 'alp-types';\nimport deepFreeze from 'deep-freeze-es6';\nimport parseJSON from 'parse-json-object-as-map';\nimport * as storedConfig from './browserStoredConfig';\n\ntype RawConfig = Map<string, unknown>;\n\nconst ExcludesFalsy = (Boolean as unknown) as <T>(\n  x: T | boolean | null | undefined,\n) => x is T;\n\nfunction fetchConfig(path: string): Promise<RawConfig> {\n  return fetch(`${path}.json`)\n    .then((res) => res.text())\n    .then((text) =>\n      text.startsWith('{')\n        ? (parseJSON(text) as RawConfig)\n        : new Map<string, unknown>(),\n    );\n}\n\nexport function getConfig(path: string): Promise<RawConfig> {\n  if (storedConfig.has(path)) {\n    return Promise.resolve(storedConfig.get(path));\n  }\n\n  return fetchConfig(path).then((result: RawConfig) => {\n    deepFreeze(result);\n    storedConfig.set(path, result);\n    return result;\n  });\n}\n\nexport function existsConfig(path: string): Promise<boolean> | boolean {\n  if (storedConfig.has(path)) {\n    return storedConfig.get(path) !== false;\n  }\n  return fetchConfig(path).then((result) => result !== undefined);\n}\n\nconst getOrFetchAppConfig = function (\n  version: string,\n  environment: string,\n  configPath: string,\n): Promise<RawConfig> {\n  if (storedConfig.getVersion() === version && storedConfig.has('_appConfig')) {\n    return Promise.resolve(storedConfig.get('_appConfig'));\n  }\n\n  storedConfig.clear(version);\n\n  return Promise.all([\n    fetchConfig(`${configPath}/common`),\n    environment ? fetchConfig(`${configPath}/${environment}`) : undefined,\n    fetchConfig(`${configPath}/local`),\n  ] as (Promise<RawConfig | undefined> | undefined)[]).then(\n    ([config, ...others]: [...(RawConfig | undefined)[]]) => {\n      if (!config) config = new Map();\n      config.set('version', version);\n\n      others.filter(ExcludesFalsy).forEach((jsonConfig) => {\n        jsonConfig.forEach((value: any, key: string) =>\n          (config as RawConfig).set(key, value),\n        );\n      });\n\n      storedConfig.set('_appConfig', config);\n      return deepFreeze(config);\n    },\n  );\n};\n\nexport default async function alpConfig(\n  app: BrowserApplicationInCreation,\n  configPath: string,\n): Promise<Config> {\n  const version = app.appVersion;\n\n  if (!version) {\n    throw new Error('Missing appVersion');\n  }\n\n  const config: Config = (await getOrFetchAppConfig(\n    version,\n    POB_ENV,\n    configPath,\n  )) as Config;\n  app.config = config;\n  app.context.config = config;\n  return config;\n}\n"],"names":["LOCAL_STORAGE_NAME","map","config","localStorage","getItem","Map","parseJSON","forEach","value","deepFreeze","getVersion","get","has","key","save","setItem","stringify","set","clear","version","ExcludesFalsy","Boolean","fetchConfig","path","fetch","then","res","text","startsWith","getConfig","storedConfig","Promise","resolve","result","existsConfig","undefined","getOrFetchAppConfig","environment","configPath","all","others","filter","jsonConfig","alpConfig","app","appVersion","Error","context"],"mappings":";;;;;;;;;;;;;;;;;;AAIA,MAAMA,kBAAkB,GAAG,oBAA3B;;AAEA,MAAMC,GAAyB,GAAG,CAAC,MAAM;AACvC,QAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,kBAArB,CAAf;;AACA,MAAIE,MAAM,KAAK,IAAf,EAAqB;AACnB,WAAO,IAAIG,GAAJ,EAAP;AACD;;AAED,SAAOC,kBAAS,CAACJ,MAAD,CAAhB;AACD,CAPiC,GAAlC;;AASAD,GAAG,CAACM,OAAJ,CAAaC,KAAD,IAAoBC,mBAAU,CAACD,KAAD,CAA1C;AAEO,SAASE,UAAT,GAA0C;AAC/C,SAAOT,GAAG,CAACU,GAAJ,CAAQ,SAAR,CAAP;AACD;AAEM,SAASC,GAAT,CAAaC,GAAb,EAAmC;AACxC,SAAOZ,GAAG,CAACW,GAAJ,CAAQC,GAAR,CAAP;AACD;AAEM,SAASF,GAAT,CAA0BE,GAA1B,EAA0C;AAC/C,SAAOZ,GAAG,CAACU,GAAJ,CAAQE,GAAR,CAAP;AACD;AAEM,SAASC,IAAT,GAAsB;AAC3BX,EAAAA,YAAY,CAACY,OAAb,CAAqBf,kBAArB,EAAyCgB,kBAAS,CAACf,GAAD,CAAlD;AACD;AAEM,SAASgB,GAAT,CAAaJ,GAAb,EAA0BL,KAA1B,EAAgD;AACrDP,EAAAA,GAAG,CAACgB,GAAJ,CAAQJ,GAAR,EAAaL,KAAb;AACAM,EAAAA,IAAI;AACL;AAEM,SAASI,KAAT,CAAeC,OAAf,EAAsC;AAC3ClB,EAAAA,GAAG,CAACiB,KAAJ;AACAjB,EAAAA,GAAG,CAACgB,GAAJ,CAAQ,SAAR,EAAmBE,OAAnB;AACAL,EAAAA,IAAI;AACL;;AClCD,MAAMM,aAAa,GAAIC,OAAvB;;AAIA,SAASC,WAAT,CAAqBC,IAArB,EAAuD;AACrD,SAAOC,KAAK,CAAE,GAAED,IAAK,OAAT,CAAL,CACJE,IADI,CACEC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADV,EAEJF,IAFI,CAEEE,IAAD,IACJA,IAAI,CAACC,UAAL,CAAgB,GAAhB,IACKtB,kBAAS,CAACqB,IAAD,CADd,GAEI,IAAItB,GAAJ,EALD,CAAP;AAOD;;AAEM,SAASwB,SAAT,CAAmBN,IAAnB,EAAqD;AAC1D,MAAIO,GAAA,CAAiBP,IAAjB,CAAJ,EAA4B;AAC1B,WAAOQ,OAAO,CAACC,OAAR,CAAgBF,GAAA,CAAiBP,IAAjB,CAAhB,CAAP;AACD;;AAED,SAAOD,WAAW,CAACC,IAAD,CAAX,CAAkBE,IAAlB,CAAwBQ,MAAD,IAAuB;AACnDxB,IAAAA,mBAAU,CAACwB,MAAD,CAAV;AACAH,IAAAA,GAAA,CAAiBP,IAAjB,EAAuBU,MAAvB;AACA,WAAOA,MAAP;AACD,GAJM,CAAP;AAKD;AAEM,SAASC,YAAT,CAAsBX,IAAtB,EAAgE;AACrE,MAAIO,GAAA,CAAiBP,IAAjB,CAAJ,EAA4B;AAC1B,WAAOO,GAAA,CAAiBP,IAAjB,MAA2B,KAAlC;AACD;;AACD,SAAOD,WAAW,CAACC,IAAD,CAAX,CAAkBE,IAAlB,CAAwBQ,MAAD,IAAYA,MAAM,KAAKE,SAA9C,CAAP;AACD;;AAED,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC1BjB,OAD0B,EAE1BkB,WAF0B,EAG1BC,UAH0B,EAIN;AACpB,MAAIR,UAAA,OAA8BX,OAA9B,IAAyCW,GAAA,CAAiB,YAAjB,CAA7C,EAA6E;AAC3E,WAAOC,OAAO,CAACC,OAAR,CAAgBF,GAAA,CAAiB,YAAjB,CAAhB,CAAP;AACD;;AAEDA,EAAAA,KAAA,CAAmBX,OAAnB;AAEA,SAAOY,OAAO,CAACQ,GAAR,CAAY,CACjBjB,WAAW,CAAE,GAAEgB,UAAW,SAAf,CADM,EAEjBD,WAAW,GAAGf,WAAW,CAAE,GAAEgB,UAAW,IAAGD,WAAY,EAA9B,CAAd,GAAiDF,SAF3C,EAGjBb,WAAW,CAAE,GAAEgB,UAAW,QAAf,CAHM,CAAZ,EAI8Cb,IAJ9C,CAKL,CAAC,CAACvB,MAAD,EAAS,GAAGsC,MAAZ,CAAD,KAAyD;AACvD,QAAI,CAACtC,MAAL,EAAaA,MAAM,GAAG,IAAIG,GAAJ,EAAT;AACbH,IAAAA,MAAM,CAACe,GAAP,CAAW,SAAX,EAAsBE,OAAtB;AAEAqB,IAAAA,MAAM,CAACC,MAAP,CAAcrB,aAAd,EAA6Bb,OAA7B,CAAsCmC,UAAD,IAAgB;AACnDA,MAAAA,UAAU,CAACnC,OAAX,CAAmB,CAACC,KAAD,EAAaK,GAAb,KAChBX,MAAD,CAAsBe,GAAtB,CAA0BJ,GAA1B,EAA+BL,KAA/B,CADF;AAGD,KAJD;AAMAsB,IAAAA,GAAA,CAAiB,YAAjB,EAA+B5B,MAA/B;AACA,WAAOO,mBAAU,CAACP,MAAD,CAAjB;AACD,GAjBI,CAAP;AAmBD,CA9BD;;SAgC8ByC,SAA9B;AAAA;AAAA;;;0FAAe,iBACbC,GADa,EAEbN,UAFa;AAAA;AAAA;AAAA;AAAA;AAIPnB,UAAAA,OAJO,GAIGyB,GAAG,CAACC,UAJP;;AAAA,cAMR1B,OANQ;AAAA;AAAA;AAAA;;AAAA,gBAOL,IAAI2B,KAAJ,CAAU,oBAAV,CAPK;;AAAA;AAAA;AAAA,iBAUiBV,mBAAmB,CAC/CjB,OAD+C,gBAG/CmB,UAH+C,CAVpC;;AAAA;AAUPpC,UAAAA,MAVO;AAeb0C,UAAAA,GAAG,CAAC1C,MAAJ,GAAaA,MAAb;AACA0C,UAAAA,GAAG,CAACG,OAAJ,CAAY7C,MAAZ,GAAqBA,MAArB;AAhBa,2CAiBNA,MAjBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;"}