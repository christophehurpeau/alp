{"version":3,"file":"index-node12-dev.cjs.js","sources":["../src/readRecursiveDirectory.ts","../src/Manager.ts","../src/index.ts"],"sourcesContent":["import type { Stats } from 'fs';\nimport { readdir, stat as fsStat } from 'fs/promises';\n\nexport interface CallbackParam {\n  filename: string;\n  basedir: string;\n  path: string;\n  stat: Stats;\n}\n\nexport default async function readRecursiveDirectory(\n  directory: string,\n  callback: (param: CallbackParam) => void | Promise<void>,\n): Promise<void> {\n  const files = await readdir(directory);\n\n  await Promise.all(\n    files.map(\n      async (file): Promise<void> => {\n        const path = `${directory}/${file}`;\n        const stat = await fsStat(path);\n\n        if (stat?.isDirectory()) {\n          await readRecursiveDirectory(path, callback);\n          return;\n        }\n        await callback({\n          filename: file,\n          basedir: directory,\n          path,\n          stat,\n        });\n      },\n    ),\n  );\n}\n","import type { MongoStore, MongoInsertType, MongoBaseModel } from 'liwi-mongo';\n\nexport interface Migration extends MongoBaseModel {\n  version: string;\n  fileName: string;\n}\n\nexport default class MigrationsManager {\n  store: MongoStore<Migration>;\n\n  constructor(store: MongoStore<Migration>) {\n    this.store = store;\n  }\n\n  findLastVersion(): Promise<string | undefined> {\n    return this.store.findOne({}, { created: -1 }).then((row) => row?.version);\n  }\n\n  addMigrationDone(migration: MongoInsertType<Migration>): Promise<Migration> {\n    return this.store.insertOne(migration);\n  }\n}\n","/* eslint-disable unicorn/no-process-exit */\nimport type { NodeApplication, NodeConfig } from 'alp-types';\nimport Logger from 'nightingale-logger';\nimport semver from 'semver';\nimport type MigrationsManager from './Manager';\nimport type { CallbackParam } from './readRecursiveDirectory';\nimport readRecursiveDirectory from './readRecursiveDirectory';\n\nconst logger = new Logger('alp:migrations');\n\nexport { default as MigrationsManager } from './Manager';\n\nexport interface Options {\n  app: NodeApplication;\n  migrationsManager: MigrationsManager;\n  config?: NodeConfig;\n  dirname?: string;\n}\n\nexport default async function migrate({\n  app,\n  migrationsManager,\n  config = app.config,\n  dirname = `${app.dirname}/migrations`,\n}: Options): Promise<void> {\n  const unhandledRejectionHandler = (reason: unknown): void => {\n    logger.error('unhandledRejection', { err: reason });\n    process.exit(1);\n  };\n  process.on('unhandledRejection', unhandledRejectionHandler);\n\n  const packageVersion = config.packageConfig.version as string;\n  const currentVersion = await migrationsManager.findLastVersion();\n\n  let migrations: { version: string; fileName: string }[] = [];\n\n  logger.info('migrate', { packageVersion, currentVersion });\n\n  await readRecursiveDirectory(dirname, (res: CallbackParam) => {\n    const fileName = res.path.slice(dirname.length + 1);\n\n    if (!fileName.endsWith('.js')) {\n      return;\n    }\n\n    const versionExecResult = /([\\d.]+)(_.*|\\.js)$/.exec(fileName);\n\n    if (!versionExecResult || !versionExecResult[1]) {\n      return;\n    }\n\n    const version: string = versionExecResult[1];\n\n    if (currentVersion && semver.lte(version, currentVersion)) return;\n\n    migrations.push({ version, fileName });\n  });\n\n  migrations = migrations.sort((a, b) =>\n    semver.gt(a.version, b.version) ? 1 : -1,\n  );\n\n  try {\n    for (const migration of migrations) {\n      logger.info(`Migration to ${migration.fileName}`);\n      try {\n        // eslint-disable-next-line import/no-dynamic-require, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-var-requires\n        await require(`${dirname}/${migration.fileName}`).default();\n      } catch (err) {\n        logger.error(`Migration to ${migration.version} Failed !`);\n        throw err;\n      }\n\n      logger.success(`Migration to ${migration.fileName} done !`);\n\n      // only add to db if migration version <= package version\n      if (semver.lte(migration.version, packageVersion)) {\n        await migrationsManager.addMigrationDone(migration);\n      }\n    }\n  } catch (err) {\n    logger.error(err);\n    process.exit(1);\n  }\n\n  process.removeListener('unhandledRejection', unhandledRejectionHandler);\n}\n"],"names":["readRecursiveDirectory","directory","callback","files","readdir","Promise","all","map","file","path","stat","fsStat","isDirectory","filename","basedir","MigrationsManager","constructor","store","findLastVersion","findOne","created","then","row","version","addMigrationDone","migration","insertOne","logger","Logger","migrate","app","migrationsManager","config","dirname","unhandledRejectionHandler","reason","error","err","process","exit","on","packageVersion","packageConfig","currentVersion","migrations","info","res","fileName","slice","length","endsWith","versionExecResult","exec","semver","lte","push","sort","a","b","gt","require","default","success","removeListener"],"mappings":"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"}