{"version":3,"file":"index-node14.mjs","sources":["../src/readRecursiveDirectory.ts","../src/Manager.ts","../src/index.ts"],"sourcesContent":["import type { Stats } from 'fs';\nimport { readdir, stat as fsStat } from 'fs/promises';\n\nexport interface CallbackParam {\n  filename: string;\n  basedir: string;\n  path: string;\n  stat: Stats;\n}\n\nexport default async function readRecursiveDirectory(\n  directory: string,\n  callback: (param: CallbackParam) => void | Promise<void>,\n): Promise<void> {\n  const files = await readdir(directory);\n\n  await Promise.all(\n    files.map(async (file): Promise<void> => {\n      const path = `${directory}/${file}`;\n      const stat = await fsStat(path);\n\n      if (stat?.isDirectory()) {\n        await readRecursiveDirectory(path, callback);\n        return;\n      }\n      await callback({\n        filename: file,\n        basedir: directory,\n        path,\n        stat,\n      });\n    }),\n  );\n}\n","import type { MongoStore, MongoInsertType, MongoBaseModel } from 'liwi-mongo';\n\nexport interface Migration extends MongoBaseModel {\n  version: string;\n  fileName: string;\n}\n\nexport default class MigrationsManager {\n  store: MongoStore<Migration>;\n\n  constructor(store: MongoStore<Migration>) {\n    this.store = store;\n  }\n\n  findLastVersion(): Promise<string | undefined> {\n    return this.store.findOne({}, { created: -1 }).then((row) => row?.version);\n  }\n\n  addMigrationDone(migration: MongoInsertType<Migration>): Promise<Migration> {\n    return this.store.insertOne(migration);\n  }\n}\n","/* eslint-disable unicorn/no-process-exit */\nimport type { NodeApplication, NodeConfig } from 'alp-types';\nimport { Logger } from 'nightingale-logger';\nimport semver from 'semver';\nimport type MigrationsManager from './Manager';\nimport type { CallbackParam } from './readRecursiveDirectory';\nimport readRecursiveDirectory from './readRecursiveDirectory';\n\nconst logger = new Logger('alp:migrations');\n\nexport { default as MigrationsManager } from './Manager';\n\nexport interface Options {\n  app: NodeApplication;\n  migrationsManager: MigrationsManager;\n  config?: NodeConfig;\n  dirname?: string;\n}\n\nexport default async function migrate({\n  app,\n  migrationsManager,\n  config = app.config,\n  dirname = `${app.dirname}/migrations`,\n}: Options): Promise<void> {\n  const unhandledRejectionHandler = (reason: unknown): void => {\n    logger.error('unhandledRejection', { err: reason });\n    process.exit(1);\n  };\n  process.on('unhandledRejection', unhandledRejectionHandler);\n\n  const packageVersion = config.packageConfig.version as string;\n  const currentVersion = await migrationsManager.findLastVersion();\n\n  let migrations: { version: string; fileName: string }[] = [];\n\n  logger.info('migrate', { packageVersion, currentVersion });\n\n  await readRecursiveDirectory(dirname, (res: CallbackParam) => {\n    const fileName = res.path.slice(dirname.length + 1);\n\n    if (!fileName.endsWith('.js')) {\n      return;\n    }\n\n    const versionExecResult = /([\\d.]+)(_.*|\\.js)$/.exec(fileName);\n\n    if (!versionExecResult || !versionExecResult[1]) {\n      return;\n    }\n\n    const version: string = versionExecResult[1];\n\n    if (currentVersion && semver.lte(version, currentVersion)) return;\n\n    migrations.push({ version, fileName });\n  });\n\n  migrations = migrations.sort((a, b) =>\n    semver.gt(a.version, b.version) ? 1 : -1,\n  );\n\n  try {\n    for (const migration of migrations) {\n      logger.info(`Migration to ${migration.fileName}`);\n      try {\n        const migrateFn: unknown = await import(\n          `${dirname}/${migration.fileName}`\n        );\n        await (migrateFn as () => Promise<void>)();\n      } catch (err) {\n        logger.error(`Migration to ${migration.version} Failed !`);\n        throw err;\n      }\n\n      logger.success(`Migration to ${migration.fileName} done !`);\n\n      // only add to db if migration version <= package version\n      if (semver.lte(migration.version, packageVersion)) {\n        await migrationsManager.addMigrationDone(migration);\n      }\n    }\n  } catch (err: any) {\n    logger.error(err as Error);\n    process.exit(1);\n  }\n\n  process.removeListener('unhandledRejection', unhandledRejectionHandler);\n}\n"],"names":["readRecursiveDirectory","directory","callback","files","readdir","Promise","all","map","file","path","stat","fsStat","isDirectory","filename","basedir","MigrationsManager","constructor","store","findLastVersion","findOne","created","then","row","version","addMigrationDone","migration","insertOne","logger","Logger","migrate","app","migrationsManager","config","dirname","unhandledRejectionHandler","reason","error","err","process","exit","on","packageVersion","packageConfig","currentVersion","migrations","info","res","fileName","slice","length","endsWith","versionExecResult","exec","semver","lte","push","sort","a","b","gt","migrateFn","success","removeListener"],"mappings":"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"}