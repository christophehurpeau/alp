{"version":3,"file":"index-node18.mjs","sources":["../src/readRecursiveDirectory.ts","../src/Manager.ts","../src/index.ts"],"sourcesContent":["import type { Stats } from 'node:fs';\nimport { readdir, stat as fsStat } from 'node:fs/promises';\n\nexport interface CallbackParam {\n  filename: string;\n  basedir: string;\n  path: string;\n  stat: Stats;\n}\n\nexport default async function readRecursiveDirectory(\n  directory: string,\n  callback: (param: CallbackParam) => Promise<void> | void,\n): Promise<void> {\n  const files = await readdir(directory);\n\n  await Promise.all(\n    files.map(async (file): Promise<void> => {\n      const path = `${directory}/${file}`;\n      const stat = await fsStat(path);\n\n      if (stat?.isDirectory()) {\n        await readRecursiveDirectory(path, callback);\n        return;\n      }\n      await callback({\n        filename: file,\n        basedir: directory,\n        path,\n        stat,\n      });\n    }),\n  );\n}\n","import type { MongoStore, MongoInsertType, MongoBaseModel } from 'liwi-mongo';\n\nexport interface Migration extends MongoBaseModel {\n  version: string;\n  fileName: string;\n}\n\nexport default class MigrationsManager {\n  store: MongoStore<Migration>;\n\n  constructor(store: MongoStore<Migration>) {\n    this.store = store;\n  }\n\n  findLastVersion(): Promise<string | undefined> {\n    return this.store.findOne({}, { created: -1 }).then((row) => row?.version);\n  }\n\n  addMigrationDone(migration: MongoInsertType<Migration>): Promise<Migration> {\n    return this.store.insertOne(migration);\n  }\n}\n","/* eslint-disable unicorn/no-process-exit */\nimport type AlpNodeApp from 'alp-node';\nimport { Logger } from 'nightingale-logger';\nimport semver from 'semver';\nimport type MigrationsManager from './Manager';\nimport type { CallbackParam } from './readRecursiveDirectory';\nimport readRecursiveDirectory from './readRecursiveDirectory';\n\nconst logger = new Logger('alp:migrations');\n\nexport { default as MigrationsManager } from './Manager';\n\nexport interface Options {\n  app: AlpNodeApp;\n  migrationsManager: MigrationsManager;\n  config?: AlpNodeApp['config'];\n  dirname?: string;\n}\n\nexport default async function migrate({\n  app,\n  migrationsManager,\n  config = app.config,\n  dirname = `${app.dirname}/migrations`,\n}: Options): Promise<void> {\n  const unhandledRejectionHandler = (reason: unknown): void => {\n    logger.error('unhandledRejection', { err: reason });\n    process.exit(1);\n  };\n  process.on('unhandledRejection', unhandledRejectionHandler);\n\n  const packageVersion = config.packageConfig.version as string;\n  const currentVersion = await migrationsManager.findLastVersion();\n\n  let migrations: { version: string; fileName: string }[] = [];\n\n  logger.info('migrate', { packageVersion, currentVersion });\n\n  await readRecursiveDirectory(dirname, (res: CallbackParam) => {\n    const fileName = res.path.slice(dirname.length + 1);\n\n    if (!fileName.endsWith('.js')) {\n      return;\n    }\n\n    const versionExecResult = /([\\d.]+)(_.*|\\.js)$/.exec(fileName);\n\n    if (!versionExecResult?.[1]) {\n      return;\n    }\n\n    const version: string = versionExecResult[1];\n\n    if (currentVersion && semver.lte(version, currentVersion)) return;\n\n    migrations.push({ version, fileName });\n  });\n\n  migrations = migrations.sort((a, b) =>\n    semver.gt(a.version, b.version) ? 1 : -1,\n  );\n\n  try {\n    for (const migration of migrations) {\n      logger.info(`Migration to ${migration.fileName}`);\n      try {\n        const migrateFn: unknown = await import(\n          `${dirname}/${migration.fileName}`\n        );\n        await (migrateFn as () => Promise<void>)();\n      } catch (error) {\n        logger.error(`Migration to ${migration.version} Failed !`);\n        throw error;\n      }\n\n      logger.success(`Migration to ${migration.fileName} done !`);\n\n      // only add to db if migration version <= package version\n      if (semver.lte(migration.version, packageVersion)) {\n        await migrationsManager.addMigrationDone(migration);\n      }\n    }\n  } catch (error: any) {\n    logger.error(error as Error);\n    process.exit(1);\n  }\n\n  process.removeListener('unhandledRejection', unhandledRejectionHandler);\n}\n"],"names":["readRecursiveDirectory","directory","callback","files","readdir","Promise","all","map","file","path","stat","fsStat","isDirectory","filename","basedir","MigrationsManager","constructor","store","findLastVersion","findOne","created","then","row","version","addMigrationDone","migration","insertOne","logger","Logger","migrate","app","migrationsManager","config","dirname","unhandledRejectionHandler","reason","error","err","process","exit","on","packageVersion","packageConfig","currentVersion","migrations","info","res","fileName","slice","length","endsWith","versionExecResult","exec","semver","lte","push","sort","a","b","gt","migrateFn","success","removeListener"],"mappings":"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"}