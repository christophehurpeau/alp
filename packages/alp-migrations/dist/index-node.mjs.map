{"version":3,"file":"index-node.mjs","sources":["../src/readRecursiveDirectory.ts","../src/Manager.ts","../src/index.ts"],"sourcesContent":["import type { Stats } from \"node:fs\";\nimport { stat as fsStat, readdir } from \"node:fs/promises\";\n\nexport interface CallbackParam {\n  filename: string;\n  basedir: string;\n  path: string;\n  stat: Stats;\n}\n\nexport default async function readRecursiveDirectory(\n  directory: string,\n  callback: (param: CallbackParam) => Promise<void> | void,\n): Promise<void> {\n  const files = await readdir(directory);\n\n  await Promise.all(\n    files.map(async (file): Promise<void> => {\n      const path = `${directory}/${file}`;\n      const stat = await fsStat(path);\n\n      if (stat.isDirectory()) {\n        await readRecursiveDirectory(path, callback);\n        return;\n      }\n      await callback({\n        filename: file,\n        basedir: directory,\n        path,\n        stat,\n      });\n    }),\n  );\n}\n","import type { MongoBaseModel, MongoInsertType, MongoStore } from \"liwi-mongo\";\n\nexport interface Migration extends MongoBaseModel {\n  version: string;\n  fileName: string;\n}\n\nexport default class MigrationsManager {\n  store: MongoStore<Migration>;\n\n  constructor(store: MongoStore<Migration>) {\n    this.store = store;\n  }\n\n  findLastVersion(): Promise<string | undefined> {\n    return this.store.findOne({}, { created: -1 }).then((row) => row?.version);\n  }\n\n  addMigrationDone(migration: MongoInsertType<Migration>): Promise<Migration> {\n    return this.store.insertOne(migration);\n  }\n}\n","/* eslint-disable unicorn/no-process-exit */\nimport type AlpNodeApp from \"alp-node\";\nimport { Logger } from \"nightingale-logger\";\nimport semver from \"semver\";\nimport type MigrationsManager from \"./Manager\";\nimport type { CallbackParam } from \"./readRecursiveDirectory\";\nimport readRecursiveDirectory from \"./readRecursiveDirectory\";\n\nconst logger = new Logger(\"alp:migrations\");\n\nexport { default as MigrationsManager } from \"./Manager\";\n\nexport interface Options {\n  app: AlpNodeApp;\n  migrationsManager: MigrationsManager;\n  config?: AlpNodeApp[\"config\"];\n  dirname?: string;\n}\n\nexport default async function migrate({\n  app,\n  migrationsManager,\n  config = app.config,\n  dirname = `${app.dirname}/migrations`,\n}: Options): Promise<void> {\n  const unhandledRejectionHandler = (reason: unknown): void => {\n    logger.error(\"unhandledRejection\", { err: reason });\n\n    process.exit(1);\n  };\n  process.on(\"unhandledRejection\", unhandledRejectionHandler);\n\n  const packageVersion = config.packageConfig.version as string;\n  const currentVersion = await migrationsManager.findLastVersion();\n\n  let migrations: { version: string; fileName: string }[] = [];\n\n  logger.info(\"migrate\", { packageVersion, currentVersion });\n\n  await readRecursiveDirectory(dirname, (res: CallbackParam) => {\n    const fileName = res.path.slice(dirname.length + 1);\n\n    if (!fileName.endsWith(\".js\")) {\n      return;\n    }\n\n    const versionExecResult = /([\\d.]+)(?:_.*|\\.js)$/.exec(fileName);\n\n    if (!versionExecResult?.[1]) {\n      return;\n    }\n\n    const version: string = versionExecResult[1];\n\n    if (currentVersion && semver.lte(version, currentVersion)) return;\n\n    migrations.push({ version, fileName });\n  });\n\n  migrations = migrations.sort((a, b) =>\n    semver.gt(a.version, b.version) ? 1 : -1,\n  );\n\n  try {\n    for (const migration of migrations) {\n      logger.info(`Migration to ${migration.fileName}`);\n      try {\n        const migrateFn: unknown = await import(\n          `${dirname}/${migration.fileName}`\n        );\n        await (migrateFn as () => Promise<void>)();\n      } catch (error) {\n        logger.error(`Migration to ${migration.version} Failed !`);\n        throw error;\n      }\n\n      logger.success(`Migration to ${migration.fileName} done !`);\n\n      // only add to db if migration version <= package version\n      if (semver.lte(migration.version, packageVersion)) {\n        await migrationsManager.addMigrationDone(migration);\n      }\n    }\n  } catch (error: any) {\n    logger.error(error as Error);\n    process.exit(1);\n  }\n\n  process.removeListener(\"unhandledRejection\", unhandledRejectionHandler);\n}\n"],"names":["stat","fsStat"],"mappings":"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"}