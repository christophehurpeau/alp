{"version":3,"sources":["../src/index.js"],"names":["logger","MigrationsManager","app","config","dirname","migrationsManager","unhandledRejectionHandler","err","error","process","exit","on","packageVersion","packageConfig","version","currentVersion","findLastVersion","migrations","info","res","fileName","path","substr","length","slice","exec","lte","push","sort","a","b","gt","migration","require","default","success","addMigrationDone","removeListener","migrate"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,MAAMA,SAAS,gCAAW,gBAAX,CAAf;;QAEOC,iB;;;+BAEQ,WAAuB,EAAEC,GAAF,EAAOC,MAAP,EAAeC,OAAf,EAAwBC,iBAAxB,EAAvB,EAAoE;AACjF,QAAI,CAACF,MAAL,EAAaA,SAASD,IAAIC,MAAb;AACb,QAAI,CAACC,OAAL,EAAcA,UAAW,GAAEF,IAAIE,OAAQ,aAAzB;;AAEd,UAAME,4BAA4B,UAACC,GAAD,EAAS;AACzCP,aAAOQ,KAAP,CAAa,oBAAb,EAAmC,EAAED,GAAF,EAAnC;AACAE,cAAQC,IAAR,CAAa,CAAb;AACD,KAHD;AAIAD,YAAQE,EAAR,CAAW,oBAAX,EAAiCL,yBAAjC;;AAEA,UAAMM,iBAAiBT,OAAOU,aAAP,CAAqBC,OAA5C;AACA,QAAIC,iBAAiB,MAAMV,kBAAkBW,eAAlB,EAA3B;AACA,QAAIC,eAAJ;;AAEAjB,WAAOkB,IAAP,CAAY,SAAZ,EAAuB,EAAEN,cAAF,EAAkBG,cAAlB,EAAvB;;AAEA,UAAM,sCAAuBX,OAAvB,EAAgC,UAACe,GAAD,EAAS;AAC7C,UAAIC,WAAWD,IAAIE,IAAJ,CAASC,MAAT,CAAgBlB,QAAQmB,MAAR,GAAiB,CAAjC,CAAf;;AAEA,UAAIH,SAASI,KAAT,CAAe,CAAC,CAAhB,MAAuB,KAA3B,EAAkC;AAChC;AACD;;AAED,UAAIV,UAAU,sBAAsBW,IAAtB,CAA2BL,QAA3B,CAAd;;AAEA,UAAI,CAACN,OAAD,IAAY,CAACA,QAAQ,CAAR,CAAjB,EAA6B;AAC3B;AACD;;AAEDA,gBAAUA,QAAQ,CAAR,CAAV;;AAEA,UAAIC,kBAAkB,iBAAOW,GAAP,CAAWZ,OAAX,EAAoBC,cAApB,CAAtB,EAA2D;;AAE3DE,iBAAWU,IAAX,CAAgB,EAAEb,OAAF,EAAWM,QAAX,EAAhB;AACD,KAlBK,CAAN;;AAoBAH,iBAAaA,WAAWW,IAAX,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAU,iBAAOC,EAAP,CAAUF,EAAEf,OAAZ,EAAqBgB,EAAEhB,OAAvB,CAAV;AAAA,KAAhB,CAAb;;AAEA,QAAI;AACF;AACA,WAAK,IAAIkB,SAAT,IAAsBf,UAAtB,EAAkC;AAChCjB,eAAOkB,IAAP,CAAa,gBAAec,UAAUZ,QAAS,EAA/C;AACA,YAAI;AACF;AACA,gBAAMa,QAAS,GAAE7B,OAAQ,IAAG4B,UAAUZ,QAAS,EAAzC,EAA4Cc,OAA5C,EAAN;AACD,SAHD,CAGE,OAAO3B,GAAP,EAAY;AACZP,iBAAOQ,KAAP,CAAc,gBAAewB,UAAUlB,OAAQ,WAA/C;AACA,gBAAMP,GAAN;AACD;;AAEDP,eAAOmC,OAAP,CAAgB,gBAAeH,UAAUZ,QAAS,SAAlD;;AAEA;AACA,YAAI,iBAAOM,GAAP,CAAWM,UAAUlB,OAArB,EAA8BF,cAA9B,CAAJ,EAAmD;AACjD;AACA,gBAAMP,kBAAkB+B,gBAAlB,CAAmCJ,SAAnC,CAAN;AACD;AACF;AACF,KApBD,CAoBE,OAAOzB,GAAP,EAAY;AACZP,aAAOQ,KAAP,CAAaD,GAAb;AACAE,cAAQC,IAAR,CAAa,CAAb;AACD;;AAEDD,YAAQ4B,cAAR,CAAuB,oBAAvB,EAA6C/B,yBAA7C;AACD,G;;kBAhE6BgC,O","file":"index.js","sourcesContent":["import semver from 'semver';\nimport Logger from 'nightingale-logger/src';\nimport readRecursiveDirectory from './readRecursiveDirectory';\n\nconst logger = new Logger('alp:migrations');\n\nexport MigrationsManager from './Manager';\n\nexport default async function migrate({ app, config, dirname, migrationsManager }) {\n  if (!config) config = app.config;\n  if (!dirname) dirname = `${app.dirname}/migrations`;\n\n  const unhandledRejectionHandler = (err) => {\n    logger.error('unhandledRejection', { err });\n    process.exit(1);\n  };\n  process.on('unhandledRejection', unhandledRejectionHandler);\n\n  const packageVersion = config.packageConfig.version;\n  let currentVersion = await migrationsManager.findLastVersion();\n  let migrations = [];\n\n  logger.info('migrate', { packageVersion, currentVersion });\n\n  await readRecursiveDirectory(dirname, (res) => {\n    let fileName = res.path.substr(dirname.length + 1);\n\n    if (fileName.slice(-3) !== '.js') {\n      return;\n    }\n\n    let version = /([\\d.]+)(_.*|\\.js)$/.exec(fileName);\n\n    if (!version || !version[1]) {\n      return;\n    }\n\n    version = version[1];\n\n    if (currentVersion && semver.lte(version, currentVersion)) return;\n\n    migrations.push({ version, fileName });\n  });\n\n  migrations = migrations.sort((a, b) => semver.gt(a.version, b.version));\n\n  try {\n    // eslint-disable-next-line no-restricted-syntax\n    for (let migration of migrations) {\n      logger.info(`Migration to ${migration.fileName}`);\n      try {\n        // eslint-disable-next-line global-require, import/no-dynamic-require, no-await-in-loop\n        await require(`${dirname}/${migration.fileName}`).default();\n      } catch (err) {\n        logger.error(`Migration to ${migration.version} Failed !`);\n        throw err;\n      }\n\n      logger.success(`Migration to ${migration.fileName} done !`);\n\n      // only add to db if migration version <= package version\n      if (semver.lte(migration.version, packageVersion)) {\n        // eslint-disable-next-line no-await-in-loop\n        await migrationsManager.addMigrationDone(migration);\n      }\n    }\n  } catch (err) {\n    logger.error(err);\n    process.exit(1);\n  }\n\n  process.removeListener('unhandledRejection', unhandledRejectionHandler);\n}\n"]}