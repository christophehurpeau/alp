{"version":3,"sources":["../src/readRecursiveDirectory.js"],"names":[],"mappings":";;;;;kBAEwB,sB;;AAFxB;;AAEe,SAAS,sBAAT,CAAgC,SAAhC,EAA2C,QAA3C,EAAqD;AAChE,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AACpC,yBAAQ,SAAR,EAAmB,CAAC,GAAD,EAAM,KAAN,KAAgB;AAC/B,gBAAI,GAAJ,EAAS,OAAO,OAAO,GAAP,CAAP;;AAET,oBAAQ,GAAR,CAAY,MAAM,GAAN,CAAW,IAAD,IAAU;AAC5B,sBAAM,OAAQ,IAAE,SAAU,MAAG,IAAK,GAAlC;AACA,uBAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AACpC,kCAAO,IAAP,EAAa,CAAC,GAAD,EAAM,IAAN,KAAe;AACxB,4BAAI,GAAJ,EAAS,OAAO,OAAO,GAAP,CAAP;;AAET,4BAAI,QAAQ,KAAK,WAAL,EAAZ,EAAgC;AAC5B,mCAAO,uBAAuB,IAAvB,EAA6B,QAA7B,EACF,IADE,CACG,OADH,EAEF,KAFE,CAEI,MAFJ,CAAP;AAGH;AACD,4BAAI;AACA,oCAAQ,OAAR,CAAgB,SAAS,EAAE,UAAU,IAAZ,EAAkB,MAAM,IAAxB,EAA8B,SAAS,SAAvC,EAAkD,MAAM,IAAxD,EAAT,CAAhB,EACK,IADL,CACU,OADV,EAEK,KAFL,CAEW,MAFX;AAGH,yBAJD,CAIE,OAAO,GAAP,EAAY;AACV,mCAAO,OAAO,GAAP,CAAP;AACH;AACJ,qBAfD;AAgBH,iBAjBM,CAAP;AAkBH,aApBW,CAAZ,EAoBI,IApBJ,CAoBS;AAAA,uBAAM,SAAN;AAAA,aApBT;AAqBH,SAxBD;AAyBH,KA1BM,CAAP;AA2BH","file":"readRecursiveDirectory.js","sourcesContent":["import { readdir, stat as fsStat } from 'fs';\n\nexport default function readRecursiveDirectory(directory, callback) {\n    return new Promise((resolve, reject) => {\n        readdir(directory, (err, files) => {\n            if (err) return reject(err);\n\n            Promise.all(files.map((file) => {\n                const path = `${directory}/${file}`;\n                return new Promise((resolve, reject) => {\n                    fsStat(path, (err, stat) => {\n                        if (err) return reject(err);\n\n                        if (stat && stat.isDirectory()) {\n                            return readRecursiveDirectory(path, callback)\n                                .then(resolve)\n                                .catch(reject);\n                        }\n                        try {\n                            Promise.resolve(callback({ filename: file, path: path, basedir: directory, stat: stat }))\n                                .then(resolve)\n                                .catch(reject);\n                        } catch (err) {\n                            return reject(err);\n                        }\n                    });\n                });\n            })).then(() => resolve());\n        });\n    });\n}\n"]}