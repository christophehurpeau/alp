{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,MAAM,SAAS,gCAAW,gBAAX,CAAf;;AAEA,QAAQ,EAAR,CAAW,oBAAX,EAAkC,GAAD,IAAS;AACtC,WAAO,KAAP,CAAa,oBAAb,EAAmC,EAAE,GAAF,EAAnC;AACA,YAAQ,IAAR,CAAa,CAAb;AACH,CAHD;;QAKO,iB;;;iCAEQ,kBAA+D;AAAA,YAAtC,MAAsC,SAAtC,MAAsC;AAAA,YAA9B,OAA8B,SAA9B,OAA8B;AAAA,YAArB,iBAAqB,SAArB,iBAAqB;;AAC1E,cAAM,iBAAiB,OAAO,aAAP,CAAqB,OAA5C;AACA,YAAI,iBAAiB,MAAM,kBAAkB,eAAlB,EAA3B;AACA,YAAI,aAAa,EAAjB;;AAEA,eAAO,IAAP,CAAY,SAAZ,EAAuB,EAAE,cAAF,EAAkB,cAAlB,EAAvB;;AAEA,cAAM,sCAAuB,OAAvB,EAAgC,UAAC,GAAD,EAAS;AAC3C,gBAAI,WAAW,IAAI,IAAJ,CAAS,MAAT,CAAgB,QAAQ,MAAR,GAAiB,CAAjC,CAAf;;AAEA,gBAAI,SAAS,KAAT,SAAuB,KAA3B,EAAkC;AAC9B;AACH;;AAED,gBAAI,UAAU,uBAAuB,IAAvB,CAA4B,QAA5B,CAAd;;AAEA,gBAAI,CAAC,OAAD,IAAY,CAAC,QAAQ,CAAR,CAAjB,EAA6B;AACzB;AACH;;AAED,sBAAU,QAAQ,CAAR,CAAV;;AAEA,gBAAK,kBAAkB,iBAAO,GAAP,CAAW,OAAX,EAAoB,cAApB,CAAnB,IAA2D,iBAAO,EAAP,CAAU,OAAV,EAAmB,cAAnB,CAA/D,EAAmG;AAC/F;AACH;;AAED,uBAAW,IAAX,CAAgB,EAAE,SAAS,OAAX,EAAoB,UAAU,QAA9B,EAAhB;AACH,SApBK,CAAN;;AAsBA,qBAAa,WAAW,IAAX,CAAgB,UAAC,CAAD,EAAI,CAAJ;AAAA,mBAAU,iBAAO,EAAP,CAAU,EAAE,OAAZ,EAAqB,EAAE,OAAvB,CAAV;AAAA,SAAhB,CAAb;;AAEA,YAAI;AACA,iBAAK,IAAI,SAAT,IAAsB,UAAtB,EAAkC;AAC9B;AACA,wBAAQ,GAAR,CAAa,iBAAe,UAAU,OAAQ,GAA9C;AACA,oBAAI;AACA;AACA,0BAAM,QAAS,IAAE,OAAQ,MAAG,UAAU,QAAS,GAAzC,EAA4C,OAA5C,EAAN;AACH,iBAHD,CAGE,OAAO,GAAP,EAAY;AACV;AACA,4BAAQ,GAAR,CAAa,iBAAe,UAAU,OAAQ,YAA9C;AACA,0BAAM,GAAN;AACH;;AAED;AACA,wBAAQ,GAAR,CAAa,iBAAe,UAAU,QAAS,UAA/C;AACA,sBAAM,kBAAkB,gBAAlB,CAAmC,SAAnC,CAAN;AACH;AACJ,SAjBD,CAiBE,OAAO,GAAP,EAAY;AACV,mBAAO,KAAP,CAAa,GAAb;AACA,oBAAQ,IAAR,CAAa,CAAb;AACH;AACJ,K;;aApD6B,O;;;;WAAA,O","file":"index.js","sourcesContent":["import semver from 'semver';\nimport Logger from 'nightingale-logger';\nimport readRecursiveDirectory from './readRecursiveDirectory';\n\nconst logger = new Logger('alp.migrations');\n\nprocess.on('unhandledRejection', (err) => {\n    logger.error('unhandledRejection', { err });\n    process.exit(1);\n});\n\nexport MigrationsManager from './Manager';\n\nexport default async function migrate({ config, dirname, migrationsManager }) {\n    const packageVersion = config.packageConfig.version;\n    let currentVersion = await migrationsManager.findLastVersion();\n    let migrations = [];\n\n    logger.info('migrate', { packageVersion, currentVersion });\n\n    await readRecursiveDirectory(dirname, (res) => {\n        let fileName = res.path.substr(dirname.length + 1);\n\n        if (fileName.slice(-3) !== '.js') {\n            return;\n        }\n\n        let version = /([\\d\\.]+)(_.*|\\.js)$/.exec(fileName);\n\n        if (!version || !version[1]) {\n            return;\n        }\n\n        version = version[1];\n\n        if ((currentVersion && semver.lte(version, currentVersion)) || semver.gt(version, packageVersion)) {\n            return;\n        }\n\n        migrations.push({ version: version, fileName: fileName });\n    });\n\n    migrations = migrations.sort((a, b) => semver.gt(a.version, b.version));\n\n    try {\n        for (let migration of migrations) {\n            // logger.info('Migration to ' + migration.fileName);\n            console.log(`Migration to ${migration.version}`);\n            try {\n                // eslint-disable-next-line global-require\n                await require(`${dirname}/${migration.fileName}`).default();\n            } catch (err) {\n                // logger.error('Migration to ' + migration.version + ' Failed !');\n                console.log(`Migration to ${migration.version} Failed !`);\n                throw err;\n            }\n\n            // logger.success('Migration to ' + migration.fileName + ' done !');\n            console.log(`Migration to ${migration.fileName} done !`);\n            await migrationsManager.addMigrationDone(migration);\n        }\n    } catch (err) {\n        logger.error(err);\n        process.exit(1);\n    }\n}\n"]}