{"version":3,"sources":["../src/readRecursiveDirectory.js"],"names":["readRecursiveDirectory","directory","callback","Promise","resolve","reject","err","files","all","map","file","path","stat","isDirectory","then","catch","filename","basedir"],"mappings":";;;;;kBAEwBA,sB;;AAFxB;;AAEe,SAASA,sBAAT,CAAgCC,SAAhC,EAA2CC,QAA3C,EAAqD;AAClE,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,qBAAQJ,SAAR,EAAmB,CAACK,GAAD,EAAMC,KAAN,KAAgB;AACjC,UAAID,GAAJ,EAAS,OAAOD,OAAOC,GAAP,CAAP;;AAETH,cAAQK,GAAR,CAAYD,MAAME,GAAN,CAAWC,IAAD,IAAU;AAC9B,cAAMC,OAAQ,IAAEV,SAAU,MAAGS,IAAK,GAAlC;AACA,eAAO,IAAIP,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,wBAAOM,IAAP,EAAa,CAACL,GAAD,EAAMM,IAAN,KAAe;AAC1B,gBAAIN,GAAJ,EAAS,OAAOD,OAAOC,GAAP,CAAP;;AAET,gBAAIM,QAAQA,KAAKC,WAAL,EAAZ,EAAgC;AAC9B,qBAAOb,uBAAuBW,IAAvB,EAA6BT,QAA7B,EACJY,IADI,CACCV,OADD,EAEJW,KAFI,CAEEV,MAFF,CAAP;AAGD;AACD,gBAAI;AACFF,sBAAQC,OAAR,CAAgBF,SAAS;AACvBc,0BAAUN,IADa;AAEvBC,sBAAMA,IAFiB;AAGvBM,yBAAShB,SAHc;AAIvBW,sBAAMA;AAJiB,eAAT,CAAhB,EAMGE,IANH,CAMQV,OANR,EAOGW,KAPH,CAOSV,MAPT;AAQD,aATD,CASE,OAAOC,GAAP,EAAY;AACZ,qBAAOD,OAAOC,GAAP,CAAP;AACD;AACF,WApBD;AAqBD,SAtBM,CAAP;AAuBD,OAzBW,CAAZ,EAyBIQ,IAzBJ,CAyBS,MAAMV,SAzBf;AA0BD,KA7BD;AA8BD,GA/BM,CAAP;AAgCD","file":"readRecursiveDirectory.js","sourcesContent":["import { readdir, stat as fsStat } from 'fs';\n\nexport default function readRecursiveDirectory(directory, callback) {\n  return new Promise((resolve, reject) => {\n    readdir(directory, (err, files) => {\n      if (err) return reject(err);\n\n      Promise.all(files.map((file) => {\n        const path = `${directory}/${file}`;\n        return new Promise((resolve, reject) => {\n          fsStat(path, (err, stat) => {\n            if (err) return reject(err);\n\n            if (stat && stat.isDirectory()) {\n              return readRecursiveDirectory(path, callback)\n                .then(resolve)\n                .catch(reject);\n            }\n            try {\n              Promise.resolve(callback({\n                filename: file,\n                path: path,\n                basedir: directory,\n                stat: stat,\n              }))\n                .then(resolve)\n                .catch(reject);\n            } catch (err) {\n              return reject(err);\n            }\n          });\n        });\n      })).then(() => resolve());\n    });\n  });\n}\n"]}