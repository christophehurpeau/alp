{"version":3,"sources":["../src/index.js"],"names":["alpListen","logger","dirname","app","Promise","resolve","socketPath","config","get","port","hostname","tls","createServer","require","info","server","callback","options","key","cert","err","listen"],"mappings":";;;;;kBASwBA,S;;AATxB;;AACA;;;;;;AAEA,MAAMC,SAAS,gCAAW,YAAX,CAAf;;AAEA;;;;AAIe,SAASD,SAAT,CAAmBE,OAAnB,EAA4B;AACzC,SAAQC,GAAD,IACL,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvB,UAAMC,aAAaH,IAAII,MAAJ,CAAWC,GAAX,CAAe,YAAf,CAAnB;AACA,UAAMC,OAAON,IAAII,MAAJ,CAAWC,GAAX,CAAe,MAAf,CAAb;AACA,UAAME,WAAWP,IAAII,MAAJ,CAAWC,GAAX,CAAe,UAAf,CAAjB;AACA,UAAMG,MAAMR,IAAII,MAAJ,CAAWC,GAAX,CAAe,KAAf,CAAZ;AACA;AACA,UAAMI,eAAeC,QAAQ,CAACP,UAAD,IAAeK,GAAf,GAAqB,OAArB,GAA+B,MAAvC,EAA+CC,YAApE;;AAEAX,WAAOa,IAAP,CACU,iBADV,EAEUR,aAAa,EAAEA,YAAYA,UAAd,EAAb,GAA0C,EAAEG,MAAMA,IAAR,EAFpD,EAGU,EAAE,CAACH,aAAa,YAAb,GAA4B,MAA7B,aAAF,EAHV;;AAMA,UAAMS,SAAS,CAAC,MAAM;AACpB,UAAI,CAACJ,GAAL,EAAU;AACR,eAAOC,aAAaT,IAAIa,QAAJ,EAAb,CAAP;AACD;;AAED,YAAMC,UAAU;AACdC,aAAK,sBAAc,IAAEhB,OAAQ,cAAxB,CADS;AAEdiB,cAAM,sBAAc,IAAEjB,OAAQ,cAAxB;AAFQ,OAAhB;;AAKA,aAAOU,aAAaK,OAAb,EAAsBd,IAAIa,QAAJ,EAAtB,CAAP;AACD,KAXc,GAAf;;AAaA,QAAIV,UAAJ,EAAgB;AACd,UAAI;AACF,4BAAWA,UAAX;AACD,OAFD,CAEE,OAAOc,GAAP,EAAY,CACb;;AAEDL,aAAOM,MAAP,CAAcf,UAAd,EAA0B,MAAM;AAC9B,YAAIA,UAAJ,EAAgB;AACd,6BAAUA,UAAV,EAAsB,KAAtB;AACD;;AAEDL,eAAOa,IAAP,CAAY,kBAAZ,EAAgC,EAAER,UAAF,EAAhC,EAAgD,EAAEA,sBAAF,EAAhD;AACAD,gBAAQU,MAAR;AACD,OAPD;AAQD,KAdD,MAcO;AACLA,aAAOM,MAAP,CAAcZ,IAAd,EAAoBC,QAApB,EAA8B,MAAM;AAClCT,eAAOa,IAAP,CAAY,kBAAZ,EAAgC,EAAEL,IAAF,EAAhC,EAA0C,EAAEA,gBAAF,EAA1C;AACAJ,gBAAQU,MAAR;AACD,OAHD;AAID;AACF,GA/CD,CADF;AAkDD","file":"index.js","sourcesContent":["import { chmodSync, unlinkSync, readFileSync } from 'fs';\nimport Logger from 'nightingale-logger/src';\n\nconst logger = new Logger('alp:listen');\n\n/**\n * @param {string} dirname for tls server, dirname of the server.key and server.crt\n * @returns {Function}\n */\nexport default function alpListen(dirname) {\n  return (app) => (\n    new Promise((resolve) => {\n      const socketPath = app.config.get('socketPath');\n      const port = app.config.get('port');\n      const hostname = app.config.get('hostname');\n      const tls = app.config.get('tls');\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      const createServer = require(!socketPath && tls ? 'https' : 'http').createServer;\n\n      logger.info(\n                'Creating server',\n                socketPath ? { socketPath: socketPath } : { port: port },\n                { [socketPath ? 'socketPath' : 'port']: ['yellow'] },\n            );\n\n      const server = (() => {\n        if (!tls) {\n          return createServer(app.callback());\n        }\n\n        const options = {\n          key: readFileSync(`${dirname}/server.key`),\n          cert: readFileSync(`${dirname}/server.crt`),\n        };\n\n        return createServer(options, app.callback());\n      })();\n\n      if (socketPath) {\n        try {\n          unlinkSync(socketPath);\n        } catch (err) {\n        }\n\n        server.listen(socketPath, () => {\n          if (socketPath) {\n            chmodSync(socketPath, '777');\n          }\n\n          logger.info('Server listening', { socketPath }, { socketPath: ['yellow'] });\n          resolve(server);\n        });\n      } else {\n        server.listen(port, hostname, () => {\n          logger.info('Server listening', { port }, { port: ['yellow'] });\n          resolve(server);\n        });\n      }\n    })\n  );\n}\n"]}