{"version":3,"sources":["../src/index.js"],"names":["chmodSync","unlinkSync","readFileSync","Logger","logger","alpListen","dirname","app","Promise","resolve","socketPath","config","get","port","hostname","tls","createServer","require","info","server","callback","options","key","cert","err","listen"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,QAAoD,IAApD;AACA,OAAOC,MAAP;;AAEA,MAAMC,SAAS,IAAID,MAAJ,CAAW,YAAX,CAAf;;AAEA;;;;AAIA,eAAe,SAASE,SAAT,CAAmBC,OAAnB,EAA4B;AACzC,SAAOC,OACL,IAAIC,OAAJ,CAAYC,WAAW;AACrB,UAAMC,aAAaH,IAAII,MAAJ,CAAWC,GAAX,CAAe,YAAf,CAAnB;AACA,UAAMC,OAAON,IAAII,MAAJ,CAAWC,GAAX,CAAe,MAAf,CAAb;AACA,UAAME,WAAWP,IAAII,MAAJ,CAAWC,GAAX,CAAe,UAAf,CAAjB;AACA,UAAMG,MAAMR,IAAII,MAAJ,CAAWC,GAAX,CAAe,KAAf,CAAZ;AACA;AACA,UAAMI,eAAeC,QAAQ,CAACP,UAAD,IAAeK,GAAf,GAAqB,OAArB,GAA+B,MAAvC,EAA+CC,YAApE;;AAEAZ,WAAOc,IAAP,CAAY,iBAAZ,EAA+BR,aAAa,EAAEA,UAAF,EAAb,GAA8B,EAAEG,IAAF,EAA7D,EAAuE;AACrE,OAACH,aAAa,YAAb,GAA4B,MAA7B;AADqE,KAAvE,CARqB;;;AAYrB,UAAMS,SAAS,CAAC,MAAM;AACpB,UAAI,CAACJ,GAAL,EACE,OAAOC,aAAaT,IAAIa,QAAJ,EAAb,CAAP;;AAGF,YAAMC,UAAU;AACdC,aAAKpB,aAAc,GAAEI,OAAQ,aAAxB,CADS;AAEdiB,cAAMrB,aAAc,GAAEI,OAAQ,aAAxB;AAFQ,OAAhB;;AAKA,aAAOU,aAAaK,OAAb,EAAsBd,IAAIa,QAAJ,EAAtB,CAAP;AACD,KAXc,GAAf;;AAaA,QAAIV,UAAJ,EAAgB;AACd,UAAI;AACFT,mBAAWS,UAAX,CADE;AAEH,OAFD,CAEE,OAAOc,GAAP,EAAY,CAAE;;AAEhBL,aAAOM,MAAP,CAAcf,UAAd,EAA0B,MAAM;AAC1BA,kBAD0B,IAE5BV,UAAUU,UAAV,EAAsB,KAAtB,CAF4B,EAK9BN,OAAOc,IAAP,CAAY,kBAAZ,EAAgC,EAAER,UAAF,EAAhC,EAAgD,EAAEA,sBAAF,EAAhD,CAL8B,EAM9BD,QAAQU,MAAR,CAN8B;AAO/B,OAPD,CALc;AAaf,KAbD,MAcEA,OAAOM,MAAP,CAAcZ,IAAd,EAAoBC,QAApB,EAA8B,MAAM;AAClCV,eAAOc,IAAP,CAAY,kBAAZ,EAAgC,EAAEL,IAAF,EAAhC,EAA0C,EAAEA,gBAAF,EAA1C,CADkC,EAElCJ,QAAQU,MAAR,CAFkC;AAGnC,OAHD,CAdF;AAmBD,GA5CD,CADF;AA8CD","file":"index.js","sourcesContent":["import { chmodSync, unlinkSync, readFileSync } from 'fs';\nimport Logger from 'nightingale-logger/src';\n\nconst logger = new Logger('alp:listen');\n\n/**\n * @param {string} dirname for tls server, dirname of the server.key and server.crt\n * @returns {Function}\n */\nexport default function alpListen(dirname) {\n  return app =>\n    new Promise(resolve => {\n      const socketPath = app.config.get('socketPath');\n      const port = app.config.get('port');\n      const hostname = app.config.get('hostname');\n      const tls = app.config.get('tls');\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      const createServer = require(!socketPath && tls ? 'https' : 'http').createServer;\n\n      logger.info('Creating server', socketPath ? { socketPath } : { port }, {\n        [socketPath ? 'socketPath' : 'port']: ['yellow'],\n      });\n\n      const server = (() => {\n        if (!tls) {\n          return createServer(app.callback());\n        }\n\n        const options = {\n          key: readFileSync(`${dirname}/server.key`),\n          cert: readFileSync(`${dirname}/server.crt`),\n        };\n\n        return createServer(options, app.callback());\n      })();\n\n      if (socketPath) {\n        try {\n          unlinkSync(socketPath);\n        } catch (err) {}\n\n        server.listen(socketPath, () => {\n          if (socketPath) {\n            chmodSync(socketPath, '777');\n          }\n\n          logger.info('Server listening', { socketPath }, { socketPath: ['yellow'] });\n          resolve(server);\n        });\n      } else {\n        server.listen(port, hostname, () => {\n          logger.info('Server listening', { port }, { port: ['yellow'] });\n          resolve(server);\n        });\n      }\n    });\n}\n"]}