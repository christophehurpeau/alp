{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;kBASwB,S;;AATxB;;AACA;;;;;;;;;;AAEA,MAAM,SAAS,gCAAW,YAAX,CAAf;;;;;;;;;EAMe,SAAS,SAAT,CAAmB,OAAnB,EAA4B;;;;AAIvC,WAAO,OAAO;AACV,eAAO,IAAI,OAAJ,CAAa,OAAD,IAAa;AAC5B,kBAAM,aAAa,IAAI,MAAJ,CAAW,GAAX,CAAe,YAAf,CAAnB;AACA,kBAAM,OAAO,IAAI,MAAJ,CAAW,GAAX,CAAe,MAAf,CAAb;AACA,kBAAM,WAAW,IAAI,MAAJ,CAAW,GAAX,CAAe,UAAf,CAAjB;AACA,kBAAM,MAAM,IAAI,MAAJ,CAAW,GAAX,CAAe,KAAf,CAAZ;AACA,kBAAM,eAAe,QAAQ,CAAC,UAAD,IAAe,GAAf,GAAqB,OAArB,GAA+B,MAAvC,EAA+C,YAApE;;AAEA,mBAAO,IAAP,CACI,iBADJ,EAEI,aAAa,EAAE,YAAY,UAAd,EAAb,GAA0C,EAAE,MAAM,IAAR,EAF9C,EAGI,EAAE,CAAC,aAAa,YAAb,GAA4B,MAA7B,GAAsC,CAAC,QAAD,CAAxC,EAHJ;;AAMA,kBAAM,SAAS,CAAC,MAAM;AAClB,oBAAI,CAAC,GAAL,EAAU;AACN,2BAAO,aAAa,IAAI,QAAJ,EAAb,CAAP;AACH;;AAED,sBAAM,UAAU;AACZ,yBAAK,sBAAa,CAAC,AAAD,GAAG,OAAH,EAAW,WAAX,CAAb,CADO;AAEZ,0BAAM,sBAAa,CAAC,AAAD,GAAG,OAAH,EAAW,WAAX,CAAb;AAFM,iBAAhB;;AAKA,uBAAO,aAAa,OAAb,EAAsB,IAAI,QAAJ,EAAtB,CAAP;AACH,aAXc,GAAf;;AAaA,gBAAI,UAAJ,EAAgB;AACZ,oBAAI;AACA,wCAAW,UAAX;AACH,iBAFD,CAEE,OAAO,GAAP,EAAY,CACb;;AAED,uBAAO,MAAP,CAAc,UAAd,EAA0B,MAAM;AAC5B,wBAAI,UAAJ,EAAgB;AACZ,2CAAU,UAAV,EAAsB,KAAtB;AACH;;AAED,2BAAO,IAAP,CAAY,kBAAZ,EAAgC,EAAE,sBAAF,EAAhC,EAAgD,EAAE,YAAY,CAAC,QAAD,CAAd,EAAhD;AACA,4BAAQ,MAAR;AACH,iBAPD;AAQH,aAdD,MAcO;AACH,uBAAO,MAAP,CAAc,IAAd,EAAoB,QAApB,EAA8B,MAAM;AAChC,2BAAO,IAAP,CAAY,kBAAZ,EAAgC,EAAE,UAAF,EAAhC,EAA0C,EAAE,MAAM,CAAC,QAAD,CAAR,EAA1C;AACA,4BAAQ,MAAR;AACH,iBAHD;AAIH;AACJ,SA9CM,CAAP;AA+CH,KAhDD;AAiDH","file":"index.js","sourcesContent":["import { chmodSync, unlinkSync, readFileSync } from 'fs';\nimport Logger from 'nightingale-logger';\n\nconst logger = new Logger('alp.listen');\n\n/**\n * @param {string} dirname for tls server, dirname of the server.key and server.crt\n * @returns {Function}\n */\nexport default function alpListen(dirname) {\n    /**\n     * @returns {Promise}\n     */\n    return app => {\n        return new Promise((resolve) => {\n            const socketPath = app.config.get('socketPath');\n            const port = app.config.get('port');\n            const hostname = app.config.get('hostname');\n            const tls = app.config.get('tls');\n            const createServer = require(!socketPath && tls ? 'https' : 'http').createServer;\n\n            logger.info(\n                'Creating server',\n                socketPath ? { socketPath: socketPath } : { port: port },\n                { [socketPath ? 'socketPath' : 'port']: ['yellow'] }\n            );\n\n            const server = (() => {\n                if (!tls) {\n                    return createServer(app.callback());\n                }\n\n                const options = {\n                    key: readFileSync(`${dirname}/server.key`),\n                    cert: readFileSync(`${dirname}/server.crt`),\n                };\n\n                return createServer(options, app.callback());\n            })();\n\n            if (socketPath) {\n                try {\n                    unlinkSync(socketPath);\n                } catch (err) {\n                }\n\n                server.listen(socketPath, () => {\n                    if (socketPath) {\n                        chmodSync(socketPath, '777');\n                    }\n\n                    logger.info('Server listening', { socketPath }, { socketPath: ['yellow'] });\n                    resolve(server);\n                });\n            } else {\n                server.listen(port, hostname, () => {\n                    logger.info('Server listening', { port }, { port: ['yellow'] });\n                    resolve(server);\n                });\n            }\n        });\n    };\n}\n"]}