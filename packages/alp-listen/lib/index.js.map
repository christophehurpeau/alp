{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;kBAMwB;;;;;;;;;;;;;AAAT,SAAS,SAAT,CAAmB,OAAnB,EAA4B;;;;AAIvC,WAAO,OAAO;AACV,eAAO,IAAI,OAAJ,CAAY,WAAa;AAC5B,kBAAM,aAAa,IAAI,MAAJ,CAAW,GAAX,CAAe,YAAf,CAAb,CADsB;AAE5B,kBAAM,OAAO,IAAI,MAAJ,CAAW,GAAX,CAAe,MAAf,CAAP,CAFsB;AAG5B,kBAAM,WAAW,IAAI,MAAJ,CAAW,GAAX,CAAe,UAAf,CAAX,CAHsB;AAI5B,kBAAM,MAAM,IAAI,MAAJ,CAAW,GAAX,CAAe,KAAf,CAAN,CAJsB;AAK5B,kBAAM,eAAe,QAAQ,CAAC,UAAD,IAAe,GAAf,GAAqB,OAArB,GAA+B,MAA/B,CAAR,CAA+C,YAA/C,CALO;;AAO5B,gBAAI,MAAJ,CAAW,IAAX,CACI,iBADJ,EAEI,aAAa,EAAE,YAAY,UAAZ,EAAf,GAA0C,EAAE,MAAM,IAAN,EAA5C,EACA,EAAE,CAAC,aAAa,YAAb,GAA4B,MAA5B,GAAqC,CAAC,QAAD,CAAtC,EAHN,EAP4B;;AAa5B,kBAAM,SAAS,CAAC,MAAM;AAClB,oBAAI,CAAC,GAAD,EAAM;AACN,2BAAO,aAAa,IAAI,QAAJ,EAAb,CAAP,CADM;iBAAV;;AAIA,sBAAM,UAAU;AACZ,yBAAK,sBAAa,CAAC,GAAE,OAAH,EAAW,WAAX,CAAb,CAAL;AACA,0BAAM,sBAAa,CAAC,GAAE,OAAH,EAAW,WAAX,CAAb,CAAN;iBAFE,CALY;;AAUlB,uBAAO,aAAa,OAAb,EAAsB,IAAI,QAAJ,EAAtB,CAAP,CAVkB;aAAN,CAAD,EAAT,CAbsB;;AA0B5B,gBAAI,UAAJ,EAAgB;AACZ,oBAAI;AACA,wCAAW,UAAX,EADA;iBAAJ,CAEE,OAAO,GAAP,EAAY,EAAZ;;AAGF,uBAAO,MAAP,CAAc,UAAd,EAA0B,MAAM;AAC5B,wBAAI,UAAJ,EAAgB;AACZ,2CAAU,UAAV,EAAsB,KAAtB,EADY;qBAAhB;;AAIA,wBAAI,MAAJ,CAAW,IAAX,CAAgB,kBAAhB,EAAoC,EAAE,UAAF,EAApC,EAAoD,EAAE,YAAY,CAAC,QAAD,CAAZ,EAAtD,EAL4B;AAM5B,4BAAQ,MAAR,EAN4B;iBAAN,CAA1B,CANY;aAAhB,MAcO;AACH,uBAAO,MAAP,CAAc,IAAd,EAAoB,QAApB,EAA8B,MAAM;AAChC,wBAAI,MAAJ,CAAW,IAAX,CAAgB,kBAAhB,EAAoC,EAAE,IAAF,EAApC,EAA8C,EAAE,MAAM,CAAC,QAAD,CAAN,EAAhD,EADgC;AAEhC,4BAAQ,MAAR,EAFgC;iBAAN,CAA9B,CADG;aAdP;SA1Be,CAAnB,CADU;KAAP,CAJgC;CAA5B","file":"index.js","sourcesContent":["import { chmodSync, unlinkSync, readFileSync } from 'fs';\n\n/**\n * @param {string} dirname for tls server, dirname of the server.key and server.crt\n * @returns {Function}\n */\nexport default function aukListen(dirname) {\n    /**\n     * @returns {Promise}\n     */\n    return app => {\n        return new Promise((resolve) => {\n            const socketPath = app.config.get('socketPath');\n            const port = app.config.get('port');\n            const hostname = app.config.get('hostname');\n            const tls = app.config.get('tls');\n            const createServer = require(!socketPath && tls ? 'https' : 'http').createServer;\n\n            app.logger.info(\n                'Creating server',\n                socketPath ? { socketPath: socketPath } : { port: port },\n                { [socketPath ? 'socketPath' : 'port']: ['yellow'] }\n            );\n\n            const server = (() => {\n                if (!tls) {\n                    return createServer(app.callback());\n                }\n\n                const options = {\n                    key: readFileSync(`${dirname}/server.key`),\n                    cert: readFileSync(`${dirname}/server.crt`),\n                };\n\n                return createServer(options, app.callback());\n            })();\n\n            if (socketPath) {\n                try {\n                    unlinkSync(socketPath);\n                } catch (err) {\n                }\n\n                server.listen(socketPath, () => {\n                    if (socketPath) {\n                        chmodSync(socketPath, '777');\n                    }\n\n                    app.logger.info('Server listening', { socketPath }, { socketPath: ['yellow'] });\n                    resolve(server);\n                });\n            } else {\n                server.listen(port, hostname, () => {\n                    app.logger.info('Server listening', { port }, { port: ['yellow'] });\n                    resolve(server);\n                });\n            }\n        });\n    };\n}\n"]}