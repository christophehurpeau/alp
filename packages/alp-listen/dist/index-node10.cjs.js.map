{"version":3,"file":"index-node10.cjs.js","sources":["../src/index.ts"],"sourcesContent":["import { chmodSync, unlinkSync, readFileSync } from 'fs';\nimport { Server, IncomingMessage, ServerResponse } from 'http';\nimport { Config } from 'alp-node-config';\nimport Logger from 'nightingale-logger';\n\nconst logger = new Logger('alp:listen');\n\ntype RequestListener = (req: IncomingMessage, res: ServerResponse) => void;\n\nconst createServer = (\n  callback: RequestListener,\n  socketPath?: string,\n  tls?: boolean,\n  dirname?: string,\n): Server => {\n  // eslint-disable-next-line global-require, import/no-dynamic-require\n  const createServer = require(!socketPath && tls ? 'https' : 'http')\n    .createServer;\n\n  if (!tls) {\n    return createServer(callback);\n  }\n\n  const options = {\n    key: readFileSync(`${dirname}/server.key`),\n    cert: readFileSync(`${dirname}/server.crt`),\n  };\n\n  return createServer(options, callback);\n};\n\nexport default function alpListen(\n  config: Config,\n  callback: RequestListener,\n  dirname?: string,\n): Promise<Server> {\n  return new Promise((resolve) => {\n    const socketPath = config.get('socketPath');\n    const port = config.get('port');\n    const hostname = config.get('hostname');\n    const tls = config.get('tls');\n\n    logger.info('Creating server', socketPath ? { socketPath } : { port });\n    const server = createServer(callback, socketPath, tls, dirname);\n\n    if (socketPath) {\n      try {\n        unlinkSync(socketPath);\n      } catch (err) {}\n\n      server.listen(socketPath, () => {\n        if (socketPath) {\n          chmodSync(socketPath, '777');\n        }\n\n        logger.info('Server listening', { socketPath });\n        resolve(server);\n      });\n    } else {\n      server.listen(port, hostname, () => {\n        logger.info('Server listening', { port });\n        resolve(server);\n      });\n    }\n  });\n}\n"],"names":["logger","Logger","createServer","callback","socketPath","tls","dirname","require","options","key","readFileSync","cert","alpListen","config","Promise","resolve","get","port","hostname","info","server","unlinkSync","err","listen","chmodSync"],"mappings":";;;;;;;;;AAKA,MAAMA,MAAM,GAAG,IAAIC,MAAJ,CAAW,YAAX,CAAf;;AAIA,MAAMC,YAAY,GAAG,CACnBC,QADmB,EAEnBC,UAFmB,EAGnBC,GAHmB,EAInBC,OAJmB,KAKR;;QAELJ,YAAY,GAAGK,OAAO,CAAC,CAACH,UAAD,IAAeC,GAAf,GAAqB,OAArB,GAA+B,MAAhC,CAAP,CAClBH,YADH;;MAGI,CAACG,GAAL,EAAU;WACDH,YAAY,CAACC,QAAD,CAAnB;;;QAGIK,OAAO,GAAG;IACdC,GAAG,EAAEC,eAAY,CAAE,GAAEJ,OAAQ,aAAZ,CADH;IAEdK,IAAI,EAAED,eAAY,CAAE,GAAEJ,OAAQ,aAAZ;GAFpB;SAKOJ,YAAY,CAACM,OAAD,EAAUL,QAAV,CAAnB;CAnBF;;AAsBA,AAAe,SAASS,SAAT,CACbC,MADa,EAEbV,QAFa,EAGbG,OAHa,EAII;SACV,IAAIQ,OAAJ,CAAaC,OAAD,IAAa;UACxBX,UAAU,GAAGS,MAAM,CAACG,GAAP,CAAW,YAAX,CAAnB;UACMC,IAAI,GAAGJ,MAAM,CAACG,GAAP,CAAW,MAAX,CAAb;UACME,QAAQ,GAAGL,MAAM,CAACG,GAAP,CAAW,UAAX,CAAjB;UACMX,GAAG,GAAGQ,MAAM,CAACG,GAAP,CAAW,KAAX,CAAZ;IAEAhB,MAAM,CAACmB,IAAP,CAAY,iBAAZ,EAA+Bf,UAAU,GAAG;MAAEA;KAAL,GAAoB;MAAEa;KAA/D;UACMG,MAAM,GAAGlB,YAAY,CAACC,QAAD,EAAWC,UAAX,EAAuBC,GAAvB,EAA4BC,OAA5B,CAA3B;;QAEIF,UAAJ,EAAgB;UACV;QACFiB,aAAU,CAACjB,UAAD,CAAV;OADF,CAEE,OAAOkB,GAAP,EAAY;;MAEdF,MAAM,CAACG,MAAP,CAAcnB,UAAd,EAA0B,MAAM;YAC1BA,UAAJ,EAAgB;UACdoB,YAAS,CAACpB,UAAD,EAAa,KAAb,CAAT;;;QAGFJ,MAAM,CAACmB,IAAP,CAAY,kBAAZ,EAAgC;UAAEf;SAAlC;QACAW,OAAO,CAACK,MAAD,CAAP;OANF;KALF,MAaO;MACLA,MAAM,CAACG,MAAP,CAAcN,IAAd,EAAoBC,QAApB,EAA8B,MAAM;QAClClB,MAAM,CAACmB,IAAP,CAAY,kBAAZ,EAAgC;UAAEF;SAAlC;QACAF,OAAO,CAACK,MAAD,CAAP;OAFF;;GAvBG,CAAP;;;;;"}