{"version":3,"file":"index-node14.mjs","sources":["../src/index.ts"],"sourcesContent":["import { chmodSync, unlinkSync, readFileSync } from 'fs';\nimport { createServer as createServerHttp } from 'http';\nimport type { Server, IncomingMessage, ServerResponse } from 'http';\nimport { createServer as createServerHttps } from 'https';\nimport type { Config } from 'alp-node-config';\nimport { Logger } from 'nightingale-logger';\n\nconst logger = new Logger('alp:listen');\n\ntype RequestListener = (req: IncomingMessage, res: ServerResponse) => void;\n\nconst createServer = (\n  callback: RequestListener,\n  socketPath?: string,\n  tls?: boolean,\n  dirname = '',\n): Server => {\n  const createHttpServer =\n    !socketPath && tls ? createServerHttps : createServerHttp;\n\n  if (!tls) {\n    return createHttpServer(callback);\n  }\n\n  const options = {\n    key: readFileSync(`${dirname}/server.key`),\n    cert: readFileSync(`${dirname}/server.crt`),\n  };\n\n  return (createHttpServer as typeof createServerHttps)(options, callback);\n};\n\nexport default function alpListen(\n  config: Config,\n  callback: RequestListener,\n  dirname?: string,\n): Promise<Server> {\n  return new Promise((resolve) => {\n    const socketPath = config.get<string>('socketPath');\n    const port = config.get<number>('port');\n    const hostname = config.get<string>('hostname');\n    const tls = config.get<boolean>('tls');\n\n    logger.info('Creating server', socketPath ? { socketPath } : { port });\n    const server = createServer(callback, socketPath, tls, dirname);\n\n    if (socketPath) {\n      try {\n        unlinkSync(socketPath);\n      } catch {}\n\n      server.listen(socketPath, () => {\n        if (socketPath) {\n          chmodSync(socketPath, '777');\n        }\n\n        logger.info('Server listening', { socketPath });\n        resolve(server);\n      });\n    } else {\n      server.listen(port, hostname, () => {\n        logger.info('Server listening', { port });\n        resolve(server);\n      });\n    }\n  });\n}\n"],"names":["logger","Logger","createServer","callback","socketPath","tls","dirname","createHttpServer","createServerHttps","createServerHttp","options","key","readFileSync","cert","alpListen","config","Promise","resolve","get","port","hostname","info","server","unlinkSync","listen","chmodSync"],"mappings":";;;;;AAOA,MAAMA,MAAM,GAAG,IAAIC,MAAJ,CAAW,YAAX,CAAf;;AAIA,MAAMC,YAAY,GAAG,CACnBC,QADmB,EAEnBC,UAFmB,EAGnBC,GAHmB,EAInBC,OAAO,GAAG,EAJS,KAKR;AACX,QAAMC,gBAAgB,GACpB,CAACH,UAAD,IAAeC,GAAf,GAAqBG,cAArB,GAAyCC,cAD3C;;AAGA,MAAI,CAACJ,GAAL,EAAU;AACR,WAAOE,gBAAgB,CAACJ,QAAD,CAAvB;AACD;;AAED,QAAMO,OAAO,GAAG;AACdC,IAAAA,GAAG,EAAEC,YAAY,CAAE,GAAEN,OAAQ,aAAZ,CADH;AAEdO,IAAAA,IAAI,EAAED,YAAY,CAAE,GAAEN,OAAQ,aAAZ;AAFJ,GAAhB;AAKA,SAAQC,gBAAD,CAA+CG,OAA/C,EAAwDP,QAAxD,CAAP;AACD,CAnBD;;AAqBe,SAASW,SAAT,CACbC,MADa,EAEbZ,QAFa,EAGbG,OAHa,EAII;AACjB,SAAO,IAAIU,OAAJ,CAAaC,OAAD,IAAa;AAC9B,UAAMb,UAAU,GAAGW,MAAM,CAACG,GAAP,CAAmB,YAAnB,CAAnB;AACA,UAAMC,IAAI,GAAGJ,MAAM,CAACG,GAAP,CAAmB,MAAnB,CAAb;AACA,UAAME,QAAQ,GAAGL,MAAM,CAACG,GAAP,CAAmB,UAAnB,CAAjB;AACA,UAAMb,GAAG,GAAGU,MAAM,CAACG,GAAP,CAAoB,KAApB,CAAZ;AAEAlB,IAAAA,MAAM,CAACqB,IAAP,CAAY,iBAAZ,EAA+BjB,UAAU,GAAG;AAAEA,MAAAA;AAAF,KAAH,GAAoB;AAAEe,MAAAA;AAAF,KAA7D;AACA,UAAMG,MAAM,GAAGpB,YAAY,CAACC,QAAD,EAAWC,UAAX,EAAuBC,GAAvB,EAA4BC,OAA5B,CAA3B;;AAEA,QAAIF,UAAJ,EAAgB;AACd,UAAI;AACFmB,QAAAA,UAAU,CAACnB,UAAD,CAAV;AACD,OAFD,CAEE,MAAM;;AAERkB,MAAAA,MAAM,CAACE,MAAP,CAAcpB,UAAd,EAA0B,MAAM;AAC9B,YAAIA,UAAJ,EAAgB;AACdqB,UAAAA,SAAS,CAACrB,UAAD,EAAa,KAAb,CAAT;AACD;;AAEDJ,QAAAA,MAAM,CAACqB,IAAP,CAAY,kBAAZ,EAAgC;AAAEjB,UAAAA;AAAF,SAAhC;AACAa,QAAAA,OAAO,CAACK,MAAD,CAAP;AACD,OAPD;AAQD,KAbD,MAaO;AACLA,MAAAA,MAAM,CAACE,MAAP,CAAcL,IAAd,EAAoBC,QAApB,EAA8B,MAAM;AAClCpB,QAAAA,MAAM,CAACqB,IAAP,CAAY,kBAAZ,EAAgC;AAAEF,UAAAA;AAAF,SAAhC;AACAF,QAAAA,OAAO,CAACK,MAAD,CAAP;AACD,OAHD;AAID;AACF,GA5BM,CAAP;AA6BD;;;;"}