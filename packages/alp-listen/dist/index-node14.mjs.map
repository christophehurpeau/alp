{"version":3,"file":"index-node14.mjs","sources":["../src/index.ts"],"sourcesContent":["import { chmodSync, unlinkSync, readFileSync } from 'fs';\nimport { createServer as createServerHttp } from 'http';\nimport type { Server, IncomingMessage, ServerResponse } from 'http';\nimport { createServer as createServerHttps } from 'https';\nimport type { Config } from 'alp-node-config';\nimport { Logger } from 'nightingale-logger';\n\nconst logger = new Logger('alp:listen');\n\ntype RequestListener = (req: IncomingMessage, res: ServerResponse) => void;\n\nconst createServer = (\n  callback: RequestListener,\n  socketPath?: string,\n  tls?: boolean,\n  dirname = '',\n): Server => {\n  const createHttpServer =\n    !socketPath && tls ? createServerHttps : createServerHttp;\n\n  if (!tls) {\n    return createHttpServer(callback);\n  }\n\n  const options = {\n    key: readFileSync(`${dirname}/server.key`),\n    cert: readFileSync(`${dirname}/server.crt`),\n  };\n\n  return (createHttpServer as typeof createServerHttps)(options, callback);\n};\n\nexport default function alpListen(\n  config: Config,\n  callback: RequestListener,\n  dirname?: string,\n): Promise<Server> {\n  return new Promise((resolve) => {\n    const socketPath = config.get<string>('socketPath');\n    const port = config.get<number>('port');\n    const hostname = config.get<string>('hostname');\n    const tls = config.get<boolean>('tls');\n\n    logger.info('Creating server', socketPath ? { socketPath } : { port });\n    const server = createServer(callback, socketPath, tls, dirname);\n\n    if (socketPath) {\n      try {\n        unlinkSync(socketPath);\n      } catch {}\n\n      server.listen(socketPath, () => {\n        if (socketPath) {\n          chmodSync(socketPath, '777');\n        }\n\n        logger.info('Server listening', { socketPath });\n        resolve(server);\n      });\n    } else {\n      server.listen(port, hostname, () => {\n        logger.info('Server listening', { port });\n        resolve(server);\n      });\n    }\n  });\n}\n"],"names":["logger","Logger","createServer","callback","socketPath","tls","dirname","createHttpServer","createServerHttps","createServerHttp","options","key","readFileSync","cert","alpListen","config","Promise","resolve","get","port","hostname","info","server","unlinkSync","listen","chmodSync"],"mappings":";;;;;AAOA,MAAMA,MAAM,GAAG,IAAIC,MAAJ,CAAW,YAAX,CAAf,CAAA;;AAIA,MAAMC,YAAY,GAAG,CACnBC,QADmB,EAEnBC,UAFmB,EAGnBC,GAHmB,EAInBC,OAAO,GAAG,EAJS,KAKR;EACX,MAAMC,gBAAgB,GACpB,CAACH,UAAD,IAAeC,GAAf,GAAqBG,cAArB,GAAyCC,cAD3C,CAAA;;EAGA,IAAI,CAACJ,GAAL,EAAU;IACR,OAAOE,gBAAgB,CAACJ,QAAD,CAAvB,CAAA;AACD,GAAA;;AAED,EAAA,MAAMO,OAAO,GAAG;AACdC,IAAAA,GAAG,EAAEC,YAAY,CAAE,CAAEN,EAAAA,OAAQ,aAAZ,CADH;AAEdO,IAAAA,IAAI,EAAED,YAAY,CAAE,CAAA,EAAEN,OAAQ,CAAZ,WAAA,CAAA,CAAA;GAFpB,CAAA;AAKA,EAAA,OAAQC,gBAAD,CAA+CG,OAA/C,EAAwDP,QAAxD,CAAP,CAAA;AACD,CAnBD,CAAA;;AAqBe,SAASW,SAAT,CACbC,MADa,EAEbZ,QAFa,EAGbG,OAHa,EAII;AACjB,EAAA,OAAO,IAAIU,OAAJ,CAAaC,OAAD,IAAa;AAC9B,IAAA,MAAMb,UAAU,GAAGW,MAAM,CAACG,GAAP,CAAmB,YAAnB,CAAnB,CAAA;AACA,IAAA,MAAMC,IAAI,GAAGJ,MAAM,CAACG,GAAP,CAAmB,MAAnB,CAAb,CAAA;AACA,IAAA,MAAME,QAAQ,GAAGL,MAAM,CAACG,GAAP,CAAmB,UAAnB,CAAjB,CAAA;AACA,IAAA,MAAMb,GAAG,GAAGU,MAAM,CAACG,GAAP,CAAoB,KAApB,CAAZ,CAAA;AAEAlB,IAAAA,MAAM,CAACqB,IAAP,CAAY,iBAAZ,EAA+BjB,UAAU,GAAG;AAAEA,MAAAA,UAAAA;AAAF,KAAH,GAAoB;AAAEe,MAAAA,IAAAA;KAA/D,CAAA,CAAA;IACA,MAAMG,MAAM,GAAGpB,YAAY,CAACC,QAAD,EAAWC,UAAX,EAAuBC,GAAvB,EAA4BC,OAA5B,CAA3B,CAAA;;AAEA,IAAA,IAAIF,UAAJ,EAAgB;MACd,IAAI;QACFmB,UAAU,CAACnB,UAAD,CAAV,CAAA;OADF,CAEE,MAAM,EAAE;;AAEVkB,MAAAA,MAAM,CAACE,MAAP,CAAcpB,UAAd,EAA0B,MAAM;AAC9B,QAAA,IAAIA,UAAJ,EAAgB;AACdqB,UAAAA,SAAS,CAACrB,UAAD,EAAa,KAAb,CAAT,CAAA;AACD,SAAA;;AAEDJ,QAAAA,MAAM,CAACqB,IAAP,CAAY,kBAAZ,EAAgC;AAAEjB,UAAAA,UAAAA;SAAlC,CAAA,CAAA;QACAa,OAAO,CAACK,MAAD,CAAP,CAAA;OANF,CAAA,CAAA;AAQD,KAbD,MAaO;AACLA,MAAAA,MAAM,CAACE,MAAP,CAAcL,IAAd,EAAoBC,QAApB,EAA8B,MAAM;AAClCpB,QAAAA,MAAM,CAACqB,IAAP,CAAY,kBAAZ,EAAgC;AAAEF,UAAAA,IAAAA;SAAlC,CAAA,CAAA;QACAF,OAAO,CAACK,MAAD,CAAP,CAAA;OAFF,CAAA,CAAA;AAID,KAAA;AACF,GA5BM,CAAP,CAAA;AA6BD;;;;"}