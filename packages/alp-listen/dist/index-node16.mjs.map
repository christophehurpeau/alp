{"version":3,"file":"index-node16.mjs","sources":["../src/index.ts"],"sourcesContent":["import { chmodSync, unlinkSync, readFileSync } from 'fs';\nimport { createServer as createServerHttp } from 'http';\nimport type { Server, IncomingMessage, ServerResponse } from 'http';\nimport { createServer as createServerHttps } from 'https';\nimport type { Config } from 'alp-node-config';\nimport { Logger } from 'nightingale-logger';\n\nconst logger = new Logger('alp:listen');\n\ntype RequestListener = (req: IncomingMessage, res: ServerResponse) => void;\n\nconst createServer = (\n  callback: RequestListener,\n  socketPath?: string,\n  tls?: boolean,\n  dirname = '',\n): Server => {\n  const createHttpServer =\n    !socketPath && tls ? createServerHttps : createServerHttp;\n\n  if (!tls) {\n    return (createHttpServer as typeof createServerHttps)(callback);\n  }\n\n  const options = {\n    key: readFileSync(`${dirname}/server.key`),\n    cert: readFileSync(`${dirname}/server.crt`),\n  };\n\n  return (createHttpServer as typeof createServerHttps)(options, callback);\n};\n\nexport default function alpListen(\n  config: Config,\n  callback: RequestListener,\n  dirname?: string,\n): Promise<Server> {\n  return new Promise((resolve) => {\n    const socketPath = config.get<string>('socketPath');\n    const port = config.get<number>('port');\n    const hostname = config.get<string>('hostname');\n    const tls = config.get<boolean>('tls');\n\n    logger.info('Creating server', socketPath ? { socketPath } : { port });\n    const server = createServer(callback, socketPath, tls, dirname);\n\n    if (socketPath) {\n      try {\n        unlinkSync(socketPath);\n      } catch {}\n\n      server.listen(socketPath, () => {\n        if (socketPath) {\n          chmodSync(socketPath, '777');\n        }\n\n        logger.info('Server listening', { socketPath });\n        resolve(server);\n      });\n    } else {\n      server.listen(port, hostname, () => {\n        logger.info('Server listening', { port });\n        resolve(server);\n      });\n    }\n  });\n}\n"],"names":["logger","Logger","createServer","callback","socketPath","tls","dirname","createHttpServer","createServerHttps","createServerHttp","options","key","readFileSync","cert","alpListen","config","Promise","resolve","get","port","hostname","info","server","unlinkSync","listen","chmodSync"],"mappings":";;;;;AAOA,MAAMA,MAAM,GAAG,IAAIC,MAAM,CAAC,YAAY,CAAC,CAAA;AAIvC,MAAMC,YAAY,GAAG,CACnBC,QAAyB,EACzBC,UAAmB,EACnBC,GAAa,EACbC,OAAO,GAAG,EAAE,KACD;EACX,MAAMC,gBAAgB,GACpB,CAACH,UAAU,IAAIC,GAAG,GAAGG,cAAiB,GAAGC,cAAgB,CAAA;EAE3D,IAAI,CAACJ,GAAG,EAAE;IACR,OAAQE,gBAAgB,CAA8BJ,QAAQ,CAAC,CAAA;AACjE,GAAA;AAEA,EAAA,MAAMO,OAAO,GAAG;AACdC,IAAAA,GAAG,EAAEC,YAAY,CAAE,CAAEN,EAAAA,OAAQ,aAAY,CAAC;AAC1CO,IAAAA,IAAI,EAAED,YAAY,CAAE,CAAA,EAAEN,OAAQ,CAAY,WAAA,CAAA,CAAA;GAC3C,CAAA;AAED,EAAA,OAAQC,gBAAgB,CAA8BG,OAAO,EAAEP,QAAQ,CAAC,CAAA;AAC1E,CAAC,CAAA;AAEc,SAASW,SAAS,CAC/BC,MAAc,EACdZ,QAAyB,EACzBG,OAAgB,EACC;AACjB,EAAA,OAAO,IAAIU,OAAO,CAAEC,OAAO,IAAK;AAC9B,IAAA,MAAMb,UAAU,GAAGW,MAAM,CAACG,GAAG,CAAS,YAAY,CAAC,CAAA;AACnD,IAAA,MAAMC,IAAI,GAAGJ,MAAM,CAACG,GAAG,CAAS,MAAM,CAAC,CAAA;AACvC,IAAA,MAAME,QAAQ,GAAGL,MAAM,CAACG,GAAG,CAAS,UAAU,CAAC,CAAA;AAC/C,IAAA,MAAMb,GAAG,GAAGU,MAAM,CAACG,GAAG,CAAU,KAAK,CAAC,CAAA;AAEtClB,IAAAA,MAAM,CAACqB,IAAI,CAAC,iBAAiB,EAAEjB,UAAU,GAAG;AAAEA,MAAAA,UAAAA;AAAW,KAAC,GAAG;AAAEe,MAAAA,IAAAA;AAAK,KAAC,CAAC,CAAA;IACtE,MAAMG,MAAM,GAAGpB,YAAY,CAACC,QAAQ,EAAEC,UAAU,EAAEC,GAAG,EAAEC,OAAO,CAAC,CAAA;AAE/D,IAAA,IAAIF,UAAU,EAAE;MACd,IAAI;QACFmB,UAAU,CAACnB,UAAU,CAAC,CAAA;OACvB,CAAC,MAAM,EAAC;AAETkB,MAAAA,MAAM,CAACE,MAAM,CAACpB,UAAU,EAAE,MAAM;AAC9B,QAAA,IAAIA,UAAU,EAAE;AACdqB,UAAAA,SAAS,CAACrB,UAAU,EAAE,KAAK,CAAC,CAAA;AAC9B,SAAA;AAEAJ,QAAAA,MAAM,CAACqB,IAAI,CAAC,kBAAkB,EAAE;AAAEjB,UAAAA,UAAAA;AAAW,SAAC,CAAC,CAAA;QAC/Ca,OAAO,CAACK,MAAM,CAAC,CAAA;AACjB,OAAC,CAAC,CAAA;AACJ,KAAC,MAAM;AACLA,MAAAA,MAAM,CAACE,MAAM,CAACL,IAAI,EAAEC,QAAQ,EAAE,MAAM;AAClCpB,QAAAA,MAAM,CAACqB,IAAI,CAAC,kBAAkB,EAAE;AAAEF,UAAAA,IAAAA;AAAK,SAAC,CAAC,CAAA;QACzCF,OAAO,CAACK,MAAM,CAAC,CAAA;AACjB,OAAC,CAAC,CAAA;AACJ,KAAA;AACF,GAAC,CAAC,CAAA;AACJ;;;;"}