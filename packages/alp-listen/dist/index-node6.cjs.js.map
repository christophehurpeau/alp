{"version":3,"file":"index-node6.cjs.js","sources":["../src/index.js"],"sourcesContent":["import { chmodSync, unlinkSync, readFileSync } from 'fs';\nimport Logger from 'nightingale-logger/src';\n\nconst logger = new Logger('alp:listen');\n\n/**\n * @param {string} dirname for tls server, dirname of the server.key and server.crt\n * @returns {Function}\n */\nexport default function alpListen(dirname) {\n  return app =>\n    new Promise(resolve => {\n      const socketPath = app.config.get('socketPath');\n      const port = app.config.get('port');\n      const hostname = app.config.get('hostname');\n      const tls = app.config.get('tls');\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      const createServer = require(!socketPath && tls ? 'https' : 'http').createServer;\n\n      logger.info('Creating server', socketPath ? { socketPath } : { port }, {\n        [socketPath ? 'socketPath' : 'port']: ['yellow'],\n      });\n\n      const server = (() => {\n        if (!tls) {\n          return createServer(app.callback());\n        }\n\n        const options = {\n          key: readFileSync(`${dirname}/server.key`),\n          cert: readFileSync(`${dirname}/server.crt`),\n        };\n\n        return createServer(options, app.callback());\n      })();\n\n      if (socketPath) {\n        try {\n          unlinkSync(socketPath);\n        } catch (err) {}\n\n        server.listen(socketPath, () => {\n          if (socketPath) {\n            chmodSync(socketPath, '777');\n          }\n\n          logger.info('Server listening', { socketPath }, { socketPath: ['yellow'] });\n          resolve(server);\n        });\n      } else {\n        server.listen(port, hostname, () => {\n          logger.info('Server listening', { port }, { port: ['yellow'] });\n          resolve(server);\n        });\n      }\n    });\n}\n"],"names":["logger","Logger","alpListen","dirname","app","Promise","resolve","socketPath","config","get","port","hostname","tls","createServer","require","info","server","callback","options","readFileSync","err","listen"],"mappings":";;;;;;;AAGA,MAAMA,SAAS,IAAIC,MAAJ,CAAW,YAAX,CAAf;;;;;;AAMA,AAAe,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;SAClCC,OACL,IAAIC,OAAJ,CAAYC,WAAW;UACfC,aAAaH,IAAII,MAAJ,CAAWC,GAAX,CAAe,YAAf,CAAnB;UACMC,OAAON,IAAII,MAAJ,CAAWC,GAAX,CAAe,MAAf,CAAb;UACME,WAAWP,IAAII,MAAJ,CAAWC,GAAX,CAAe,UAAf,CAAjB;UACMG,MAAMR,IAAII,MAAJ,CAAWC,GAAX,CAAe,KAAf,CAAZ;;UAEMI,eAAeC,QAAQ,CAACP,UAAD,IAAeK,GAAf,GAAqB,OAArB,GAA+B,MAAvC,EAA+CC,YAApE;;WAEOE,IAAP,CAAY,iBAAZ,EAA+BR,aAAa,EAAEA,UAAF,EAAb,GAA8B,EAAEG,IAAF,EAA7D,EAAuE;OACpEH,aAAa,YAAb,GAA4B,MAA7B;KADF;;UAIMS,SAAS,CAAC,MAAM;UAChB,CAACJ,GAAL,EAAU;eACDC,aAAaT,IAAIa,QAAJ,EAAb,CAAP;;;YAGIC,UAAU;aACTC,gBAAc,GAAEhB,OAAQ,aAAxB,CADS;cAERgB,gBAAc,GAAEhB,OAAQ,aAAxB;OAFR;;aAKOU,aAAaK,OAAb,EAAsBd,IAAIa,QAAJ,EAAtB,CAAP;KAVa,GAAf;;QAaIV,UAAJ,EAAgB;UACV;sBACSA,UAAX;OADF,CAEE,OAAOa,GAAP,EAAY;;aAEPC,MAAP,CAAcd,UAAd,EAA0B,MAAM;YAC1BA,UAAJ,EAAgB;uBACJA,UAAV,EAAsB,KAAtB;;;eAGKQ,IAAP,CAAY,kBAAZ,EAAgC,EAAER,UAAF,EAAhC,EAAgD,EAAEA,sBAAF,EAAhD;gBACQS,MAAR;OANF;KALF,MAaO;aACEK,MAAP,CAAcX,IAAd,EAAoBC,QAApB,EAA8B,MAAM;eAC3BI,IAAP,CAAY,kBAAZ,EAAgC,EAAEL,IAAF,EAAhC,EAA0C,EAAEA,gBAAF,EAA1C;gBACQM,MAAR;OAFF;;GAvCJ,CADF;;;;;"}