{"version":3,"file":"index-node12.mjs","sources":["../src/index.ts"],"sourcesContent":["import { chmodSync, unlinkSync, readFileSync } from 'fs';\nimport type { Server, IncomingMessage, ServerResponse } from 'http';\nimport type { Config } from 'alp-node-config';\nimport Logger from 'nightingale-logger';\n\nconst logger = new Logger('alp:listen');\n\ntype RequestListener = (req: IncomingMessage, res: ServerResponse) => void;\n\nconst createServer = (\n  callback: RequestListener,\n  socketPath?: string,\n  tls?: boolean,\n  dirname?: string,\n): Server => {\n  const createServer =\n    !socketPath && tls\n      ? // eslint-disable-next-line  import/no-dynamic-require\n        require('https').createServer\n      : // eslint-disable-next-line  import/no-dynamic-require\n        require('http').createServer;\n\n  if (!tls) {\n    return createServer(callback);\n  }\n\n  const options = {\n    key: readFileSync(`${dirname}/server.key`),\n    cert: readFileSync(`${dirname}/server.crt`),\n  };\n\n  return createServer(options, callback);\n};\n\nexport default function alpListen(\n  config: Config,\n  callback: RequestListener,\n  dirname?: string,\n): Promise<Server> {\n  return new Promise((resolve) => {\n    const socketPath = config.get<string>('socketPath');\n    const port = config.get<number>('port');\n    const hostname = config.get<string>('hostname');\n    const tls = config.get<boolean>('tls');\n\n    logger.info('Creating server', socketPath ? { socketPath } : { port });\n    const server = createServer(callback, socketPath, tls, dirname);\n\n    if (socketPath) {\n      try {\n        unlinkSync(socketPath);\n      } catch {}\n\n      server.listen(socketPath, () => {\n        if (socketPath) {\n          chmodSync(socketPath, '777');\n        }\n\n        logger.info('Server listening', { socketPath });\n        resolve(server);\n      });\n    } else {\n      server.listen(port, hostname, () => {\n        logger.info('Server listening', { port });\n        resolve(server);\n      });\n    }\n  });\n}\n"],"names":["logger","Logger","createServer","callback","socketPath","tls","dirname","require","options","key","readFileSync","cert","alpListen","config","Promise","resolve","get","port","hostname","info","server","unlinkSync","listen","chmodSync"],"mappings":";;;AAKA,MAAMA,MAAM,GAAG,IAAIC,MAAJ,CAAW,YAAX,CAAf;;AAIA,MAAMC,YAAY,GAAG,CACnBC,QADmB,EAEnBC,UAFmB,EAGnBC,GAHmB,EAInBC,OAJmB,KAKR;AACX,QAAMJ,YAAY,GAChB,CAACE,UAAD,IAAeC,GAAf;AAEIE,EAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBL,YAFrB;AAIIK,EAAAA,OAAO,CAAC,MAAD,CAAP,CAAgBL,YALtB;;AAOA,MAAI,CAACG,GAAL,EAAU;AACR,WAAOH,YAAY,CAACC,QAAD,CAAnB;AACD;;AAED,QAAMK,OAAO,GAAG;AACdC,IAAAA,GAAG,EAAEC,YAAY,CAAE,GAAEJ,OAAQ,aAAZ,CADH;AAEdK,IAAAA,IAAI,EAAED,YAAY,CAAE,GAAEJ,OAAQ,aAAZ;AAFJ,GAAhB;AAKA,SAAOJ,YAAY,CAACM,OAAD,EAAUL,QAAV,CAAnB;AACD,CAvBD;;AAyBe,SAASS,SAAT,CACbC,MADa,EAEbV,QAFa,EAGbG,OAHa,EAII;AACjB,SAAO,IAAIQ,OAAJ,CAAaC,OAAD,IAAa;AAC9B,UAAMX,UAAU,GAAGS,MAAM,CAACG,GAAP,CAAmB,YAAnB,CAAnB;AACA,UAAMC,IAAI,GAAGJ,MAAM,CAACG,GAAP,CAAmB,MAAnB,CAAb;AACA,UAAME,QAAQ,GAAGL,MAAM,CAACG,GAAP,CAAmB,UAAnB,CAAjB;AACA,UAAMX,GAAG,GAAGQ,MAAM,CAACG,GAAP,CAAoB,KAApB,CAAZ;AAEAhB,IAAAA,MAAM,CAACmB,IAAP,CAAY,iBAAZ,EAA+Bf,UAAU,GAAG;AAAEA,MAAAA;AAAF,KAAH,GAAoB;AAAEa,MAAAA;AAAF,KAA7D;AACA,UAAMG,MAAM,GAAGlB,YAAY,CAACC,QAAD,EAAWC,UAAX,EAAuBC,GAAvB,EAA4BC,OAA5B,CAA3B;;AAEA,QAAIF,UAAJ,EAAgB;AACd,UAAI;AACFiB,QAAAA,UAAU,CAACjB,UAAD,CAAV;AACD,OAFD,CAEE,MAAM;;AAERgB,MAAAA,MAAM,CAACE,MAAP,CAAclB,UAAd,EAA0B,MAAM;AAC9B,YAAIA,UAAJ,EAAgB;AACdmB,UAAAA,SAAS,CAACnB,UAAD,EAAa,KAAb,CAAT;AACD;;AAEDJ,QAAAA,MAAM,CAACmB,IAAP,CAAY,kBAAZ,EAAgC;AAAEf,UAAAA;AAAF,SAAhC;AACAW,QAAAA,OAAO,CAACK,MAAD,CAAP;AACD,OAPD;AAQD,KAbD,MAaO;AACLA,MAAAA,MAAM,CAACE,MAAP,CAAcL,IAAd,EAAoBC,QAApB,EAA8B,MAAM;AAClClB,QAAAA,MAAM,CAACmB,IAAP,CAAY,kBAAZ,EAAgC;AAAEF,UAAAA;AAAF,SAAhC;AACAF,QAAAA,OAAO,CAACK,MAAD,CAAP;AACD,OAHD;AAID;AACF,GA5BM,CAAP;AA6BD;;;;"}