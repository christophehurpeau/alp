{"version":3,"file":"index-node12-dev.cjs.js","sources":["../src/index.ts"],"sourcesContent":["import { chmodSync, unlinkSync, readFileSync } from 'fs';\nimport { createServer as createServerHttp } from 'http';\nimport type { Server, IncomingMessage, ServerResponse } from 'http';\nimport { createServer as createServerHttps } from 'https';\nimport type { Config } from 'alp-node-config';\nimport Logger from 'nightingale-logger';\n\nconst logger = new Logger('alp:listen');\n\ntype RequestListener = (req: IncomingMessage, res: ServerResponse) => void;\n\nconst createServer = (\n  callback: RequestListener,\n  socketPath?: string,\n  tls?: boolean,\n  dirname = '',\n): Server => {\n  const createServer =\n    !socketPath && tls ? createServerHttps : createServerHttp;\n\n  if (!tls) {\n    return createServer(callback);\n  }\n\n  const options = {\n    key: readFileSync(`${dirname}/server.key`),\n    cert: readFileSync(`${dirname}/server.crt`),\n  };\n\n  return (createServer as typeof createServerHttps)(options, callback);\n};\n\nexport default function alpListen(\n  config: Config,\n  callback: RequestListener,\n  dirname?: string,\n): Promise<Server> {\n  return new Promise((resolve) => {\n    const socketPath = config.get<string>('socketPath');\n    const port = config.get<number>('port');\n    const hostname = config.get<string>('hostname');\n    const tls = config.get<boolean>('tls');\n\n    logger.info('Creating server', socketPath ? { socketPath } : { port });\n    const server = createServer(callback, socketPath, tls, dirname);\n\n    if (socketPath) {\n      try {\n        unlinkSync(socketPath);\n      } catch {}\n\n      server.listen(socketPath, () => {\n        if (socketPath) {\n          chmodSync(socketPath, '777');\n        }\n\n        logger.info('Server listening', { socketPath });\n        resolve(server);\n      });\n    } else {\n      server.listen(port, hostname, () => {\n        logger.info('Server listening', { port });\n        resolve(server);\n      });\n    }\n  });\n}\n"],"names":["logger","Logger","createServer","callback","socketPath","tls","dirname","createServerHttps","createServerHttp","options","key","readFileSync","cert","alpListen","config","Promise","resolve","get","port","hostname","info","server","unlinkSync","listen","chmodSync"],"mappings":";;;;;;;;;;;;;AAOA,MAAMA,MAAM,GAAG,IAAIC,eAAJ,CAAW,YAAX,CAAf;;AAIA,MAAMC,YAAY,GAAG,CACnBC,QADmB,EAEnBC,UAFmB,EAGnBC,GAHmB,EAInBC,OAAO,GAAG,EAJS,KAKR;AACX,QAAMJ,YAAY,GAChB,CAACE,UAAD,IAAeC,GAAf,GAAqBE,kBAArB,GAAyCC,iBAD3C;;AAGA,MAAI,CAACH,GAAL,EAAU;AACR,WAAOH,YAAY,CAACC,QAAD,CAAnB;AACD;;AAED,QAAMM,OAAO,GAAG;AACdC,IAAAA,GAAG,EAAEC,eAAY,CAAE,GAAEL,OAAQ,aAAZ,CADH;AAEdM,IAAAA,IAAI,EAAED,eAAY,CAAE,GAAEL,OAAQ,aAAZ;AAFJ,GAAhB;AAKA,SAAQJ,YAAD,CAA2CO,OAA3C,EAAoDN,QAApD,CAAP;AACD,CAnBD;;AAqBe,SAASU,SAAT,CACbC,MADa,EAEbX,QAFa,EAGbG,OAHa,EAII;AACjB,SAAO,IAAIS,OAAJ,CAAaC,OAAD,IAAa;AAC9B,UAAMZ,UAAU,GAAGU,MAAM,CAACG,GAAP,CAAmB,YAAnB,CAAnB;AACA,UAAMC,IAAI,GAAGJ,MAAM,CAACG,GAAP,CAAmB,MAAnB,CAAb;AACA,UAAME,QAAQ,GAAGL,MAAM,CAACG,GAAP,CAAmB,UAAnB,CAAjB;AACA,UAAMZ,GAAG,GAAGS,MAAM,CAACG,GAAP,CAAoB,KAApB,CAAZ;AAEAjB,IAAAA,MAAM,CAACoB,IAAP,CAAY,iBAAZ,EAA+BhB,UAAU,GAAG;AAAEA,MAAAA;AAAF,KAAH,GAAoB;AAAEc,MAAAA;AAAF,KAA7D;AACA,UAAMG,MAAM,GAAGnB,YAAY,CAACC,QAAD,EAAWC,UAAX,EAAuBC,GAAvB,EAA4BC,OAA5B,CAA3B;;AAEA,QAAIF,UAAJ,EAAgB;AACd,UAAI;AACFkB,QAAAA,aAAU,CAAClB,UAAD,CAAV;AACD,OAFD,CAEE,MAAM;;AAERiB,MAAAA,MAAM,CAACE,MAAP,CAAcnB,UAAd,EAA0B,MAAM;AAC9B,YAAIA,UAAJ,EAAgB;AACdoB,UAAAA,YAAS,CAACpB,UAAD,EAAa,KAAb,CAAT;AACD;;AAEDJ,QAAAA,MAAM,CAACoB,IAAP,CAAY,kBAAZ,EAAgC;AAAEhB,UAAAA;AAAF,SAAhC;AACAY,QAAAA,OAAO,CAACK,MAAD,CAAP;AACD,OAPD;AAQD,KAbD,MAaO;AACLA,MAAAA,MAAM,CAACE,MAAP,CAAcL,IAAd,EAAoBC,QAApB,EAA8B,MAAM;AAClCnB,QAAAA,MAAM,CAACoB,IAAP,CAAY,kBAAZ,EAAgC;AAAEF,UAAAA;AAAF,SAAhC;AACAF,QAAAA,OAAO,CAACK,MAAD,CAAP;AACD,OAHD;AAID;AACF,GA5BM,CAAP;AA6BD;;;;"}