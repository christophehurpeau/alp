{"version":3,"sources":["../src/index.js"],"names":["Ibex","config","errors","params","language","translate","contentLoaded","init","initWebApp","redirect","default","newController","AlpBrowser","path","options","global","initialBrowserContext","context","state","use","moduleDescriptor","data","Object","create","assign","then","render","on","load","url","env"],"mappings":";;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,QAAQC,UAAjB,EAA6BC,QAA7B;;AAEA,SAASC,WAAWC,aAApB,QAAyC,gBAAzC;;IAEqBC,U;;;AAInB;;;;AAIA,wBAAsC;AAAA,QAA1BC,IAA0B,yDAAnB,GAAmB;AAAA,QAAdC,OAAc,yDAAJ,EAAI;;AAAA;;AAAA;;AAEpC,UAAKD,IAAL,GAAYA,IAAZ;;AAEA,QAAIE,OAAOC,qBAAX,EAAkC;AAChC,YAAKC,OAAL,CAAaC,KAAb,GAAqBH,OAAOC,qBAAP,CAA6BE,KAAlD;AACD;AANmC;AAOrC;;;;;;;;;;;uBAGOjB,OAAO,SAAP,EAAkB,IAAlB,C;;;AACNE,uBAAO,IAAP;AACAC,yBAAS,IAAT;;uBACMC,UAAU,UAAV,EAAsB,IAAtB,C;;;;;;;;;;;;;;;;;;kCAOM;AACZ,WAAKc,GAAL,CAASjB,MAAT;AACD;;;kCAEakB,gB,EAAkBC,I,EAAM;AAAA;;AACpC,UAAMJ,UAAUK,OAAOC,MAAP,CAAc,KAAKN,OAAnB,CAAhB;AACAK,aAAOE,MAAP,CAAcP,OAAd,EAAuBF,OAAOC,qBAA9B;AACA,aAAOC,QAAQC,KAAf;;AAEA,aAAOZ,gBACJmB,IADI,CACC;AAAA,eACJR,QAAQS,MAAR,CAAeN,gBAAf,EAAiCC,IAAjC,EAAuC,IAAvC,CADI;AAAA,OADD,EAGFI,IAHE,CAGG,YAAM;AACZ,eAAKE,EAAL,CAAQ,UAAR,EAAoBlB,QAApB;AACAD,mBAAW;AAAA,iBAAO,OAAKoB,IAAL,CAAUC,GAAV,CAAP;AAAA,SAAX;AACD,OANI,CAAP;AAOD;;;wBApBiB;AAChB,aAAO,KAAKC,GAAZ;AACD;;;;EA1BqC9B,I;;eAAnBY,U","file":"index.js","sourcesContent":["import Ibex from 'ibex';\nimport config from 'alp-config';\nimport errors from 'alp-errors-browser';\nimport params from 'alp-params';\nimport language from 'alp-language';\nimport translate from 'alp-translate';\nimport contentLoaded from 'content-loaded';\nimport { init as initWebApp, redirect } from 'alauda/src/web-app';\n\nexport { default as newController } from 'alp-controller';\n\nexport default class AlpBrowser extends Ibex {\n  path: string;\n  appVersion: string;\n\n  /**\n   * @param {string} [path='/']\n   * @param {Object} [options]\n   */\n  constructor(path = '/', options = {}) {\n    super();\n    this.path = path;\n\n    if (global.initialBrowserContext) {\n      this.context.state = global.initialBrowserContext.state;\n    }\n  }\n\n  async init() {\n    await config('/config')(this);\n    params(this);\n    language(this);\n    await translate('/locales')(this);\n  }\n\n  get environment() {\n    return this.env;\n  }\n\n  catchErrors() {\n    this.use(errors);\n  }\n\n  initialRender(moduleDescriptor, data) {\n    const context = Object.create(this.context);\n    Object.assign(context, global.initialBrowserContext);\n    delete context.state;\n\n    return contentLoaded()\n      .then(() => (\n        context.render(moduleDescriptor, data, true)\n      )).then(() => {\n        this.on('redirect', redirect);\n        initWebApp(url => this.load(url));\n      });\n  }\n}\n"]}