{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,IAAP,MAAiB,MAAjB;AACA,OAAO,MAAP,MAAmB,YAAnB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AACA,OAAO,MAAP,MAAmB,YAAnB;AACA,OAAO,QAAP,MAAqB,cAArB;AACA,OAAO,SAAP,MAAsB,eAAtB;AACA,OAAO,aAAP,MAA0B,gBAA1B;AACA,SAAS,QAAQ,UAAjB,EAA6B,QAA7B;;AAEA,SAAS,WAAW,aAApB,QAAyC,gBAAzC;;IAEqB,U;;;AAInB;;;;AAIA,wBAAsC;AAAA,QAA1B,IAA0B,yDAAnB,GAAmB;AAAA,QAAd,OAAc,yDAAJ,EAAI;;AAAA;;AAAA;;AAEpC,UAAK,IAAL,GAAY,IAAZ;;AAFoC,iBAEpC,MAAK,IAF+B;AAAA,8GAEpC,MAAK,IAF+B;AAAA;;AAIpC,QAAI,OAAO,qBAAX,EAAkC;AAChC,YAAK,OAAL,CAAa,KAAb,GAAqB,OAAO,qBAAP,CAA6B,KAAlD;AACD;AANmC;AAOrC;;;;;;;;;;;uBAGO,OAAO,SAAP,EAAkB,IAAlB,C;;;AACN,uBAAO,IAAP;AACA,yBAAS,IAAT;;uBACM,UAAU,UAAV,EAAsB,IAAtB,C;;;;;;;;;;;;;;;;;;kCAOM;AACZ,WAAK,GAAL,CAAS,MAAT;AACD;;;kCAEa,gB,EAAkB,I,EAAM;AAAA;;AACpC,UAAM,UAAU,OAAO,MAAP,CAAc,KAAK,OAAnB,CAAhB;AACA,aAAO,MAAP,CAAc,OAAd,EAAuB,OAAO,qBAA9B;AACA,aAAO,QAAQ,KAAf;;AAEA,aAAO,gBACJ,IADI,CACC;AAAA,eACJ,QAAQ,MAAR,CAAe,gBAAf,EAAiC,IAAjC,EAAuC,IAAvC,CADI;AAAA,OADD,EAGF,IAHE,CAGG,YAAM;AACZ,eAAK,EAAL,CAAQ,UAAR,EAAoB,QAApB;AACA,mBAAW;AAAA,iBAAO,OAAK,IAAL,CAAU,GAAV,CAAP;AAAA,SAAX;AACD,OANI,CAAP;AAOD;;;wBApBiB;AAChB,aAAO,KAAK,GAAZ;AACD;;;;EA1BqC,I;;eAAnB,U","file":"index.js","sourcesContent":["import Ibex from 'ibex';\nimport config from 'alp-config';\nimport errors from 'alp-errors-browser';\nimport params from 'alp-params';\nimport language from 'alp-language';\nimport translate from 'alp-translate';\nimport contentLoaded from 'content-loaded';\nimport { init as initWebApp, redirect } from 'alauda/src/web-app';\n\nexport { default as newController } from 'alp-controller';\n\nexport default class AlpBrowser extends Ibex {\n  path: string;\n  appVersion: string;\n\n  /**\n   * @param {string} [path='/']\n   * @param {Object} [options]\n   */\n  constructor(path = '/', options = {}) {\n    super();\n    this.path = path;\n\n    if (global.initialBrowserContext) {\n      this.context.state = global.initialBrowserContext.state;\n    }\n  }\n\n  async init() {\n    await config('/config')(this);\n    params(this);\n    language(this);\n    await translate('/locales')(this);\n  }\n\n  get environment() {\n    return this.env;\n  }\n\n  catchErrors() {\n    this.use(errors);\n  }\n\n  initialRender(moduleDescriptor, data) {\n    const context = Object.create(this.context);\n    Object.assign(context, global.initialBrowserContext);\n    delete context.state;\n\n    return contentLoaded()\n      .then(() => (\n        context.render(moduleDescriptor, data, true)\n      )).then(() => {\n        this.on('redirect', redirect);\n        initWebApp(url => this.load(url));\n      });\n  }\n}\n"]}