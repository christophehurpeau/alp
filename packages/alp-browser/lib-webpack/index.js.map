{"version":3,"sources":["../src/index.js"],"names":["Ibex","config","errors","params","language","translate","contentLoaded","init","initWebApp","redirect","Logger","Config","default","newController","logger","AlpBrowser","path","version","window","VERSION","appVersion","global","initialBrowserContext","context","state","use","moduleDescriptor","data","Object","create","assign","then","render","on","load","url","fn","success","catch","error","err","env"],"mappings":";;;;;;;;;;AAAA;AACA,OAAOA,IAAP;AACA,OAAOC,MAAP;AACA,OAAOC,MAAP;AACA,OAAOC,MAAP;AACA,OAAOC,QAAP;AACA,OAAOC,SAAP;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,QAAQC,UAAjB,EAA6BC,QAA7B;AACA,OAAOC,MAAP;;AAEA,SAASC,MAAT;AACA,SAASC,WAAWC,aAApB;;AAEA,IAAMC,SAAS,IAAIJ,MAAJ,CAAW,KAAX,CAAf;;IAMqBK,U;;;AAInB,wBAAwE;AAAA,QAA5DC,IAA4D,uEAArD,GAAqD;;AAAA;AAAA,4BAA9CC,OAA8C;AAAA,QAA9CA,OAA8C,gCAApCC,OAAOC,OAA6B;;AAAA;;AAAA;;AAEtE,UAAKH,IAAL,GAAYA,IAAZ;AACA,UAAKI,UAAL,GAAkBF,OAAOC,OAAzB;;AAEA,QAAIE,OAAOC,qBAAX,EAAkC;AAChC,YAAKC,OAAL,CAAaC,KAAb,GAAqBH,OAAOC,qBAAP,CAA6BE,KAAlD;AACD;AAPqE;AAQvE;;;;;;;;;;;uBAGOvB,OAAO,SAAP,EAAkB,IAAlB,C;;;AACNE,uBAAO,IAAP;AACAC,yBAAS,IAAT;;uBACMC,UAAU,UAAV,EAAsB,IAAtB,C;;;;;;;;;;;;;;;;;;kCAOM;AACZ,WAAKoB,GAAL,CAASvB,MAAT;AACD;;;kCAEawB,gB,EAAkBC,I,EAAM;AAAA;;AACpC,UAAMJ,UAAUK,OAAOC,MAAP,CAAc,KAAKN,OAAnB,CAAhB;AACAK,aAAOE,MAAP,CAAcP,OAAd,EAAuBF,OAAOC,qBAA9B;AACA,aAAOC,QAAQC,KAAf;;AAEA,aAAOlB,gBACJyB,IADI,CACC;AAAA,eACJR,QAAQS,MAAR,CAAeN,gBAAf,EAAiCC,IAAjC,EAAuC,IAAvC,CADI;AAAA,OADD,EAGFI,IAHE,CAGG,YAAM;AACZ,eAAKE,EAAL,CAAQ,UAAR,EAAoBxB,QAApB;AACAD,mBAAW;AAAA,iBAAO,OAAK0B,IAAL,CAAUC,GAAV,CAAP;AAAA,SAAX;AACD,OANI,CAAP;AAOD;;;0BAEKC,E,EAAc;AAClBA,WACGL,IADH,CACQ;AAAA,eAAMjB,OAAOuB,OAAP,CAAe,SAAf,CAAN;AAAA,OADR,EAEGC,KAFH,CAES;AAAA,eAAOxB,OAAOyB,KAAP,CAAa,YAAb,EAA2B,EAAEC,QAAF,EAA3B,CAAP;AAAA,OAFT;AAGD;;;wBA1BiB;AAChB,aAAO,KAAKC,GAAZ;AACD;;;;EAvBqCzC,I;;eAAnBe,U","file":"index.js","sourcesContent":["/* global window */\nimport Ibex from 'ibex/src';\nimport config from 'alp-config/src';\nimport errors from 'alp-errors-browser/src';\nimport params from 'alp-params/src';\nimport language from 'alp-language/src';\nimport translate from 'alp-translate/src';\nimport contentLoaded from 'content-loaded';\nimport { init as initWebApp, redirect } from 'alauda/src/web-app';\nimport Logger from 'nightingale-logger/src';\n\nexport { Config } from 'alp-config/src';\nexport { default as newController } from 'alp-controller/src';\n\nconst logger = new Logger('alp');\n\ntype OptionsType = {\n  version: ?string, // default to window.VERSION\n};\n\nexport default class AlpBrowser extends Ibex {\n  path: string;\n  appVersion: string;\n\n  constructor(path = '/', { version = window.VERSION }: OptionsType = {}) {\n    super();\n    this.path = path;\n    this.appVersion = window.VERSION;\n\n    if (global.initialBrowserContext) {\n      this.context.state = global.initialBrowserContext.state;\n    }\n  }\n\n  async init() {\n    await config('/config')(this);\n    params(this);\n    language(this);\n    await translate('/locales')(this);\n  }\n\n  get environment() {\n    return this.env;\n  }\n\n  catchErrors() {\n    this.use(errors);\n  }\n\n  initialRender(moduleDescriptor, data) {\n    const context = Object.create(this.context);\n    Object.assign(context, global.initialBrowserContext);\n    delete context.state;\n\n    return contentLoaded()\n      .then(() => (\n        context.render(moduleDescriptor, data, true)\n      )).then(() => {\n        this.on('redirect', redirect);\n        initWebApp(url => this.load(url));\n      });\n  }\n\n  start(fn: Function) {\n    fn()\n      .then(() => logger.success('started'))\n      .catch(err => logger.error('start fail', { err }));\n  }\n}\n"]}