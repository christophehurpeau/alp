{"version":3,"sources":["../src/index.js"],"names":["Ibex","config","errors","params","language","translate","contentLoaded","init","initWebApp","redirect","default","newController","AlpBrowser","constructor","path","options","global","initialBrowserContext","context","state","environment","env","catchErrors","use","initialRender","moduleDescriptor","data","Object","create","assign","then","render","on","url","load"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,QAAQC,UAAjB,EAA6BC,QAA7B;;AAEA,SAASC,WAAWC,aAApB,QAAyC,gBAAzC;;AAEA,eAAe,MAAMC,UAAN,SAAyBZ,IAAzB,CAA8B;;AAI3C;;;;AAIAa,gBAAsC;AAAA,QAA1BC,IAA0B,yDAAnB,GAAmB;AAAA,QAAdC,OAAc,yDAAJ,EAAI;;AACpC;AACA,SAAKD,IAAL,GAAYA,IAAZ;;AAEA,QAAIE,OAAOC,qBAAX,EAAkC;AAChC,WAAKC,OAAL,CAAaC,KAAb,GAAqBH,OAAOC,qBAAP,CAA6BE,KAAlD;AACD;AACF;;AAEKZ,MAAN,GAAa;AAAA;;AAAA;AACX,YAAMN,OAAO,SAAP,QAAN;AACAE;AACAC;AACA,YAAMC,UAAU,UAAV,QAAN;AAJW;AAKZ;;AAED,MAAIe,WAAJ,GAAkB;AAChB,WAAO,KAAKC,GAAZ;AACD;;AAEDC,gBAAc;AACZ,SAAKC,GAAL,CAASrB,MAAT;AACD;;AAEDsB,gBAAcC,gBAAd,EAAgCC,IAAhC,EAAsC;AACpC,QAAMR,UAAUS,OAAOC,MAAP,CAAc,KAAKV,OAAnB,CAAhB;AACAS,WAAOE,MAAP,CAAcX,OAAd,EAAuBF,OAAOC,qBAA9B;AACA,WAAOC,QAAQC,KAAf;;AAEA,WAAOb,gBACJwB,IADI,CACC,MACJZ,QAAQa,MAAR,CAAeN,gBAAf,EAAiCC,IAAjC,EAAuC,IAAvC,CAFG,EAGFI,IAHE,CAGG,MAAM;AACZ,WAAKE,EAAL,CAAQ,UAAR,EAAoBvB,QAApB;AACAD,iBAAWyB,OAAO,KAAKC,IAAL,CAAUD,GAAV,CAAlB;AACD,KANI,CAAP;AAOD;AA5C0C","file":"index.js","sourcesContent":["import Ibex from 'ibex';\nimport config from 'alp-config';\nimport errors from 'alp-errors-browser';\nimport params from 'alp-params';\nimport language from 'alp-language';\nimport translate from 'alp-translate';\nimport contentLoaded from 'content-loaded';\nimport { init as initWebApp, redirect } from 'alauda/src/web-app';\n\nexport { default as newController } from 'alp-controller';\n\nexport default class AlpBrowser extends Ibex {\n  path: string;\n  appVersion: string;\n\n  /**\n   * @param {string} [path='/']\n   * @param {Object} [options]\n   */\n  constructor(path = '/', options = {}) {\n    super();\n    this.path = path;\n\n    if (global.initialBrowserContext) {\n      this.context.state = global.initialBrowserContext.state;\n    }\n  }\n\n  async init() {\n    await config('/config')(this);\n    params(this);\n    language(this);\n    await translate('/locales')(this);\n  }\n\n  get environment() {\n    return this.env;\n  }\n\n  catchErrors() {\n    this.use(errors);\n  }\n\n  initialRender(moduleDescriptor, data) {\n    const context = Object.create(this.context);\n    Object.assign(context, global.initialBrowserContext);\n    delete context.state;\n\n    return contentLoaded()\n      .then(() => (\n        context.render(moduleDescriptor, data, true)\n      )).then(() => {\n        this.on('redirect', redirect);\n        initWebApp(url => this.load(url));\n      });\n  }\n}\n"]}