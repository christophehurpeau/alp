{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;AAAA,OAAO,IAAP,MAAiB,MAAjB;AACA,OAAO,MAAP,MAAmB,YAAnB;AACA,OAAO,MAAP,MAAmB,oBAAnB;AACA;AACA,OAAO,QAAP,MAAqB,cAArB;AACA,OAAO,SAAP,MAAsB,eAAtB;AACA,OAAO,MAAP,MAAmB,YAAnB;AACA,OAAO,aAAP,MAA0B,gBAA1B;AACA,SAAS,QAAQ,UAAjB,EAA6B,QAA7B;;AAEA,SAAS,WAAW,aAApB,QAAyC,gBAAzC;;AAEA,eAAe,MAAM,UAAN,SAAyB,IAAzB,CAA8B;;AAIzC;;;;AAIA,kBAAsC;AAAA,YAA1B,IAA0B,yDAAnB,GAAmB;AAAA,YAAd,OAAc,yDAAJ,EAAI;;AAClC;AACA,aAAK,IAAL,GAAY,IAAZ;;AAEA,YAAI,OAAO,mBAAX,EAAgC;AAC5B,iBAAK,OAAL,CAAa,KAAb,GAAqB,OAAO,mBAA5B;AACH;AACJ;;AAEK,QAAN,GAAa;AAAA;;AAAA;AACT,kBAAM,OAAO,SAAP,QAAN;AACA;AACA,kBAAM,UAAU,UAAV,QAAN;AAHS;AAIZ;;AAED,QAAI,WAAJ,GAAkB;AACd,eAAO,KAAK,GAAZ;AACH;;AAED,iBAAa,aAAb,EAA4B,WAA5B,EAAyC;AACrC,eAAO,OAAO,aAAP,EAAsB,WAAtB,EAAmC,IAAnC,CAAP;AACH;;AAED,kBAAc;AACV,aAAK,GAAL,CAAS,MAAT;AACH;;AAED,cAAU,aAAV,EAAyB,WAAzB,EAAsC;AAClC,aAAK,GAAL,CAAS,KAAK,YAAL,CAAkB,aAAlB,EAAiC,WAAjC,CAAT;AACH;;AAED,kBAAc,gBAAd,EAAgC,IAAhC,EAAsC;AAClC,YAAM,UAAU,OAAO,MAAP,CAAc,KAAK,OAAnB,CAAhB;;AAEA,eAAO,gBACF,IADE,CACG,MACF,QAAQ,MAAR,CAAe,gBAAf,EAAiC,IAAjC,EAAuC,IAAvC,CAFD,EAGA,IAHA,CAGK,MAAM;AACV,iBAAK,EAAL,CAAQ,UAAR,EAAoB,QAApB;AACA,uBAAW,OAAO,KAAK,IAAL,CAAU,GAAV,CAAlB;AACH,SANE,CAAP;AAOH;AAjDwC","file":"index.js","sourcesContent":["import Ibex from 'ibex';\nimport config from 'alp-config';\nimport errors from 'alp-errors-browser';\n// import params from 'alp-params-browser';\nimport language from 'alp-language';\nimport translate from 'alp-translate';\nimport router from 'alp-limosa';\nimport contentLoaded from 'content-loaded';\nimport { init as initWebApp, redirect } from 'alauda/src/web-app';\n\nexport { default as newController } from 'alp-controller';\n\nexport default class AlpBrowser extends Ibex {\n    path: string;\n    appVersion: string;\n\n    /**\n     * @param {string} [path='/']\n     * @param {Object} [options]\n     */\n    constructor(path = '/', options = {}) {\n        super();\n        this.path = path;\n\n        if (global.initialContextState) {\n            this.context.state = global.initialContextState;\n        }\n    }\n\n    async init() {\n        await config('/config')(this);\n        language(this);\n        await translate('/locales')(this);\n    }\n\n    get environment() {\n        return this.env;\n    }\n\n    createRouter(routerBuilder, controllers) {\n        return router(routerBuilder, controllers)(this);\n    }\n\n    catchErrors() {\n        this.use(errors);\n    }\n\n    useRouter(routerBuilder, controllers) {\n        this.use(this.createRouter(routerBuilder, controllers));\n    }\n\n    initialRender(moduleDescriptor, data) {\n        const context = Object.create(this.context);\n\n        return contentLoaded()\n            .then(() => (\n                context.render(moduleDescriptor, data, true)\n            )).then(() => {\n                this.on('redirect', redirect);\n                initWebApp(url => this.load(url));\n            });\n    }\n}\n"]}