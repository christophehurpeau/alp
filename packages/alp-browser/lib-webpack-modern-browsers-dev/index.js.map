{"version":3,"sources":["../src/index.js"],"names":["Ibex","config","errors","params","language","translate","contentLoaded","init","initWebApp","redirect","Logger","Config","default","newController","logger","OptionsType","version","AlpBrowser","constructor","path","window","VERSION","appVersion","global","initialBrowserContext","context","state","environment","env","catchErrors","use","initialRender","moduleDescriptor","data","Object","create","assign","then","render","on","url","load","start","fn","success","catch","err","error"],"mappings":";;;;AAAA;AACA,OAAOA,IAAP;AACA,OAAOC,MAAP;AACA,OAAOC,MAAP;AACA,OAAOC,MAAP;AACA,OAAOC,QAAP;AACA,OAAOC,SAAP;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,QAAQC,UAAjB,EAA6BC,QAA7B;AACA,OAAOC,MAAP;;AAEA,SAASC,MAAT;AACA,SAASC,WAAWC,aAApB;;AAEA,IAAMC,SAAS,IAAIJ,MAAJ,CAAW,KAAX,CAAf;;IAEKK,W;AACHC,S;;;AAGF,eAAe,MAAMC,UAAN,SAAyBjB,IAAzB,CAA8B;;AAI3CkB,gBAAwE;AAAA,QAA5DC,IAA4D,uEAArD,GAAqD;;AAAA;AAAA,4BAA9CH,OAA8C;AAAA,QAA9CA,OAA8C,gCAApCI,OAAOC,OAA6B;;AAAA,yBAAlBN,WAAkB;;AACtE;AACA,SAAKI,IAAL,GAAYA,IAAZ;AACA,SAAKG,UAAL,GAAkBF,OAAOC,OAAzB;;AAEA,QAAIE,OAAOC,qBAAX,EAAkC;AAChC,WAAKC,OAAL,CAAaC,KAAb,GAAqBH,OAAOC,qBAAP,CAA6BE,KAAlD;AACD;AACF;;AAEKnB,MAAN,GAAa;AAAA;;AAAA;AACX,YAAMN,OAAO,SAAP,QAAN;AACAE;AACAC;AACA,YAAMC,UAAU,UAAV,QAAN;AAJW;AAKZ;;AAED,MAAIsB,WAAJ,GAAkB;AAChB,WAAO,KAAKC,GAAZ;AACD;;AAEDC,gBAAc;AACZ,SAAKC,GAAL,CAAS5B,MAAT;AACD;;AAED6B,gBAAcC,gBAAd,EAAgCC,IAAhC,EAAsC;AACpC,QAAMR,UAAUS,OAAOC,MAAP,CAAc,KAAKV,OAAnB,CAAhB;AACAS,WAAOE,MAAP,CAAcX,OAAd,EAAuBF,OAAOC,qBAA9B;AACA,WAAOC,QAAQC,KAAf;;AAEA,WAAOpB,gBACJ+B,IADI,CACC,MACJZ,QAAQa,MAAR,CAAeN,gBAAf,EAAiCC,IAAjC,EAAuC,IAAvC,CAFG,EAGFI,IAHE,CAGG,MAAM;AACZ,WAAKE,EAAL,CAAQ,UAAR,EAAoB9B,QAApB;AACAD,iBAAWgC,OAAO,KAAKC,IAAL,CAAUD,GAAV,CAAlB;AACD,KANI,CAAP;AAOD;;AAEDE,QAAMC,EAAN,EAAoB;AAAA,YAAdA,EAAc;;AAClBA,SACGN,IADH,CACQ,MAAMvB,OAAO8B,OAAP,CAAe,SAAf,CADd,EAEGC,KAFH,CAESC,OAAOhC,OAAOiC,KAAP,CAAa,YAAb,EAA2B,EAAED,GAAF,EAA3B,CAFhB;AAGD;AA/C0C","file":"index.js","sourcesContent":["/* global window */\nimport Ibex from 'ibex/src';\nimport config from 'alp-config/src';\nimport errors from 'alp-errors-browser/src';\nimport params from 'alp-params/src';\nimport language from 'alp-language/src';\nimport translate from 'alp-translate/src';\nimport contentLoaded from 'content-loaded';\nimport { init as initWebApp, redirect } from 'alauda/src/web-app';\nimport Logger from 'nightingale-logger/src';\n\nexport { Config } from 'alp-config/src';\nexport { default as newController } from 'alp-controller/src';\n\nconst logger = new Logger('alp');\n\ntype OptionsType = {\n  version: ?string, // default to window.VERSION\n};\n\nexport default class AlpBrowser extends Ibex {\n  path: string;\n  appVersion: string;\n\n  constructor(path = '/', { version = window.VERSION }: OptionsType = {}) {\n    super();\n    this.path = path;\n    this.appVersion = window.VERSION;\n\n    if (global.initialBrowserContext) {\n      this.context.state = global.initialBrowserContext.state;\n    }\n  }\n\n  async init() {\n    await config('/config')(this);\n    params(this);\n    language(this);\n    await translate('/locales')(this);\n  }\n\n  get environment() {\n    return this.env;\n  }\n\n  catchErrors() {\n    this.use(errors);\n  }\n\n  initialRender(moduleDescriptor, data) {\n    const context = Object.create(this.context);\n    Object.assign(context, global.initialBrowserContext);\n    delete context.state;\n\n    return contentLoaded()\n      .then(() => (\n        context.render(moduleDescriptor, data, true)\n      )).then(() => {\n        this.on('redirect', redirect);\n        initWebApp(url => this.load(url));\n      });\n  }\n\n  start(fn: Function) {\n    fn()\n      .then(() => logger.success('started'))\n      .catch(err => logger.error('start fail', { err }));\n  }\n}\n"]}