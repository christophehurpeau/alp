{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;AAAA,OAAO,IAAP,MAAiB,MAAjB;AACA,OAAO,MAAP,MAAmB,YAAnB;;;AAGA,OAAO,QAAP,MAAqB,cAArB;AACA,OAAO,SAAP,MAAsB,eAAtB;AACA,OAAO,MAAP,MAAmB,YAAnB;AACA,OAAO,aAAP,MAA0B,gBAA1B;;AAEA,SAAS,WAAW,aAApB,QAAyC,gBAAzC;;AAEA,eAAe,MAAM,UAAN,SAAyB,IAAzB,CAA8B;;;;;;AAQzC,kBAAsC;AAAA,YAA1B,IAA0B,yDAAnB,GAAmB;AAAA,YAAd,OAAc,yDAAJ,EAAI;;AAClC;AACA,aAAK,IAAL,GAAY,IAAZ;;AAFkC,qBAElC,KAAK,IAF6B;AAAA,oHAElC,KAAK,IAF6B;AAAA;AAGrC;;AAEK,QAAN,GAAa;AAAA;;AAAA;AACT,kBAAM,OAAO,QAAP,QAAN;AACA;AACA,kBAAM,UAAU,SAAV,QAAN;AAHS;AAIZ;;AAED,QAAI,WAAJ,GAAkB;AACd,eAAO,KAAK,GAAZ;AACH;;AAED,iBAAa,aAAb,EAA4B,WAA5B,EAAyC;AACrC,eAAO,OAAO,aAAP,EAAsB,WAAtB,EAAmC,IAAnC,CAAP;AACH;;AAED,kBAAc;;AAEb;;AAED,cAAU,aAAV,EAAyB,WAAzB,EAAsC;AAClC,aAAK,GAAL,CAAS,KAAK,YAAL,CAAkB,aAAlB,EAAiC,WAAjC,CAAT;AACH;;AAED,oBAAuB;AAAA,0CAAN,IAAM;AAAN,gBAAM;AAAA;;AACnB,YAAM,UAAU,OAAO,MAAP,CAAc,KAAK,OAAnB,CAAhB;AACA,YAAI,OAAO,mBAAX,EAAgC;AAC5B,oBAAQ,KAAR,GAAgB,OAAO,mBAAvB;AACA,iBAAK,KAAL,GAAa,QAAQ,KAArB;AACH;;AAED,eAAO,gBAAgB,IAAhB,CAAqB,MAAM;AAC9B,oBAAQ,MAAR,gBAAkB,IAAlB;AACH,SAFM,CAAP;AAGH;AA7CwC","file":"index.js","sourcesContent":["import Ibex from 'ibex';\nimport config from 'alp-config';\n// import errors from 'alp-errors-browser';\n// import params from 'alp-params-browser';\nimport language from 'alp-language';\nimport translate from 'alp-translate';\nimport router from 'alp-limosa';\nimport contentLoaded from 'content-loaded';\n\nexport { default as newController } from 'alp-controller';\n\nexport default class AlpBrowser extends Ibex {\n    path: string;\n    appVersion: string;\n\n    /**\n     * @param {string} [path='/']\n     * @param {Object} [options]\n     */\n    constructor(path = '/', options = {}) {\n        super();\n        this.path = path;\n    }\n\n    async init() {\n        await config('config')(this);\n        language(this);\n        await translate('locales')(this);\n    }\n\n    get environment() {\n        return this.env;\n    }\n\n    createRouter(routerBuilder, controllers) {\n        return router(routerBuilder, controllers)(this);\n    }\n\n    catchErrors() {\n        // this.use(errors);\n    }\n\n    useRouter(routerBuilder, controllers) {\n        this.use(this.createRouter(routerBuilder, controllers));\n    }\n\n    initialRender(...args) {\n        const context = Object.create(this.context);\n        if (global.initialContextState) {\n            context.state = global.initialContextState;\n            this.state = context.state;\n        }\n\n        return contentLoaded().then(() => {\n            context.render(...args);\n        });\n    }\n}\n"]}