{"version":3,"file":"index-node14.mjs","sources":["../src/FormField.tsx"],"sourcesContent":["import { Form } from 'antd';\nimport type { ComponentProps, ComponentType, ReactElement } from 'react';\nimport type { UseFieldConfig } from 'react-final-form';\nimport { Field } from 'react-final-form';\n\ntype FormItemProps = ComponentProps<typeof Form.Item>;\ntype FieldInputPropsKeys =\n  | 'onBlur'\n  | 'onChange'\n  | 'onFocus'\n  | 'type'\n  | 'value'\n  | 'checked'\n  | 'multiple';\n\ninterface FormFieldProps<\n  FieldValue,\n  P extends {\n    [K in keyof P]: P[K];\n  },\n> extends UseFieldConfig<FieldValue> {\n  component: ComponentType<P>;\n  label?: FormItemProps['label'];\n  help?: FormItemProps['help'];\n  name: string;\n  id?: string;\n}\n\nexport default function FormField<\n  FieldValue,\n  P extends {\n    [K in keyof P]: P[K];\n  },\n>({\n  component: Component,\n  label,\n  name,\n  id = name,\n  help,\n  ...props\n}: FormFieldProps<FieldValue, P> &\n  Omit<\n    P,\n    keyof FormFieldProps<FieldValue, P> | FieldInputPropsKeys\n  >): ReactElement {\n  return (\n    <Form.Item htmlFor={id} label={label} help={help}>\n      <Field<FieldValue>\n        id={id}\n        name={name}\n        render={({ input, meta, ...rest }): ReactElement => (\n          <Component {...input} {...(rest as P)} />\n        )}\n        {...props}\n      />\n    </Form.Item>\n  );\n}\n"],"names":["FormField","component","Component","label","name","id","help","props","_jsx","input","meta","rest"],"mappings":";;;;AA4Be,SAASA,SAAT,CAKb;AACAC,EAAAA,SAAS,EAAEC,SADX;AAEAC,EAAAA,KAFA;AAGAC,EAAAA,IAHA;AAIAC,EAAAA,EAAE,GAAGD,IAJL;AAKAE,EAAAA,IALA;AAMA,KAAGC;AANH,CALa,EAgBI;AACjB,sBACEC,IAAC,IAAD,CAAM,IAAN;AAAW,IAAA,OAAO,EAAEH,EAApB;AAAwB,IAAA,KAAK,EAAEF,KAA/B;AAAsC,IAAA,IAAI,EAAEG,IAA5C;AAAA,2BACEE,IAAC,KAAD;AACE,MAAA,EAAE,EAAEH,EADN;AAEE,MAAA,IAAI,EAAED,IAFR;AAGE,MAAA,MAAM,EAAE,CAAC;AAAEK,QAAAA,KAAF;AAASC,QAAAA,IAAT;AAAe,WAAGC;AAAlB,OAAD,kBACNH,IAAC,SAAD,OAAeC,KAAf;AAAA,WAA2BE;AAA3B,QAJJ;AAAA,SAMMJ;AANN;AADF,IADF;AAYD;;;;"}