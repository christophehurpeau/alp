{"version":3,"sources":["../src/index.js"],"names":["alpRouter","router","app","context","urlGenerator","routeKey","params","toLocalizedPath","language","redirectTo","to","redirect","ctx","routeMatch","find","path","status","Error","route","ref"],"mappings":";;;;;kBAKwBA,S;;AALxB;;;;;;;;;;AAEA,sDAAe,2BAAf;;AACA,4DAAkB,+BAAC,mCAAK,OAAL,CAAD,+BAAkB,+BAAC,mCAAK,8BAAL,CAAD,+BAAiB,qCAAQ,4BAAR,CAAjB,EAAlB,EAAlB;;AAEe,SAASA,SAAT,CAAmBC,MAAnB,EAAmD;AAAA,oBAA1B,qCAA0B;;AAAA,mDAAX,UAAW;;AAAA;;AAChE,4BAAQC,GAAD,IAAkB;AAAA,uCAAd,OAAc;;AACvBA,QAAID,MAAJ,GAAaA,MAAb;;AAEAC,QAAIC,OAAJ,CAAYC,YAAZ,GAA2B,UAASC,QAAT,EAA2BC,MAA3B,EAAgD;AAAA,0BAA/B,8BAA+B;;AAAA,wBAAf,2BAAe;;AAAA,wDAAP,8BAAO;;AAAA;;AAAA;;AACzE,iCAAOL,OAAOM,eAAP,CAAuB,KAAKC,QAA5B,EAAsCH,QAAtC,EAAgDC,MAAhD,CAAP;AACD,KAFD;;AAIAJ,QAAIC,OAAJ,CAAYM,UAAZ,GAAyB,UAASC,EAAT,EAAqBJ,MAArB,EAAuC;AAAA,oBAA5B,8BAA4B;;AAAA,yBAAZ,2BAAY;;AAAA,wDAAJ,2BAAI;;AAAA;;AAAA;;AAC9D,iCAAO,KAAKK,QAAL,CAAcV,OAAOM,eAAP,CAAuB,KAAKC,QAA5B,EAAsCE,EAAtC,EAA0CJ,MAA1C,CAAd,CAAP;AACD,KAFD;;AAIA,WAAQM,GAAD,IAAiB;AAAA,qBAAb,8BAAa;;AAAA;;AACtB,UAAIC,aAAaZ,OAAOa,IAAP,CAAYF,IAAIG,IAAhB,EAAsBH,IAAIJ,QAA1B,CAAjB;;AAEA,UAAI,CAACK,UAAL,EAAiB;AACfD,YAAII,MAAJ,GAAa,GAAb;AACA,cAAM,IAAIC,KAAJ,CAAW,oBAAmBL,IAAIG,IAAK,EAAvC,CAAN;AACD;;AAEDH,UAAIM,KAAJ,GAAYL,UAAZ;;AAEA,aAAOA,WAAWM,GAAX,CAAeP,GAAf,CAAP;AACD,KAXD;AAYD,GAvBD;AAwBD","file":"index.js","sourcesContent":["import type { RouterType } from 'router-segments';\n\ntype AppType = any;\ntype ReturnType = (app: AppType) => (ctx: Object) => Promise<void>;\n\nexport default function alpRouter(router: RouterType): ReturnType {\n  return (app: AppType) => {\n    app.router = router;\n\n    app.context.urlGenerator = function(routeKey: string, params: any): string {\n      return router.toLocalizedPath(this.language, routeKey, params);\n    };\n\n    app.context.redirectTo = function(to: string, params: any): any {\n      return this.redirect(router.toLocalizedPath(this.language, to, params));\n    };\n\n    return (ctx: Object) => {\n      let routeMatch = router.find(ctx.path, ctx.language);\n\n      if (!routeMatch) {\n        ctx.status = 404;\n        throw new Error(`Route not found: ${ctx.path}`);\n      }\n\n      ctx.route = routeMatch;\n\n      return routeMatch.ref(ctx);\n    };\n  };\n}\n"]}