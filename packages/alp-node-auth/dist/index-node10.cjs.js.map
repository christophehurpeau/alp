{"version":3,"file":"index-node10.cjs.js","sources":["../src/utils/generators.ts","../src/services/authentification/AuthenticationService.ts","../src/services/user/UserAccountsService.ts","../src/createAuthController.ts","../src/createRoutes.ts","../src/utils/createDecodeJWT.ts","../src/MongoUsersManager.ts","../src/services/user/UserAccountGoogleService.ts","../src/services/user/UserAccountSlackService.ts","../src/authSocketIO.ts","../src/index.ts"],"sourcesContent":["import { randomBytes } from 'crypto';\nimport { promisify } from 'util';\n\nconst randomBytesPromisified = promisify(randomBytes);\n\nexport async function randomBase64(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('base64');\n}\n\nexport async function randomHex(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('hex');\n}\n","/* eslint-disable camelcase, max-lines, @typescript-eslint/camelcase */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport { OAuthClient } from 'simple-oauth2';\nimport { NodeConfig } from 'alp-types';\nimport { randomHex } from '../../utils/generators';\nimport UserAccountsService from '../user/UserAccountsService';\nimport { AccountId, User, Account } from '../../../types.d';\nimport { AllowedStrategyKeys, Tokens } from './types';\n\nconst logger = new Logger('alp:auth:authentication');\n\nexport interface GenerateAuthUrlOptions {\n  accessType?: string;\n  grantType?: string;\n  includeGrantedScopes?: boolean;\n  loginHint?: string;\n  prompt?: string;\n  redirectUri?: string;\n  scope?: string;\n  state?: string;\n}\n\nexport interface GetTokensOptions {\n  code?: string;\n  redirectUri?: string;\n}\n\nexport interface Strategy {\n  type: string;\n  [key: string]: any;\n}\n\nexport interface Oauth2Strategy extends Strategy {\n  oauth2: OAuthClient;\n}\n\nexport type Strategies<StrategyKeys extends AllowedStrategyKeys> = Record<\n  StrategyKeys,\n  Strategy\n>;\n\nexport default class AuthenticationService<\n  StrategyKeys extends AllowedStrategyKeys\n> extends EventEmitter {\n  config: NodeConfig;\n\n  strategies: Strategies<StrategyKeys>;\n\n  userAccountsService: UserAccountsService<StrategyKeys>;\n\n  constructor(\n    config: NodeConfig,\n    strategies: Strategies<StrategyKeys>,\n    userAccountsService: UserAccountsService<StrategyKeys>,\n  ) {\n    super();\n    this.config = config;\n    this.strategies = strategies;\n    this.userAccountsService = userAccountsService;\n  }\n\n  /**\n   * @param {string} strategy\n   * @param {Object} options\n   * @param {string} [options.redirectUri]\n   * @param {string} [options.scope]\n   * Space-delimited set of permissions that the application requests.\n   * @param {string} [options.state]\n   * Any string that might be useful to your application upon receipt of the response\n   * @param {string} [options.grantType]\n   * @param {string} [options.accessType = 'online']\n   * online or offline\n   * @param {string} [options.prompt]\n   * Space-delimited, case-sensitive list of prompts to present the user.\n   * Values: none, consent, select_account\n   * @param {string} [options.loginHint] email address or sub identifier\n   * @param {boolean} [options.includeGrantedScopes]\n   * If this is provided with the value true, and the authorization request is granted,\n   * the authorization will include any previous authorizations granted\n   * to this user/application combination for other scopes\n   * @returns {string}\n   */\n  generateAuthUrl(\n    strategy: StrategyKeys,\n    options: GenerateAuthUrlOptions = {},\n  ) {\n    logger.debug('generateAuthUrl', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode.authorizeURL({\n          redirect_uri: options.redirectUri,\n          scope: options.scope,\n          state: options.state,\n          grant_type: options.grantType,\n          access_type: options.accessType,\n          login_hint: options.loginHint,\n          include_granted_scopes: options.includeGrantedScopes,\n        });\n    }\n  }\n\n  async getTokens(\n    strategy: StrategyKeys,\n    options: GetTokensOptions = {},\n  ): Promise<Tokens> {\n    logger.debug('getTokens', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const result = await strategyInstance.oauth2.authorizationCode.getToken(\n          {\n            code: options.code,\n            redirect_uri: options.redirectUri,\n          },\n        );\n        if (!result) return result;\n        return {\n          accessToken: result.access_token,\n          refreshToken: result.refresh_token,\n          tokenType: result.token_type,\n          expiresIn: result.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + result.expires_in * 1000);\n            return d;\n          })(),\n          idToken: result.id_token,\n        };\n        // return strategyInstance.accessToken.create(result);\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  async refreshToken(\n    strategy: StrategyKeys,\n    tokensParam: { refreshToken: string },\n  ) {\n    logger.debug('refreshToken', { strategy });\n    if (!tokensParam.refreshToken) {\n      throw new Error('Missing refresh token');\n    }\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const token: any = strategyInstance.oauth2.accessToken.create({\n          refresh_token: tokensParam.refreshToken,\n        });\n        const result = await token.refresh();\n        const tokens = result.token;\n        return {\n          accessToken: tokens.access_token,\n          tokenType: tokens.token_type,\n          expiresIn: tokens.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + tokens.expires_in * 1000);\n            return d;\n          })(),\n          idToken: tokens.id_token,\n        };\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  redirectUri(ctx: any, strategy: string) {\n    const host = `http${this.config.get('allowHttps') ? 's' : ''}://${\n      ctx.request.host\n    }`;\n    return `${host}${ctx.urlGenerator('loginResponse', { strategy })}`;\n  }\n\n  /**\n   *\n   * @param {Koa.Context} ctx\n   * @param {string} strategy\n   * @param {string} [refreshToken]\n   * @param {string} [scopeKey='login']\n   * @param user\n   * @param accountId\n   * @returns {*}\n   */\n  async redirectAuthUrl(\n    ctx: any,\n    strategy: StrategyKeys,\n    refreshToken?: string | undefined,\n    scopeKey?: string | undefined,\n    user?: User,\n    accountId?: AccountId,\n  ) {\n    logger.debug('redirectAuthUrl', { strategy, scopeKey, refreshToken });\n    const state = await randomHex(8);\n    const isLoginAccess = !scopeKey || scopeKey === 'login';\n    const scope = this.userAccountsService.getScope(\n      strategy,\n      scopeKey || 'login',\n      user,\n      accountId,\n    );\n\n    ctx.cookies.set(\n      `auth_${strategy}_${state}`,\n      JSON.stringify({\n        scopeKey,\n        scope,\n        isLoginAccess,\n      }),\n      {\n        maxAge: 10 * 60 * 1000,\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      },\n    );\n    const redirectUri = this.generateAuthUrl(strategy, {\n      redirectUri: this.redirectUri(ctx, strategy),\n      scope,\n      state,\n      accessType: refreshToken ? 'offline' : 'online',\n    });\n\n    return ctx.redirect(redirectUri);\n  }\n\n  /**\n   * @param {Koa.Context} ctx\n   * @param {string} strategy\n   * @param {boolean} isConnected\n   * @returns {*}\n   */\n  async accessResponse(\n    ctx: any,\n    strategy: StrategyKeys,\n    isConnected?: boolean,\n  ) {\n    if (ctx.query.error) {\n      const error: any = new Error(ctx.query.error);\n      error.status = 403;\n      error.expose = true;\n      throw error;\n    }\n\n    const code = ctx.query.code;\n    const state = ctx.query.state;\n    const cookieName = `auth_${strategy}_${state}`;\n    let cookie = ctx.cookies.get(cookieName);\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    if (!cookie) {\n      throw new Error('No cookie for this state');\n    }\n\n    cookie = JSON.parse(cookie);\n    if (!cookie || !cookie.scope) {\n      throw new Error('Unexpected cookie value');\n    }\n\n    if (!cookie.isLoginAccess) {\n      if (!isConnected) {\n        throw new Error('You are not connected');\n      }\n    }\n\n    const tokens: Tokens = await this.getTokens(strategy, {\n      code,\n      redirectUri: this.redirectUri(ctx, strategy),\n    });\n\n    if (cookie.isLoginAccess) {\n      const user = await this.userAccountsService.findOrCreateFromStrategy(\n        strategy,\n        tokens,\n        cookie.scope,\n        cookie.scopeKey,\n      );\n      return user;\n    }\n\n    const connectedUser = ctx.state.user;\n    await this.userAccountsService.update(\n      connectedUser,\n      strategy,\n      tokens,\n      cookie.scope,\n      cookie.scopeKey,\n    );\n    return connectedUser;\n  }\n\n  refreshAccountTokens(user: User, account: Account) {\n    if (\n      account.tokenExpireDate &&\n      account.tokenExpireDate.getTime() > Date.now()\n    ) {\n      return Promise.resolve(false);\n    }\n    return this.refreshToken(account.provider as StrategyKeys, {\n      // accessToken: account.accessToken,\n      refreshToken: account.refreshToken as string,\n    }).then((tokens: Tokens) => {\n      if (!tokens) {\n        // serviceGoogle.updateFields({ accessToken:null, refreshToken:null, status: .OUTDATED });\n        return false;\n      }\n      account.accessToken = tokens.accessToken;\n      account.tokenExpireDate = tokens.expireDate;\n      return this.userAccountsService\n        .updateAccount(user, account)\n        .then(() => true);\n    });\n  }\n}\n","import EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport { AccountId, User, Account } from '../../../types.d';\nimport MongoUsersManager from '../../MongoUsersManager';\nimport { AllowedStrategyKeys } from '../authentification/types';\nimport { AccountService, TokensObject } from './types';\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport const STATUSES = {\n  VALIDATED: 'validated',\n  DELETED: 'deleted',\n};\n\nexport default class UserAccountsService<\n  StrategyKeys extends AllowedStrategyKeys\n> extends EventEmitter {\n  private strategyToService: Record<StrategyKeys, AccountService<any>>;\n\n  usersManager: MongoUsersManager;\n\n  constructor(\n    usersManager: MongoUsersManager,\n    strategyToService: Record<StrategyKeys, AccountService<any>>,\n  ) {\n    super();\n    this.usersManager = usersManager;\n    this.strategyToService = strategyToService;\n  }\n\n  getScope(\n    strategy: StrategyKeys,\n    scopeKey: string,\n    user?: User,\n    accountId?: AccountId,\n  ) {\n    logger.debug('getScope', { strategy, userId: user && user._id });\n    const service = this.strategyToService[strategy];\n    if (!service) {\n      throw new Error('Strategy not supported');\n    }\n\n    const newScope = service.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(\n    user: User,\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ) {\n    const service = this.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.replaceOne(user);\n    return user;\n  }\n\n  async findOrCreateFromStrategy(\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<User> {\n    const service = this.strategyToService[strategy];\n    if (!service) throw new Error('Strategy not supported');\n\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    if (!accountId) throw new Error('Invalid profile: no id found');\n\n    const emails = service.getEmails(profile);\n\n    let user:\n      | Partial<User>\n      | undefined = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId,\n      emails,\n    });\n\n    logger.info(!user ? 'create user' : 'existing user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    let account: Partial<Account> | undefined = user.accounts.find(\n      (account: Account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      // @ts-ignore\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach((email: string) => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = [\n      ...user.emails.reduce(\n        (domains: Set<string>, email: string) =>\n          domains.add(email.split('@', 2)[1]),\n        new Set<string>(),\n      ),\n    ];\n\n    const keyPath: string = this.usersManager.store.keyPath;\n\n    if (user[keyPath]) {\n      await this.usersManager.replaceOne(user as User);\n    } else {\n      await this.usersManager.insertOne(user as User);\n    }\n\n    return user as User;\n  }\n\n  async updateAccount(user: User, account: Account): Promise<User> {\n    await this.usersManager.updateAccount(user, account);\n    return user;\n  }\n}\n","import AuthenticationService from './services/authentification/AuthenticationService';\nimport MongoUsersManager from './MongoUsersManager';\n\nexport interface CreateAuthControllerParams {\n  authenticationService: AuthenticationService<any>;\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager;\n}\n\nexport interface AuthController {\n  login(ctx: any): Promise<void>;\n  addScope(ctx: any): Promise<void>;\n  loginResponse(ctx: any): Promise<void>;\n  logout(ctx: any): Promise<void>;\n}\n\nexport function createAuthController({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n}: CreateAuthControllerParams): AuthController {\n  return {\n    async login(ctx: any) {\n      const strategy = ctx.namedParam('strategy');\n      if (!strategy) throw new Error('Strategy missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy);\n    },\n\n    async addScope(ctx: any) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      if (!strategy) throw new Error('Strategy missing');\n      const scopeKey = ctx.namedParam('scopeKey');\n      if (!scopeKey) throw new Error('Scope missing');\n      await authenticationService.redirectAuthUrl(\n        ctx,\n        strategy,\n        undefined,\n        scopeKey,\n      );\n    },\n\n    async loginResponse(ctx: any) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(\n        ctx,\n        strategy,\n        ctx.state.connected,\n      );\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx: any) {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n","import { AuthController } from './createAuthController';\n\nexport interface AuthRoutes {\n  login: [string, (segment: any) => void];\n  addScope: [string, AuthController['addScope']];\n  logout: [string, AuthController['logout']];\n}\n\nexport const createRoutes = (controller: AuthController): AuthRoutes => ({\n  login: [\n    '/login/:strategy',\n    (segment: any) => {\n      segment.add('/response', controller.loginResponse, 'loginResponse');\n      segment.defaultRoute(controller.login, 'login');\n    },\n  ],\n  addScope: ['/auth/add-scope/:strategy/:scopeKey', controller.addScope],\n  logout: ['/logout', controller.logout],\n});\n","import { promisify } from 'util';\nimport { verify } from 'jsonwebtoken';\n\nconst verifyPromisified: any = promisify(verify);\n\nexport const createDecodeJWT = (secretKey: string) => async (\n  token: string,\n  userAgent: string,\n) => {\n  const result = await verifyPromisified(token, secretKey, {\n    algorithm: 'HS512',\n    audience: userAgent,\n  });\n  return result && result.connected;\n};\n","import { MongoInsertType } from 'liwi-mongo';\nimport { Store, Update } from 'liwi-store';\nimport { User, Account, UserSanitized } from '../types.d';\n\nexport default class MongoUsersManager<\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized\n> {\n  store: Store<U, '_id', any, any>;\n\n  constructor(store: Store<U, '_id', any, any>) {\n    this.store = store;\n  }\n\n  findConnected(connected: string): Promise<U | undefined> {\n    return this.store.findByKey(connected);\n  }\n\n  insertOne(user: MongoInsertType<U>): Promise<any> {\n    return this.store.insertOne(user);\n  }\n\n  replaceOne(user: U): Promise<any> {\n    return this.store.replaceOne(user);\n  }\n\n  public sanitize(user: U): USanitized {\n    return this.sanitizeBaseUser(user) as USanitized;\n  }\n\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number;\n    emails?: string[];\n    provider: string;\n  }): Promise<U | undefined> {\n    let query: any = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length !== 0) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    return this.store.findOne(query);\n  }\n\n  updateAccount(user: U, account: Account) {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, {\n      $set: {\n        [`accounts.${accountIndex}`]: account,\n      },\n    } as Update<U>);\n  }\n\n  protected sanitizeBaseUser(user: U): UserSanitized {\n    return {\n      _id: user._id,\n      created: user.created,\n      updated: user.updated,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map((account: Account) => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  }\n}\n","/* global fetch */\nimport { Tokens } from '../authentification/types';\nimport { AccountService } from './types';\n\nexport default class UserAccountGoogleService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys> {\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'openid profile email',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens) {\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${\n        tokens.accessToken\n      }`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any) {\n    return profile.id;\n  }\n\n  getAccountName(profile: any) {\n    return profile.email;\n  }\n\n  getEmails(profile: any) {\n    const emails: string[] = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile: any) {\n    return profile.name;\n  }\n\n  getFullName(profile: any) {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope: string) {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope\n          .concat(newScope.split(' '))\n          .filter((item: any, i: any, ar: string[]) => ar.indexOf(item) === i);\n  }\n}\n","/* global fetch */\nimport { Tokens } from '../authentification/types';\nimport { AccountService } from './types';\n\n// https://api.slack.com/methods/users.identity\n\nexport default class UserAccountSlackService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys> {\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'identity.basic identity.email identity.avatar',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens) {\n    console.log(tokens);\n    return fetch(\n      `https://slack.com/api/users.identity?token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any) {\n    if (\n      !profile ||\n      !profile.team ||\n      !profile.team.id ||\n      !profile.user ||\n      !profile.user.id\n    ) {\n      return null;\n    }\n    return `team:${profile.team.id};user:${profile.user.id}`;\n  }\n\n  getAccountName(profile: any) {\n    return profile.user.email;\n  }\n\n  getEmails(profile: any) {\n    return [profile.user.email];\n  }\n\n  getDisplayName(profile: any) {\n    return profile.user.name;\n  }\n\n  getFullName(profile: any) {\n    return null;\n  }\n\n  getDefaultScope(newScope: string) {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope\n          .concat(newScope.split(' '))\n          .filter((item: any, i: any, ar: string[]) => ar.indexOf(item) === i);\n  }\n}\n","import Cookies, { Option } from 'cookies';\nimport Logger from 'nightingale-logger';\nimport { NodeApplication } from 'alp-types';\nimport { User } from '../types.d';\nimport { createDecodeJWT } from './utils/createDecodeJWT';\nimport MongoUsersManager from './MongoUsersManager';\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nexport const authSocketIO = <U extends User = User>(\n  app: NodeApplication,\n  usersManager: MongoUsersManager<U>,\n  io: any,\n  options?: Pick<Option, Exclude<keyof Option, 'secure'>>,\n) => {\n  const decodeJwt = createDecodeJWT(\n    app.config.get('authentication').get('secretKey'),\n  );\n\n  const users = new Map();\n  io.users = users;\n\n  io.use(async (socket: any, next: any) => {\n    const handshakeData = socket.request;\n    const cookies = new Cookies(handshakeData, (null as unknown) as any, {\n      ...options,\n      secure: true,\n    });\n    const token = cookies.get(COOKIE_NAME);\n    logger.debug('middleware websocket', { token });\n\n    if (!token) return next();\n\n    let connected;\n    try {\n      connected = await decodeJwt(token, handshakeData.headers['user-agent']);\n    } catch (err) {\n      logger.info('failed to verify authentication', { err });\n      return next();\n    }\n    logger.debug('middleware websocket', { connected });\n\n    if (!connected) return next();\n\n    const user = await usersManager.findConnected(connected);\n\n    if (!user) return next();\n\n    socket.user = user;\n    users.set(socket.client.id, user);\n\n    socket.on('disconnected', () => users.delete(socket.client.id));\n\n    await next();\n  });\n};\n","import { promisify } from 'util';\nimport { sign } from 'jsonwebtoken';\nimport Logger from 'nightingale-logger';\nimport { NodeApplication } from 'alp-types';\nimport { User } from '../types.d';\nimport AuthenticationService, {\n  Strategies,\n} from './services/authentification/AuthenticationService';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport {\n  createAuthController,\n  AuthController as AuthControllerType,\n} from './createAuthController';\nimport { createRoutes, AuthRoutes as AuthRoutesType } from './createRoutes';\nimport MongoUsersManager from './MongoUsersManager';\nimport { createDecodeJWT } from './utils/createDecodeJWT';\nimport { AllowedStrategyKeys } from './services/authentification/types';\nimport { AccountService } from './services/user/types';\n\nexport { default as MongoUsersManager } from './MongoUsersManager';\nexport {\n  default as UserAccountGoogleService,\n} from './services/user/UserAccountGoogleService';\nexport {\n  default as UserAccountSlackService,\n} from './services/user/UserAccountSlackService';\nexport { authSocketIO } from './authSocketIO';\nexport { STATUSES } from './services/user/UserAccountsService';\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nconst signPromisified: any = promisify(sign);\n\nexport type AuthController = AuthControllerType;\nexport type AuthRoutes = AuthRoutesType;\n\nexport default function init<\n  U extends User = User,\n  StrategyKeys extends AllowedStrategyKeys = 'google'\n>({\n  usersManager,\n  strategies,\n  strategyToService,\n  homeRouterKey,\n}: {\n  homeRouterKey?: string;\n  strategies: Strategies<StrategyKeys>;\n  strategyToService: Record<StrategyKeys, AccountService<any>>;\n  usersManager: MongoUsersManager<U>;\n}) {\n  return (app: NodeApplication) => {\n    const userAccountsService = new UserAccountsService(\n      usersManager,\n      strategyToService,\n    );\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n    });\n\n    app.context.setConnected = async function(\n      connected: number | string,\n      user: U,\n    ) {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await signPromisified(\n        { connected, time: Date.now() },\n        this.config.get('authentication').get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: this.request.headers['user-agent'],\n          expiresIn: '30 days',\n        },\n      );\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function() {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    const decodeJwt = createDecodeJWT(\n      app.config.get('authentication').get('secretKey'),\n    );\n    return {\n      routes: createRoutes(controller),\n      authenticationService,\n\n      middleware: async (ctx: any, next: any) => {\n        const token = ctx.cookies.get(COOKIE_NAME);\n        logger.debug('middleware', { token });\n\n        const setState = (connected: any, user: any) => {\n          ctx.state.connected = connected;\n          ctx.state.user = user;\n          ctx.sanitizedState.connected = connected;\n          ctx.sanitizedState.user = user && usersManager.sanitize(user);\n        };\n\n        const notConnected = () => {\n          setState(null, null);\n          return next();\n        };\n\n        if (!token) return notConnected();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, ctx.request.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentification', { err });\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n        logger.debug('middleware', { connected });\n\n        if (!connected) return notConnected();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) {\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n\n        setState(connected, user);\n        return next();\n      },\n    };\n  };\n}\n"],"names":["randomBytesPromisified","promisify","randomBytes","randomHex","size","buffer","toString","logger","Logger","AuthenticationService","EventEmitter","constructor","config","strategies","userAccountsService","generateAuthUrl","strategy","options","debug","strategyInstance","type","oauth2","authorizationCode","authorizeURL","redirect_uri","redirectUri","scope","state","grant_type","grantType","access_type","accessType","login_hint","loginHint","include_granted_scopes","includeGrantedScopes","getTokens","result","getToken","code","accessToken","access_token","refreshToken","refresh_token","tokenType","token_type","expiresIn","expires_in","expireDate","d","Date","setTime","getTime","idToken","id_token","Error","tokensParam","token","create","refresh","tokens","ctx","host","get","request","urlGenerator","redirectAuthUrl","scopeKey","user","accountId","getScope","cookies","set","JSON","stringify","isLoginAccess","maxAge","httpOnly","secure","redirect","accessResponse","isConnected","query","error","status","expose","cookieName","cookie","expires","parse","findOrCreateFromStrategy","connectedUser","update","refreshAccountTokens","account","tokenExpireDate","now","Promise","resolve","provider","then","updateAccount","STATUSES","VALIDATED","DELETED","UserAccountsService","usersManager","strategyToService","userId","_id","service","newScope","scopeKeyToScope","accounts","find","join","subservice","profile","getProfile","getId","subservices","includes","push","replaceOne","emails","getEmails","findOneByAccountOrEmails","providerKey","info","Object","assign","displayName","getDisplayName","fullName","getFullName","name","getAccountName","userEmails","forEach","email","emailDomains","reduce","domains","add","split","Set","keyPath","store","insertOne","createAuthController","authenticationService","homeRouterKey","login","namedParam","addScope","connected","undefined","loginResponse","assert","setConnected","logout","createRoutes","controller","segment","defaultRoute","verifyPromisified","verify","createDecodeJWT","secretKey","userAgent","algorithm","audience","MongoUsersManager","findConnected","findByKey","sanitize","sanitizeBaseUser","length","$or","$in","findOne","accountIndex","indexOf","partialUpdateOne","$set","created","updated","map","UserAccountGoogleService","fetch","response","json","id","givenName","given_name","familyName","family_name","getDefaultScope","oldScope","concat","filter","item","i","ar","UserAccountSlackService","console","log","team","COOKIE_NAME","authSocketIO","app","io","decodeJwt","users","Map","use","socket","next","handshakeData","Cookies","headers","err","client","on","delete","signPromisified","sign","init","context","time","routes","middleware","setState","sanitizedState","notConnected"],"mappings":"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"}