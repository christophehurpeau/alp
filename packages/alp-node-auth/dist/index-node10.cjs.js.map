{"version":3,"file":"index-node10.cjs.js","sources":["../src/utils/createFindConnectedAndUser.ts","../src/utils/cookies.ts","../src/utils/generators.ts","../src/services/authentification/AuthenticationService.ts","../src/services/user/UserAccountsService.ts","../src/createAuthController.ts","../src/createRoutes.ts","../src/MongoUsersManager.ts","../src/services/user/UserAccountGoogleService.ts","../src/services/user/UserAccountSlackService.ts","../src/authSocketIO.ts","../src/authApolloContext.ts","../src/index.ts"],"sourcesContent":["import { promisify } from 'util';\nimport { verify } from 'jsonwebtoken';\nimport Logger from 'nightingale-logger';\nimport { User } from '../../types.d';\nimport MongoUsersManager from '../MongoUsersManager';\n\nconst verifyPromisified: any = promisify(verify);\n\nconst createDecodeJWT = (secretKey: string) => async (\n  token: string,\n  userAgent: string,\n) => {\n  const result = await verifyPromisified(token, secretKey, {\n    algorithm: 'HS512',\n    audience: userAgent,\n  });\n  return result?.connected;\n};\n\nexport type FindConnectedAndUser<U> = (\n  userAgent?: string,\n  token?: string,\n) => Promise<[null | string | number, null | undefined | U]>;\n\nexport const createFindConnectedAndUser = <U extends User>(\n  secretKey: string,\n  usersManager: MongoUsersManager<U>,\n  logger: Logger,\n): FindConnectedAndUser<U> => {\n  const decodeJwt = createDecodeJWT(secretKey);\n\n  const findConnectedAndUser: FindConnectedAndUser<U> = async (\n    userAgent,\n    token,\n  ) => {\n    if (!token || !userAgent) return [null, null];\n\n    let connected;\n    try {\n      connected = await decodeJwt(token, userAgent);\n    } catch (err) {\n      logger.debug('failed to verify authentification', { err });\n    }\n\n    if (connected == null) return [null, null];\n\n    const user = await usersManager.findConnected(connected);\n\n    return [connected, user];\n  };\n\n  return findConnectedAndUser;\n};\n","import { IncomingMessage } from 'http';\nimport Cookies, { Option } from 'cookies';\n\nexport const COOKIE_NAME = 'connectedUser';\n\nexport const getTokenFromRequest = (\n  req: IncomingMessage,\n  options?: Pick<Option, Exclude<keyof Option, 'secure'>>,\n): string | undefined => {\n  const cookies = new Cookies(req, (null as unknown) as any, {\n    ...options,\n    secure: true,\n  });\n\n  return cookies.get(COOKIE_NAME);\n};\n","import { randomBytes } from 'crypto';\nimport { promisify } from 'util';\n\nconst randomBytesPromisified = promisify(randomBytes);\n\nexport async function randomBase64(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('base64');\n}\n\nexport async function randomHex(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('hex');\n}\n","/* eslint-disable camelcase, max-lines, @typescript-eslint/camelcase */\nimport { EventEmitter } from 'events';\nimport Logger from 'nightingale-logger';\nimport { OAuthClient } from 'simple-oauth2';\nimport { NodeConfig } from 'alp-types';\nimport { randomHex } from '../../utils/generators';\nimport UserAccountsService from '../user/UserAccountsService';\nimport { AccountId, User, Account } from '../../../types.d';\nimport { AllowedStrategyKeys, Tokens } from './types';\n\nconst logger = new Logger('alp:auth:authentication');\n\nexport interface GenerateAuthUrlOptions {\n  accessType?: string;\n  grantType?: string;\n  includeGrantedScopes?: boolean;\n  loginHint?: string;\n  prompt?: string;\n  redirectUri?: string;\n  scope?: string;\n  state?: string;\n}\n\nexport interface GetTokensOptions {\n  code: string;\n  redirectUri: string;\n}\n\nexport interface Strategy {\n  type: string;\n}\n\nexport interface Oauth2Strategy<Params extends string> extends Strategy {\n  oauth2: OAuthClient<Params>;\n}\n\nexport type Strategies<StrategyKeys extends AllowedStrategyKeys> = Record<\n  StrategyKeys,\n  Oauth2Strategy<any>\n>;\n\nexport interface AccessResponseHooks<StrategyKeys> {\n  afterLoginSuccess?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    connectedUser: any,\n  ) => void | Promise<void>;\n\n  afterScopeUpdate?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    scopeKey: string,\n    account: Account,\n    user: User,\n  ) => void | Promise<void>;\n}\n\nexport default class AuthenticationService<\n  StrategyKeys extends AllowedStrategyKeys\n> extends EventEmitter {\n  config: NodeConfig;\n\n  strategies: Strategies<StrategyKeys>;\n\n  userAccountsService: UserAccountsService<StrategyKeys>;\n\n  constructor(\n    config: NodeConfig,\n    strategies: Strategies<StrategyKeys>,\n    userAccountsService: UserAccountsService<StrategyKeys>,\n  ) {\n    super();\n    this.config = config;\n    this.strategies = strategies;\n    this.userAccountsService = userAccountsService;\n  }\n\n  generateAuthUrl<T extends StrategyKeys>(strategy: T, params: any) {\n    logger.debug('generateAuthUrl', { strategy, params });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode.authorizeURL(params);\n      default:\n        throw new Error('Invalid strategy');\n    }\n  }\n\n  async getTokens(\n    strategy: StrategyKeys,\n    options: GetTokensOptions,\n  ): Promise<Tokens> {\n    logger.debug('getTokens', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const result = await strategyInstance.oauth2.authorizationCode.getToken(\n          {\n            code: options.code,\n            redirect_uri: options.redirectUri,\n          },\n        );\n        if (!result) return result;\n        return {\n          accessToken: result.access_token,\n          refreshToken: result.refresh_token,\n          tokenType: result.token_type,\n          expiresIn: result.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + result.expires_in * 1000);\n            return d;\n          })(),\n          idToken: result.id_token,\n        };\n        // return strategyInstance.accessToken.create(result);\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  async refreshToken(\n    strategy: StrategyKeys,\n    tokensParam: { refreshToken: string },\n  ) {\n    logger.debug('refreshToken', { strategy });\n    if (!tokensParam.refreshToken) {\n      throw new Error('Missing refresh token');\n    }\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const token: any = strategyInstance.oauth2.accessToken.create({\n          refresh_token: tokensParam.refreshToken,\n        });\n        const result = await token.refresh();\n        const tokens = result.token;\n        return {\n          accessToken: tokens.access_token,\n          tokenType: tokens.token_type,\n          expiresIn: tokens.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + tokens.expires_in * 1000);\n            return d;\n          })(),\n          idToken: tokens.id_token,\n        };\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  redirectUri(ctx: any, strategy: string) {\n    const host = `http${this.config.get('allowHttps') ? 's' : ''}://${\n      ctx.request.host\n    }`;\n    return `${host}${ctx.urlGenerator('loginResponse', { strategy })}`;\n  }\n\n  async redirectAuthUrl(\n    ctx: any,\n    strategy: StrategyKeys,\n    {\n      refreshToken,\n      scopeKey,\n      user,\n      accountId,\n    }: {\n      refreshToken?: string | undefined;\n      scopeKey?: string | undefined;\n      user?: User;\n      accountId?: AccountId;\n    },\n    params?: any,\n  ) {\n    logger.debug('redirectAuthUrl', { strategy, scopeKey, refreshToken });\n    const state = await randomHex(8);\n    const isLoginAccess = !scopeKey || scopeKey === 'login';\n    const scope = this.userAccountsService.getScope(\n      strategy,\n      scopeKey || 'login',\n      user,\n      accountId,\n    );\n\n    if (!scope) {\n      throw new Error('Invalid empty scope');\n    }\n\n    ctx.cookies.set(\n      `auth_${strategy}_${state}`,\n      JSON.stringify({\n        scopeKey,\n        scope,\n        isLoginAccess,\n      }),\n      {\n        maxAge: 10 * 60 * 1000,\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      },\n    );\n    const redirectUri = this.generateAuthUrl(strategy, {\n      redirect_uri: this.redirectUri(ctx, strategy),\n      scope,\n      state,\n      access_type: refreshToken ? 'offline' : 'online',\n      ...params,\n    });\n\n    return ctx.redirect(redirectUri);\n  }\n\n  async accessResponse<StrategyKey extends StrategyKeys>(\n    ctx: any,\n    strategy: StrategyKey,\n    isConnected: undefined | boolean,\n    hooks: AccessResponseHooks<StrategyKeys>,\n  ) {\n    if (ctx.query.error) {\n      const error: any = new Error(ctx.query.error);\n      error.status = 403;\n      error.expose = true;\n      throw error;\n    }\n\n    const code = ctx.query.code;\n    const state = ctx.query.state;\n    const cookieName = `auth_${strategy}_${state}`;\n    let cookie = ctx.cookies.get(cookieName);\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    if (!cookie) {\n      throw new Error('No cookie for this state');\n    }\n\n    cookie = JSON.parse(cookie);\n    if (!cookie || !cookie.scope) {\n      throw new Error('Unexpected cookie value');\n    }\n\n    if (!cookie.isLoginAccess) {\n      if (!isConnected) {\n        throw new Error('You are not connected');\n      }\n    }\n\n    const tokens: Tokens = await this.getTokens(strategy, {\n      code,\n      redirectUri: this.redirectUri(ctx, strategy),\n    });\n\n    if (cookie.isLoginAccess) {\n      const user = await this.userAccountsService.findOrCreateFromStrategy(\n        strategy,\n        tokens,\n        cookie.scope,\n        cookie.scopeKey,\n      );\n\n      if (hooks.afterLoginSuccess) {\n        await hooks.afterLoginSuccess(strategy, user);\n      }\n\n      return user;\n    }\n\n    const connectedUser = ctx.state.user;\n    const { account, user } = await this.userAccountsService.update(\n      connectedUser,\n      strategy,\n      tokens,\n      cookie.scope,\n      cookie.scopeKey,\n    );\n\n    if (hooks.afterScopeUpdate) {\n      await hooks.afterScopeUpdate(strategy, cookie.scopeKey, account, user);\n    }\n\n    return connectedUser;\n  }\n\n  refreshAccountTokens(user: User, account: Account) {\n    if (\n      account.tokenExpireDate &&\n      account.tokenExpireDate.getTime() > Date.now()\n    ) {\n      return Promise.resolve(false);\n    }\n    return this.refreshToken(account.provider as StrategyKeys, {\n      // accessToken: account.accessToken,\n      refreshToken: account.refreshToken as string,\n    }).then((tokens: Tokens) => {\n      if (!tokens) {\n        // serviceGoogle.updateFields({ accessToken:null, refreshToken:null, status: .OUTDATED });\n        return false;\n      }\n      account.accessToken = tokens.accessToken;\n      account.tokenExpireDate = tokens.expireDate;\n      return this.userAccountsService\n        .updateAccount(user, account)\n        .then(() => true);\n    });\n  }\n}\n","import { EventEmitter } from 'events';\nimport Logger from 'nightingale-logger';\nimport { AccountId, User, Account } from '../../../types.d';\nimport MongoUsersManager from '../../MongoUsersManager';\nimport { AllowedStrategyKeys } from '../authentification/types';\nimport { AccountService, TokensObject } from './types';\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport const STATUSES = {\n  VALIDATED: 'validated',\n  DELETED: 'deleted',\n};\n\nexport default class UserAccountsService<\n  StrategyKeys extends AllowedStrategyKeys\n> extends EventEmitter {\n  private readonly strategyToService: Record<StrategyKeys, AccountService<any>>;\n\n  usersManager: MongoUsersManager;\n\n  constructor(\n    usersManager: MongoUsersManager,\n    strategyToService: Record<StrategyKeys, AccountService<any>>,\n  ) {\n    super();\n    this.usersManager = usersManager;\n    this.strategyToService = strategyToService;\n  }\n\n  getScope(\n    strategy: StrategyKeys,\n    scopeKey: string,\n    user?: User,\n    accountId?: AccountId,\n  ) {\n    logger.debug('getScope', { strategy, userId: user?._id });\n    const service = this.strategyToService[strategy];\n    if (!service) {\n      throw new Error('Strategy not supported');\n    }\n\n    const newScope = service.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(\n    user: User,\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ) {\n    const service = this.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.replaceOne(user);\n    return { user, account };\n  }\n\n  async findOrCreateFromStrategy(\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<User> {\n    const service = this.strategyToService[strategy];\n    if (!service) throw new Error('Strategy not supported');\n\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    if (!accountId) throw new Error('Invalid profile: no id found');\n\n    const emails = service.getEmails(profile);\n\n    let user:\n      | Partial<User>\n      | undefined = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId,\n      emails,\n    });\n\n    logger.info(!user ? 'create user' : 'existing user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    let account: Partial<Account> | undefined = user.accounts.find(\n      (account: Account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach((email: string) => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = [\n      ...user.emails.reduce(\n        (domains: Set<string>, email: string) =>\n          domains.add(email.split('@', 2)[1]),\n        new Set<string>(),\n      ),\n    ];\n\n    const keyPath = this.usersManager.store.keyPath;\n\n    if (user[keyPath]) {\n      await this.usersManager.replaceOne(user as User);\n    } else {\n      await this.usersManager.insertOne(user as User);\n    }\n\n    return user as User;\n  }\n\n  async updateAccount(user: User, account: Account): Promise<User> {\n    await this.usersManager.updateAccount(user, account);\n    return user;\n  }\n}\n","import { Context } from 'alp-types';\nimport AuthenticationService, {\n  AccessResponseHooks,\n} from './services/authentification/AuthenticationService';\nimport MongoUsersManager from './MongoUsersManager';\nimport {\n  AllowedStrategyKeys,\n  AllowedMapParamsStrategy,\n} from './services/authentification/types';\n\nexport interface CreateAuthControllerParams<\n  StrategyKeys extends AllowedStrategyKeys\n> {\n  authenticationService: AuthenticationService<StrategyKeys>;\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager;\n  defaultStrategy?: StrategyKeys;\n  authHooks?: AuthHooks<StrategyKeys>;\n}\n\nexport interface AuthController {\n  login(ctx: Context): Promise<void>;\n  addScope(ctx: Context): Promise<void>;\n  loginResponse(ctx: Context): Promise<void>;\n  logout(ctx: Context): Promise<void>;\n}\n\ntype OptionalRecord<K extends keyof any, T> = { [P in K]?: T };\n\nexport interface AuthHooks<StrategyKeys extends AllowedStrategyKeys>\n  extends AccessResponseHooks<StrategyKeys> {\n  paramsForLogin?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    ctx: Context,\n  ) =>\n    | void\n    | Promise<void>\n    | OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>\n    | Promise<OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>>;\n}\n\nexport function createAuthController<StrategyKeys extends AllowedStrategyKeys>({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n  defaultStrategy,\n  authHooks = {},\n}: CreateAuthControllerParams<StrategyKeys>): AuthController {\n  return {\n    async login(ctx: Context): Promise<void> {\n      const strategy = ctx.namedParam('strategy') || defaultStrategy;\n      if (!strategy) throw new Error('Strategy missing');\n      const params =\n        (authHooks.paramsForLogin &&\n          (await authHooks.paramsForLogin(strategy, ctx))) ||\n        {};\n      await authenticationService.redirectAuthUrl(ctx, strategy, {}, params);\n    },\n\n    async addScope(ctx: Context): Promise<void> {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy') || defaultStrategy;\n      if (!strategy) throw new Error('Strategy missing');\n      const scopeKey = ctx.namedParam('scopeKey');\n      if (!scopeKey) throw new Error('Scope missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy, { scopeKey });\n    },\n\n    async loginResponse(ctx: Context): Promise<void> {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(\n        ctx,\n        strategy,\n        ctx.state.connected,\n        {\n          afterLoginSuccess: authHooks.afterLoginSuccess,\n          afterScopeUpdate: authHooks.afterScopeUpdate,\n        },\n      );\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx: Context): Promise<void> {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n","import { AuthController } from './createAuthController';\n\nexport interface AuthRoutes {\n  login: [string, (segment: any) => void];\n  addScope: [string, AuthController['addScope']];\n  logout: [string, AuthController['logout']];\n}\n\nexport const createRoutes = (controller: AuthController): AuthRoutes => ({\n  login: [\n    '/login/:strategy?',\n    (segment: any) => {\n      segment.add('/response', controller.loginResponse, 'loginResponse');\n      segment.defaultRoute(controller.login, 'login');\n    },\n  ],\n  addScope: ['/auth/add-scope/:strategy/:scopeKey', controller.addScope],\n  logout: ['/logout', controller.logout],\n});\n","import { MongoInsertType, MongoStore, Update } from 'liwi-mongo';\nimport { User, Account, UserSanitized } from '../types.d';\n\nexport default class MongoUsersManager<\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized\n> {\n  store: MongoStore<U>;\n\n  constructor(store: MongoStore<U>) {\n    this.store = store;\n  }\n\n  findConnected(connected: string): Promise<U | undefined> {\n    return this.store.findByKey(connected);\n  }\n\n  insertOne(user: MongoInsertType<U>): Promise<any> {\n    return this.store.insertOne(user);\n  }\n\n  replaceOne(user: U): Promise<any> {\n    return this.store.replaceOne(user);\n  }\n\n  sanitize(user: U): USanitized {\n    return this.sanitizeBaseUser(user) as USanitized;\n  }\n\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number;\n    emails?: string[];\n    provider: string;\n  }): Promise<U | undefined> {\n    let query: any = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length !== 0) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    return this.store.findOne(query);\n  }\n\n  updateAccount(user: U, account: Account) {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, {\n      $set: {\n        [`accounts.${accountIndex}`]: account,\n      },\n    } as Update<U>);\n  }\n\n  protected sanitizeBaseUser(user: U): UserSanitized {\n    return {\n      _id: user._id,\n      created: user.created,\n      updated: user.updated,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map((account: Account) => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  }\n}\n","/* global fetch */\nimport { Tokens } from '../authentification/types';\nimport { AccountService } from './types';\n\nexport default class UserAccountGoogleService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys> {\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'openid profile email',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens) {\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any) {\n    return profile.id;\n  }\n\n  getAccountName(profile: any) {\n    return profile.email;\n  }\n\n  getEmails(profile: any) {\n    const emails: string[] = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile: any) {\n    return profile.name;\n  }\n\n  getFullName(profile: any) {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope: string) {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope\n          .concat(newScope.split(' '))\n          .filter((item: any, i: any, ar: string[]) => ar.indexOf(item) === i);\n  }\n}\n","/* global fetch */\nimport { Tokens } from '../authentification/types';\nimport { AccountService } from './types';\n\n// https://api.slack.com/methods/users.identity\n\nexport default class UserAccountSlackService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys> {\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'identity.basic identity.email identity.avatar',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens) {\n    return fetch(\n      `https://slack.com/api/users.identity?token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any) {\n    if (\n      !profile ||\n      !profile.team ||\n      !profile.team.id ||\n      !profile.user ||\n      !profile.user.id\n    ) {\n      return null;\n    }\n    return `team:${profile.team.id};user:${profile.user.id}`;\n  }\n\n  getAccountName(profile: any) {\n    return profile.user.email;\n  }\n\n  getEmails(profile: any) {\n    return [profile.user.email];\n  }\n\n  getDisplayName(profile: any) {\n    return profile.user.name;\n  }\n\n  getFullName(profile: any) {\n    return null;\n  }\n\n  getDefaultScope(newScope: string) {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope\n          .concat(newScope.split(' '))\n          .filter((item: any, i: any, ar: string[]) => ar.indexOf(item) === i);\n  }\n}\n","import { Option } from 'cookies';\nimport Logger from 'nightingale-logger';\nimport { NodeApplication } from 'alp-types';\nimport { User } from '../types.d';\nimport { getTokenFromRequest } from './utils/cookies';\nimport { createFindConnectedAndUser } from './utils/createFindConnectedAndUser';\nimport MongoUsersManager from './MongoUsersManager';\n\nconst logger = new Logger('alp:auth');\n\nexport const authSocketIO = <U extends User = User>(\n  app: NodeApplication,\n  usersManager: MongoUsersManager<U>,\n  io: any,\n  options?: Pick<Option, Exclude<keyof Option, 'secure'>>,\n): void => {\n  const findConnectedAndUser = createFindConnectedAndUser(\n    app.config.get('authentication').get('secretKey'),\n    usersManager,\n    logger,\n  );\n\n  const users = new Map();\n  io.users = users;\n\n  io.use(async (socket: any, next: any) => {\n    const handshakeData = socket.request;\n    const token = getTokenFromRequest(handshakeData);\n\n    if (!token) return next();\n\n    const [connected, user] = await findConnectedAndUser(\n      handshakeData.headers['user-agent'],\n      token,\n    );\n\n    if (!connected || !user) return next();\n\n    socket.user = user;\n    users.set(socket.client.id, user);\n\n    socket.on('disconnected', () => users.delete(socket.client.id));\n\n    await next();\n  });\n};\n","import { IncomingMessage } from 'http';\nimport Logger from 'nightingale-logger';\nimport { NodeConfig } from 'alp-types';\nimport { User } from '../types.d';\nimport { getTokenFromRequest, COOKIE_NAME } from './utils/cookies';\nimport { createFindConnectedAndUser } from './utils/createFindConnectedAndUser';\nimport MongoUsersManager from './MongoUsersManager';\n\nconst logger = new Logger('alp:auth');\n\nconst getTokenFromReq = (\n  req: IncomingMessage & { cookies?: any },\n): string | undefined => {\n  if (req.cookies) return req.cookies[COOKIE_NAME];\n  return getTokenFromRequest(req);\n};\n\n/*\n * Not tested yet.\n * @internal\n */\nexport const createAuthApolloContext = <U extends User = User>(\n  config: NodeConfig,\n  usersManager: MongoUsersManager<U>,\n) => {\n  const findConnectedAndUser = createFindConnectedAndUser(\n    config.get('authentication').get('secretKey'),\n    usersManager,\n    logger,\n  );\n\n  return async ({ req, connection }: { req: any; connection: any }) => {\n    // if (connection) console.log(Object.keys(connection));\n    if (connection?.user) {\n      return { user: connection.user };\n    }\n\n    if (!req) return null;\n\n    const token = getTokenFromReq(req);\n\n    if (!token) return { user: undefined };\n\n    const [, user] = await findConnectedAndUser(\n      req.headers['user-agent'],\n      token,\n    );\n\n    return { user };\n  };\n};\n","import { IncomingMessage } from 'http';\nimport { promisify } from 'util';\nimport { sign } from 'jsonwebtoken';\nimport Logger from 'nightingale-logger';\nimport { NodeApplication } from 'alp-types';\nimport { User } from '../types.d';\nimport { createFindConnectedAndUser } from './utils/createFindConnectedAndUser';\nimport { getTokenFromRequest, COOKIE_NAME } from './utils/cookies';\nimport AuthenticationService, {\n  Strategies,\n} from './services/authentification/AuthenticationService';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport {\n  createAuthController,\n  AuthController as AuthControllerType,\n  AuthHooks,\n} from './createAuthController';\nimport { createRoutes, AuthRoutes as AuthRoutesType } from './createRoutes';\nimport MongoUsersManager from './MongoUsersManager';\nimport { AllowedStrategyKeys } from './services/authentification/types';\nimport { AccountService } from './services/user/types';\n\nexport { AuthenticationService };\nexport { default as MongoUsersManager } from './MongoUsersManager';\nexport { default as UserAccountGoogleService } from './services/user/UserAccountGoogleService';\nexport { default as UserAccountSlackService } from './services/user/UserAccountSlackService';\nexport { authSocketIO } from './authSocketIO';\nexport { createAuthApolloContext } from './authApolloContext';\nexport { STATUSES } from './services/user/UserAccountsService';\n\nconst logger = new Logger('alp:auth');\n\nconst signPromisified: any = promisify(sign);\n\nexport type AuthController = AuthControllerType;\nexport type AuthRoutes = AuthRoutesType;\n\nexport default function init<\n  U extends User = User,\n  StrategyKeys extends AllowedStrategyKeys = 'google'\n>({\n  homeRouterKey,\n  usersManager,\n  strategies,\n  defaultStrategy,\n  strategyToService,\n  authHooks,\n}: {\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager<U>;\n  strategies: Strategies<StrategyKeys>;\n  defaultStrategy?: StrategyKeys;\n  strategyToService: Record<StrategyKeys, AccountService<any>>;\n  authHooks?: AuthHooks<StrategyKeys>;\n}) {\n  return (app: NodeApplication) => {\n    const userAccountsService = new UserAccountsService(\n      usersManager,\n      strategyToService,\n    );\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n      defaultStrategy,\n      authHooks,\n    });\n\n    app.context.setConnected = async function (\n      connected: number | string,\n      user: U,\n    ): Promise<void> {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await signPromisified(\n        { connected, time: Date.now() },\n        this.config.get('authentication').get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: this.request.headers['user-agent'],\n          expiresIn: '30 days',\n        },\n      );\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function (): void {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    const getConnectedAndUser = createFindConnectedAndUser(\n      app.config.get('authentication').get('secretKey'),\n      usersManager,\n      logger,\n    );\n\n    return {\n      routes: createRoutes(controller),\n\n      getConnectedAndUserFromRequest: (\n        req: IncomingMessage,\n      ): ReturnType<typeof getConnectedAndUser> => {\n        const token = getTokenFromRequest(req);\n        return getConnectedAndUser(req.headers['user-agent'], token);\n      },\n      getConnectedAndUser,\n\n      middleware: async (ctx: any, next: any) => {\n        const token = ctx.cookies.get(COOKIE_NAME);\n        const userAgent = ctx.request.headers['user-agent'];\n        logger.debug('middleware', { token });\n\n        const setState = (connected: any, user: null | undefined | U): void => {\n          ctx.state.connected = connected;\n          ctx.state.user = user;\n          ctx.sanitizedState.connected = connected;\n          ctx.sanitizedState.user = user && usersManager.sanitize(user);\n        };\n\n        const notConnected = () => {\n          setState(null, null);\n          return next();\n        };\n\n        const [connected, user] = await getConnectedAndUser(userAgent, token);\n        logger.debug('middleware', { connected });\n\n        if (connected == null || user == null) {\n          if (token) ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n\n        setState(connected, user);\n        return next();\n      },\n    };\n  };\n}\n"],"names":["verifyPromisified","promisify","verify","createDecodeJWT","secretKey","token","userAgent","result","algorithm","audience","connected","createFindConnectedAndUser","usersManager","logger","decodeJwt","err","debug","user","findConnected","COOKIE_NAME","getTokenFromRequest","req","options","cookies","Cookies","secure","get","randomBytesPromisified","randomBytes","randomHex","size","buffer","toString","Logger","AuthenticationService","EventEmitter","constructor","config","strategies","userAccountsService","generateAuthUrl","strategy","params","strategyInstance","type","oauth2","authorizationCode","authorizeURL","Error","getTokens","getToken","code","redirect_uri","redirectUri","accessToken","access_token","refreshToken","refresh_token","tokenType","token_type","expiresIn","expires_in","expireDate","d","Date","setTime","getTime","idToken","id_token","tokensParam","create","refresh","tokens","ctx","host","request","urlGenerator","redirectAuthUrl","scopeKey","accountId","state","scope","getScope","set","JSON","stringify","isLoginAccess","maxAge","httpOnly","access_type","redirect","accessResponse","isConnected","hooks","query","error","status","expose","cookieName","cookie","expires","parse","findOrCreateFromStrategy","afterLoginSuccess","connectedUser","account","update","afterScopeUpdate","refreshAccountTokens","tokenExpireDate","now","Promise","resolve","provider","then","updateAccount","STATUSES","VALIDATED","DELETED","UserAccountsService","strategyToService","userId","_id","service","newScope","scopeKeyToScope","accounts","find","join","subservice","profile","getProfile","getId","subservices","includes","push","replaceOne","emails","getEmails","findOneByAccountOrEmails","providerKey","info","Object","assign","displayName","getDisplayName","fullName","getFullName","name","getAccountName","userEmails","forEach","email","emailDomains","reduce","domains","add","split","Set","keyPath","store","insertOne","createAuthController","authenticationService","homeRouterKey","defaultStrategy","authHooks","login","namedParam","paramsForLogin","addScope","loginResponse","assert","setConnected","logout","createRoutes","controller","segment","defaultRoute","MongoUsersManager","findByKey","sanitize","sanitizeBaseUser","length","$or","$in","findOne","accountIndex","indexOf","partialUpdateOne","$set","created","updated","map","UserAccountGoogleService","fetch","response","json","id","givenName","given_name","familyName","family_name","getDefaultScope","undefined","oldScope","concat","filter","item","i","ar","UserAccountSlackService","team","authSocketIO","app","io","findConnectedAndUser","users","Map","use","socket","next","handshakeData","headers","client","on","delete","getTokenFromReq","createAuthApolloContext","connection","signPromisified","sign","init","context","time","getConnectedAndUser","routes","getConnectedAndUserFromRequest","middleware","setState","sanitizedState","notConnected"],"mappings":"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"}