{"version":3,"file":"index-node16.mjs","sources":["../src/createAuthController.ts","../src/createRoutes.ts","../src/utils/generators.ts","../src/services/authentification/AuthenticationService.ts","../src/services/user/UserAccountsService.ts","../src/utils/cookies.ts","../src/utils/createFindConnectedAndUser.ts","../src/MongoUsersManager.ts","../src/services/user/UserAccountGoogleService.ts","../src/services/user/UserAccountSlackService.ts","../src/authSocketIO.ts","../src/authApolloContext.ts","../src/index.ts"],"sourcesContent":["import type { Context } from 'alp-node';\nimport 'alp-router';\nimport type { User, UserSanitized } from '../types.d';\nimport type MongoUsersManager from './MongoUsersManager';\nimport type {\n  AuthenticationService,\n  AccessResponseHooks,\n} from './services/authentification/AuthenticationService';\nimport type {\n  AllowedStrategyKeys,\n  AllowedMapParamsStrategy,\n} from './services/authentification/types';\n\nexport interface CreateAuthControllerParams<\n  StrategyKeys extends AllowedStrategyKeys,\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n> {\n  authenticationService: AuthenticationService<StrategyKeys, U, UserSanitized>;\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager<U, USanitized>;\n  defaultStrategy?: StrategyKeys;\n  authHooks?: AuthHooks<StrategyKeys>;\n}\n\nexport interface AuthController {\n  login: (ctx: Context) => Promise<void>;\n  addScope: (ctx: Context) => Promise<void>;\n  response: (ctx: Context) => Promise<void>;\n  logout: (ctx: Context) => Promise<void>;\n}\n\ntype OptionalRecord<K extends keyof any, T> = { [P in K]?: T };\n\nexport interface AuthHooks<StrategyKeys extends AllowedStrategyKeys>\n  extends AccessResponseHooks<StrategyKeys> {\n  paramsForLogin?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    ctx: Context,\n  ) => // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n  | void\n    | Promise<void>\n    | OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>\n    | Promise<OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>>;\n}\n\nexport function createAuthController<\n  StrategyKeys extends AllowedStrategyKeys,\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n>({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n  defaultStrategy,\n  authHooks = {},\n}: CreateAuthControllerParams<StrategyKeys, U, USanitized>): AuthController {\n  return {\n    async login(ctx: Context): Promise<void> {\n      const strategy: StrategyKeys = (ctx.namedParam('strategy') ||\n        defaultStrategy) as StrategyKeys;\n      if (!strategy) throw new Error('Strategy missing');\n      const params =\n        (authHooks.paramsForLogin &&\n          (await authHooks.paramsForLogin(strategy, ctx))) ||\n        {};\n      await authenticationService.redirectAuthUrl(ctx, strategy, {}, params);\n    },\n\n    /**\n     * Add scope in existing\n     * The user must already be connected\n     */\n    async addScope(ctx: Context): Promise<void> {\n      if (!ctx.state.connected) {\n        await ctx.redirectTo(homeRouterKey);\n        return;\n      }\n\n      const strategy: StrategyKeys = (ctx.namedParam('strategy') ||\n        defaultStrategy) as StrategyKeys;\n      if (!strategy) throw new Error('Strategy missing');\n      const scopeKey = ctx.namedParam('scopeKey');\n      if (!scopeKey) throw new Error('Scope missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy, { scopeKey });\n    },\n\n    async response(ctx: Context): Promise<void> {\n      const strategy: StrategyKeys = ctx.namedParam('strategy') as StrategyKeys;\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(\n        ctx,\n        strategy,\n        ctx.state.connected as boolean | undefined,\n        {\n          afterLoginSuccess: authHooks.afterLoginSuccess,\n          afterScopeUpdate: authHooks.afterScopeUpdate,\n        },\n      );\n      const keyPath = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      await ctx.redirectTo(homeRouterKey);\n    },\n\n    async logout(ctx: Context): Promise<void> {\n      ctx.logout();\n      await ctx.redirectTo(homeRouterKey);\n    },\n  };\n}\n","import type { AuthController } from './createAuthController';\n\nexport interface AuthRoutes {\n  login: [string, (segment: any) => void];\n  addScope: [string, AuthController['addScope']];\n  logout: [string, AuthController['logout']];\n}\n\nexport const createRoutes = (controller: AuthController): AuthRoutes => ({\n  login: [\n    '/login/:strategy?',\n    (segment: any) => {\n      segment.add('/response', controller.response, 'authResponse');\n      segment.defaultRoute(controller.login, 'login');\n    },\n  ],\n  addScope: ['/add-scope/:strategy/:scopeKey', controller.addScope],\n  logout: ['/logout', controller.logout],\n});\n","import { randomBytes } from 'crypto';\nimport { promisify } from 'util';\n\nconst randomBytesPromisified = promisify(randomBytes);\n\nexport async function randomBase64(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('base64');\n}\n\nexport async function randomHex(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('hex');\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable camelcase, max-lines */\nimport { EventEmitter } from 'events';\nimport 'alp-router';\nimport type { Context, NodeConfig } from 'alp-types';\nimport { Logger } from 'nightingale-logger';\nimport type { OAuthClient } from 'simple-oauth2';\nimport type { AccountId, User, Account, UserSanitized } from '../../../types.d';\nimport { randomHex } from '../../utils/generators';\nimport type UserAccountsService from '../user/UserAccountsService';\nimport type { AllowedStrategyKeys, Tokens } from './types';\n\nconst logger = new Logger('alp:auth:authentication');\n\nexport interface GenerateAuthUrlOptions {\n  accessType?: string;\n  grantType?: string;\n  includeGrantedScopes?: boolean;\n  loginHint?: string;\n  prompt?: string;\n  redirectUri?: string;\n  scope?: string;\n  state?: string;\n}\n\nexport interface GetTokensOptions {\n  code: string;\n  redirectUri: string;\n}\n\nexport interface Strategy {\n  type: string;\n}\n\nexport interface Oauth2Strategy<Params extends string> extends Strategy {\n  oauth2: OAuthClient<Params>;\n}\n\nexport type Strategies<StrategyKeys extends AllowedStrategyKeys> = Record<\n  StrategyKeys,\n  Oauth2Strategy<any>\n>;\n\nexport interface AccessResponseHooks<StrategyKeys, U extends User = User> {\n  afterLoginSuccess?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    connectedUser: U,\n  ) => void | Promise<void>;\n\n  afterScopeUpdate?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    scopeKey: string,\n    account: Account,\n    user: U,\n  ) => void | Promise<void>;\n}\n\nexport class AuthenticationService<\n  StrategyKeys extends AllowedStrategyKeys,\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n> extends EventEmitter {\n  config: NodeConfig;\n\n  strategies: Strategies<StrategyKeys>;\n\n  userAccountsService: UserAccountsService<StrategyKeys, U, USanitized>;\n\n  constructor(\n    config: NodeConfig,\n    strategies: Strategies<StrategyKeys>,\n    userAccountsService: UserAccountsService<StrategyKeys, U, USanitized>,\n  ) {\n    super();\n    this.config = config;\n    this.strategies = strategies;\n    this.userAccountsService = userAccountsService;\n  }\n\n  generateAuthUrl<T extends StrategyKeys>(strategy: T, params: any): string {\n    logger.debug('generateAuthUrl', { strategy, params });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode.authorizeURL(params);\n      default:\n        throw new Error('Invalid strategy');\n    }\n  }\n\n  async getTokens(\n    strategy: StrategyKeys,\n    options: GetTokensOptions,\n  ): Promise<Tokens> {\n    logger.debug('getTokens', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const result = await strategyInstance.oauth2.authorizationCode.getToken(\n          {\n            code: options.code,\n            redirect_uri: options.redirectUri,\n          },\n        );\n        if (!result) return result;\n        return {\n          accessToken: result.access_token,\n          refreshToken: result.refresh_token,\n          tokenType: result.token_type,\n          expiresIn: result.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + result.expires_in * 1000);\n            return d;\n          })(),\n          idToken: result.id_token,\n        };\n        // return strategyInstance.accessToken.create(result);\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  async refreshToken(\n    strategy: StrategyKeys,\n    tokensParam: { refreshToken: string },\n  ): Promise<Tokens> {\n    logger.debug('refreshToken', { strategy });\n    if (!tokensParam.refreshToken) {\n      throw new Error('Missing refresh token');\n    }\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const token = strategyInstance.oauth2.accessToken.create({\n          refresh_token: tokensParam.refreshToken,\n        });\n        const result = await token.refresh();\n        const tokens = result.token;\n        return {\n          accessToken: tokens.access_token,\n          tokenType: tokens.token_type,\n          expiresIn: tokens.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + tokens.expires_in * 1000);\n            return d;\n          })(),\n          idToken: tokens.id_token,\n        };\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  redirectUri(ctx: Context, strategy: string): string {\n    const host = `http${this.config.get('allowHttps') ? 's' : ''}://${\n      ctx.request.host\n    }`;\n    return `${host}${ctx.urlGenerator('authResponse', {\n      strategy,\n    })}`;\n  }\n\n  async redirectAuthUrl(\n    ctx: Context,\n    strategy: StrategyKeys,\n    {\n      refreshToken,\n      scopeKey,\n      user,\n      accountId,\n    }: {\n      refreshToken?: string | undefined;\n      scopeKey?: string | undefined;\n      user?: U;\n      accountId?: AccountId;\n    },\n    params?: any,\n  ): Promise<void> {\n    logger.debug('redirectAuthUrl', { strategy, scopeKey, refreshToken });\n    const state = await randomHex(8);\n    const isLoginAccess = !scopeKey || scopeKey === 'login';\n    const scope = this.userAccountsService.getScope(\n      strategy,\n      scopeKey || 'login',\n      user,\n      accountId,\n    );\n\n    if (!scope) {\n      throw new Error('Invalid empty scope');\n    }\n\n    ctx.cookies.set(\n      `auth_${strategy}_${state}`,\n      JSON.stringify({\n        scopeKey,\n        scope,\n        isLoginAccess,\n      }),\n      {\n        maxAge: 10 * 60 * 1000,\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      },\n    );\n    const redirectUri = this.generateAuthUrl(strategy, {\n      redirect_uri: this.redirectUri(ctx, strategy),\n      scope,\n      state,\n      access_type: refreshToken ? 'offline' : 'online',\n      ...params,\n    });\n\n    return ctx.redirect(redirectUri);\n  }\n\n  async accessResponse<StrategyKey extends StrategyKeys>(\n    ctx: any,\n    strategy: StrategyKey,\n    isConnected: undefined | boolean,\n    hooks: AccessResponseHooks<StrategyKeys, U>,\n  ): Promise<U> {\n    if (ctx.query.error) {\n      const error: any = new Error(ctx.query.error);\n      error.status = 403;\n      error.expose = true;\n      throw error;\n    }\n\n    const code = ctx.query.code;\n    const state = ctx.query.state;\n    const cookieName = `auth_${strategy}_${state as string}`;\n    let cookie = ctx.cookies.get(cookieName);\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    if (!cookie) {\n      throw new Error('No cookie for this state');\n    }\n\n    cookie = JSON.parse(cookie);\n    if (!cookie || !cookie.scope) {\n      throw new Error('Unexpected cookie value');\n    }\n\n    if (!cookie.isLoginAccess) {\n      if (!isConnected) {\n        throw new Error('You are not connected');\n      }\n    }\n\n    const tokens: Tokens = await this.getTokens(strategy, {\n      code,\n      redirectUri: this.redirectUri(ctx, strategy),\n    });\n\n    if (cookie.isLoginAccess) {\n      const user = await this.userAccountsService.findOrCreateFromStrategy(\n        strategy,\n        tokens,\n        cookie.scope,\n        cookie.scopeKey,\n      );\n\n      if (hooks.afterLoginSuccess) {\n        await hooks.afterLoginSuccess(strategy, user);\n      }\n\n      return user;\n    }\n\n    const connectedUser = ctx.state.user;\n    const { account, user } = await this.userAccountsService.update(\n      connectedUser,\n      strategy,\n      tokens,\n      cookie.scope,\n      cookie.scopeKey,\n    );\n\n    if (hooks.afterScopeUpdate) {\n      await hooks.afterScopeUpdate(strategy, cookie.scopeKey, account, user);\n    }\n\n    return connectedUser;\n  }\n\n  refreshAccountTokens(user: U, account: Account): Promise<boolean> {\n    if (\n      account.tokenExpireDate &&\n      account.tokenExpireDate.getTime() > Date.now()\n    ) {\n      return Promise.resolve(false);\n    }\n    return this.refreshToken(account.provider as StrategyKeys, {\n      // accessToken: account.accessToken,\n      refreshToken: account.refreshToken!,\n    }).then((tokens: Tokens) => {\n      if (!tokens) {\n        // serviceGoogle.updateFields({ accessToken:null, refreshToken:null, status: .OUTDATED });\n        return false;\n      }\n      account.accessToken = tokens.accessToken;\n      account.tokenExpireDate = tokens.expireDate;\n      return this.userAccountsService\n        .updateAccount(user, account)\n        .then(() => true);\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/no-shadow */\nimport { EventEmitter } from 'events';\nimport { Logger } from 'nightingale-logger';\nimport type { AccountId, User, Account, UserSanitized } from '../../../types.d';\nimport type MongoUsersManager from '../../MongoUsersManager';\nimport type { AllowedStrategyKeys } from '../authentification/types';\nimport type { AccountService, TokensObject } from './types';\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport const STATUSES = {\n  VALIDATED: 'validated',\n  DELETED: 'deleted',\n};\n\nexport default class UserAccountsService<\n  StrategyKeys extends AllowedStrategyKeys,\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n> extends EventEmitter {\n  private readonly strategyToService: Record<StrategyKeys, AccountService<any>>;\n\n  usersManager: MongoUsersManager<U, USanitized>;\n\n  constructor(\n    usersManager: MongoUsersManager<U, USanitized>,\n    strategyToService: Record<StrategyKeys, AccountService<any>>,\n  ) {\n    super();\n    this.usersManager = usersManager;\n    this.strategyToService = strategyToService;\n  }\n\n  getScope(\n    strategy: StrategyKeys,\n    scopeKey: string,\n    user?: U,\n    accountId?: AccountId,\n  ): string {\n    logger.debug('getScope', { strategy, userId: user?._id });\n    const service = this.strategyToService[strategy];\n    if (!service) {\n      throw new Error('Strategy not supported');\n    }\n\n    const newScope = service.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(\n    user: U,\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<{ user: U; account: U['accounts'][number] }> {\n    const service = this.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.replaceOne(user);\n    return { user, account };\n  }\n\n  async findOrCreateFromStrategy(\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<U> {\n    const service = this.strategyToService[strategy];\n    if (!service) throw new Error('Strategy not supported');\n\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    if (!accountId) throw new Error('Invalid profile: no id found');\n\n    const emails = service.getEmails(profile);\n\n    let user: Partial<U> | undefined =\n      await this.usersManager.findOneByAccountOrEmails({\n        provider: service.providerKey,\n        accountId,\n        emails,\n      });\n\n    logger.info(!user ? 'create user' : 'existing user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    let account: Partial<Account> | undefined = user.accounts.find(\n      (account: Account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      // @ts-expect-error well...\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach((email: string) => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = [\n      // eslint-disable-next-line unicorn/no-array-reduce\n      ...user.emails.reduce(\n        (domains: Set<string>, email: string) =>\n          domains.add(email.split('@', 2)[1]),\n        new Set<string>(),\n      ),\n    ];\n\n    const keyPath = this.usersManager.store.keyPath;\n\n    if (user[keyPath]) {\n      await this.usersManager.replaceOne(user as U);\n    } else {\n      await this.usersManager.insertOne(user as U);\n    }\n\n    return user as U;\n  }\n\n  async updateAccount(user: U, account: Account): Promise<U> {\n    await this.usersManager.updateAccount(user, account);\n    return user;\n  }\n}\n","import type { IncomingMessage } from 'http';\nimport type { Option } from 'cookies';\nimport Cookies from 'cookies';\n\nexport const COOKIE_NAME = 'connectedUser';\n\nexport const getTokenFromRequest = (\n  req: IncomingMessage,\n  options?: Pick<Option, Exclude<keyof Option, 'secure'>>,\n): string | undefined => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  const cookies = new Cookies(req, null as unknown as any, {\n    ...options,\n    secure: true,\n  });\n\n  return cookies.get(COOKIE_NAME);\n};\n","import { promisify } from 'util';\nimport type {\n  GetPublicKeyOrSecret,\n  Secret,\n  VerifyCallback,\n  VerifyOptions,\n} from 'jsonwebtoken';\nimport jsonwebtoken from 'jsonwebtoken';\nimport type { Logger } from 'nightingale-logger';\nimport type { User, UserSanitized } from '../../types.d';\nimport type MongoUsersManager from '../MongoUsersManager';\n\ntype Verify = (\n  token: string,\n  secretOrPublicKey: Secret | GetPublicKeyOrSecret,\n  options?: VerifyOptions,\n  callback?: VerifyCallback,\n) => void;\n\nconst verifyPromisified = promisify<\n  Parameters<Verify>[0],\n  Parameters<Verify>[1],\n  Parameters<Verify>[2],\n  Parameters<VerifyCallback>[1]\n>(jsonwebtoken.verify as Verify);\n\nconst createDecodeJWT =\n  (secretKey: string) =>\n  async (token: string, jwtAudience: string): Promise<string | undefined> => {\n    const result = await verifyPromisified(token, secretKey, {\n      algorithms: ['HS512'],\n      audience: jwtAudience,\n    });\n    return (result as any)?.connected as string | undefined;\n  };\n\nexport type FindConnectedAndUser<U extends User> = (\n  jwtAudience?: string,\n  token?: string,\n) => Promise<[null | undefined | U['_id'], null | undefined | U]>;\n\nexport const createFindConnectedAndUser = <\n  U extends User,\n  USanitized extends UserSanitized,\n>(\n  secretKey: string,\n  usersManager: MongoUsersManager<U, USanitized>,\n  logger: Logger,\n): FindConnectedAndUser<U> => {\n  const decodeJwt = createDecodeJWT(secretKey);\n\n  const findConnectedAndUser: FindConnectedAndUser<U> = async (\n    jwtAudience,\n    token,\n  ) => {\n    if (!token || !jwtAudience) return [null, null];\n\n    let connected;\n    try {\n      connected = await decodeJwt(token, jwtAudience);\n    } catch (err: unknown) {\n      logger.debug('failed to verify authentification', { err });\n    }\n\n    if (connected == null) return [null, null];\n\n    const user = await usersManager.findConnected(connected);\n\n    return [connected, user];\n  };\n\n  return findConnectedAndUser;\n};\n","import type { MongoInsertType, MongoStore, Update } from 'liwi-mongo';\nimport type { User, Account, UserSanitized } from '../types.d';\n\nexport default class MongoUsersManager<\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n> {\n  store: MongoStore<U>;\n\n  constructor(store: MongoStore<U>) {\n    this.store = store;\n  }\n\n  findConnected(connected: string): Promise<U | undefined> {\n    return this.store.findByKey(connected);\n  }\n\n  insertOne(user: MongoInsertType<U>): Promise<any> {\n    return this.store.insertOne(user);\n  }\n\n  replaceOne(user: U): Promise<any> {\n    return this.store.replaceOne(user);\n  }\n\n  sanitize(user: U): USanitized {\n    return this.sanitizeBaseUser(user) as USanitized;\n  }\n\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number;\n    emails?: string[];\n    provider: string;\n  }): Promise<U | undefined> {\n    let query: any = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length > 0) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return this.store.findOne(query);\n  }\n\n  updateAccount(user: U, account: Account): Promise<U> {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, {\n      $set: {\n        [`accounts.${accountIndex}`]: account,\n      },\n    } as Update<U>);\n  }\n\n  sanitizeBaseUser(user: U): UserSanitized {\n    return {\n      _id: user._id,\n      created: user.created,\n      updated: user.updated,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map((account: Account) => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { fetch } from 'alp-node';\nimport type { Tokens } from '../authentification/types';\nimport type { AccountService, FullName } from './types';\n\nexport default class UserAccountGoogleService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys>\n{\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'openid profile email',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens): Promise<any> {\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any): any {\n    return profile.id;\n  }\n\n  getAccountName(profile: any): string | null | undefined {\n    return profile.email;\n  }\n\n  getEmails(profile: any): string[] {\n    const emails: string[] = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile: any): string | null | undefined {\n    return profile.name;\n  }\n\n  getFullName(profile: any): FullName {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope: string): string[] {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string): string[] {\n    return !oldScope\n      ? newScope.split(' ')\n      : [...oldScope, ...newScope.split(' ')].filter(\n          (item, i, ar) => ar.indexOf(item) === i,\n        );\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { fetch } from 'alp-node';\nimport type { Tokens } from '../authentification/types';\nimport type { AccountService, FullName } from './types';\n\n// https://api.slack.com/methods/users.identity\n\nexport default class UserAccountSlackService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys>\n{\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'identity.basic identity.email identity.avatar',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens): Promise<any> {\n    return fetch(\n      `https://slack.com/api/users.identity?token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any): string | null {\n    if (\n      !profile ||\n      !profile.team ||\n      !profile.team.id ||\n      !profile.user ||\n      !profile.user.id\n    ) {\n      return null;\n    }\n    return `team:${profile.team.id as string};user:${\n      profile.user.id as string\n    }`;\n  }\n\n  getAccountName(profile: any): string | null | undefined {\n    return profile.user.email;\n  }\n\n  getEmails(profile: any): string[] {\n    return profile.user.email ? [profile.user.email] : [];\n  }\n\n  getDisplayName(profile: any): string | null | undefined {\n    return profile.user.name;\n  }\n\n  getFullName(profile: any): FullName | null {\n    return null;\n  }\n\n  getDefaultScope(newScope: string): string[] {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string): string[] {\n    return !oldScope\n      ? newScope.split(' ')\n      : [...oldScope, ...newScope.split(' ')].filter(\n          (item, i, ar) => ar.indexOf(item) === i,\n        );\n  }\n}\n","import type { NodeApplication } from 'alp-types';\nimport type { Option } from 'cookies';\nimport { Logger } from 'nightingale-logger';\nimport type { User } from '../types.d';\nimport type MongoUsersManager from './MongoUsersManager';\nimport { getTokenFromRequest } from './utils/cookies';\nimport { createFindConnectedAndUser } from './utils/createFindConnectedAndUser';\n\nconst logger = new Logger('alp:auth');\n\nexport const authSocketIO = <U extends User = User>(\n  app: NodeApplication,\n  usersManager: MongoUsersManager<U>,\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  io: any,\n  options?: Pick<Option, Exclude<keyof Option, 'secure'>>,\n): void => {\n  const findConnectedAndUser = createFindConnectedAndUser(\n    app.config.get<Map<string, string>>('authentication').get('secretKey')!,\n    usersManager,\n    logger,\n  );\n\n  const users = new Map();\n  io.users = users;\n\n  io.use(async (socket: any, next: any) => {\n    const handshakeData = socket.request;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const token = getTokenFromRequest(handshakeData);\n\n    if (!token) return next();\n\n    const [connected, user] = await findConnectedAndUser(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      handshakeData.headers['user-agent'],\n      token,\n    );\n\n    if (!connected || !user) return next();\n\n    socket.user = user;\n    users.set(socket.client.id, user);\n\n    socket.on('disconnected', () => users.delete(socket.client.id));\n\n    await next();\n  });\n};\n","import type { IncomingMessage } from 'http';\nimport type { NodeConfig } from 'alp-types';\nimport { Logger } from 'nightingale-logger';\nimport type { User } from '../types.d';\nimport type MongoUsersManager from './MongoUsersManager';\nimport { getTokenFromRequest, COOKIE_NAME } from './utils/cookies';\nimport { createFindConnectedAndUser } from './utils/createFindConnectedAndUser';\n\nconst logger = new Logger('alp:auth');\n\nconst getTokenFromReq = (\n  req: IncomingMessage & { cookies?: Record<string, string> },\n): string | undefined => {\n  if (req.cookies) return req.cookies[COOKIE_NAME];\n  return getTokenFromRequest(req);\n};\n\n/*\n * Not tested yet.\n * @internal\n */\nexport const createAuthApolloContext = <U extends User = User>(\n  config: NodeConfig,\n  usersManager: MongoUsersManager<U>,\n): any => {\n  const findConnectedAndUser = createFindConnectedAndUser(\n    config.get<Map<string, string>>('authentication').get('secretKey')!,\n    usersManager,\n    logger,\n  );\n\n  return async ({ req, connection }: { req: any; connection: any }) => {\n    if (connection?.user) {\n      return { user: connection.user };\n    }\n\n    if (!req) return null;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const token = getTokenFromReq(req);\n\n    if (!token) return { user: undefined };\n\n    const [, user] = await findConnectedAndUser(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      req.headers['user-agent'],\n      token,\n    );\n\n    return { user };\n  };\n};\n","import type { IncomingMessage } from 'http';\nimport { promisify } from 'util';\nimport type { Context } from 'alp-node';\nimport type { ContextState, NodeApplication } from 'alp-types';\nimport jsonwebtoken from 'jsonwebtoken';\nimport { Logger } from 'nightingale-logger';\nimport type { User, UserSanitized } from '../types.d';\nimport type MongoUsersManager from './MongoUsersManager';\nimport type {\n  AuthController as AuthControllerType,\n  AuthHooks,\n} from './createAuthController';\nimport { createAuthController } from './createAuthController';\nimport type { AuthRoutes as AuthRoutesType } from './createRoutes';\nimport { createRoutes } from './createRoutes';\nimport type { Strategies } from './services/authentification/AuthenticationService';\nimport { AuthenticationService } from './services/authentification/AuthenticationService';\nimport type { AllowedStrategyKeys } from './services/authentification/types';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport type { AccountService } from './services/user/types';\nimport { getTokenFromRequest, COOKIE_NAME } from './utils/cookies';\nimport { createFindConnectedAndUser } from './utils/createFindConnectedAndUser';\n\nexport { default as MongoUsersManager } from './MongoUsersManager';\nexport { default as UserAccountGoogleService } from './services/user/UserAccountGoogleService';\nexport { default as UserAccountSlackService } from './services/user/UserAccountSlackService';\nexport { authSocketIO } from './authSocketIO';\nexport { createAuthApolloContext } from './authApolloContext';\nexport { STATUSES } from './services/user/UserAccountsService';\n\ndeclare module 'alp-types' {\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  interface ContextState {\n    connected: NonNullable<ContextState['user']>['_id'] | null | undefined;\n    user: User | null | undefined;\n  }\n\n  interface ContextSanitizedState {\n    connected:\n      | NonNullable<ContextSanitizedState['user']>['_id']\n      | null\n      | undefined;\n    user: UserSanitized | null | undefined;\n  }\n\n  interface BaseContext {\n    setConnected: (\n      connected: NonNullable<ContextState['user']>['_id'],\n      user: NonNullable<ContextState['user']>,\n    ) => Promise<void>;\n    logout: () => void;\n  }\n}\n\nconst logger = new Logger('alp:auth');\n\nconst signPromisified: any = promisify(jsonwebtoken.sign);\n\nexport type AuthController = AuthControllerType;\nexport type AuthRoutes = AuthRoutesType;\nexport { AuthenticationService } from './services/authentification/AuthenticationService';\n\nexport default function init<\n  StrategyKeys extends AllowedStrategyKeys = 'google',\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n>({\n  homeRouterKey,\n  usersManager,\n  strategies,\n  defaultStrategy,\n  strategyToService,\n  authHooks,\n  jwtAudience,\n}: {\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager<U, USanitized>;\n  strategies: Strategies<StrategyKeys>;\n  defaultStrategy?: StrategyKeys;\n  strategyToService: Record<StrategyKeys, AccountService<any>>;\n  authHooks?: AuthHooks<StrategyKeys>;\n  jwtAudience?: string;\n}) {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  return (app: NodeApplication) => {\n    const userAccountsService = new UserAccountsService(\n      usersManager,\n      strategyToService,\n    );\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n      defaultStrategy,\n      authHooks,\n    });\n\n    app.context.setConnected = async function (\n      this: Context,\n      connected: NonNullable<ContextState['user']>['_id'],\n      user: NonNullable<ContextState['user']>,\n    ): Promise<void> {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await signPromisified(\n        { connected, time: Date.now() },\n        this.config\n          .get<Map<string, unknown>>('authentication')\n          .get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: jwtAudience || this.request.headers['user-agent'],\n          expiresIn: '30 days',\n        },\n      );\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function (this: Context): void {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    const getConnectedAndUser = createFindConnectedAndUser(\n      app.config\n        .get<Map<string, unknown>>('authentication')\n        .get('secretKey') as string,\n      usersManager,\n      logger,\n    );\n\n    return {\n      routes: createRoutes(controller),\n\n      getConnectedAndUserFromRequest: (\n        req: IncomingMessage,\n      ): ReturnType<typeof getConnectedAndUser> => {\n        const token = getTokenFromRequest(req);\n        return getConnectedAndUser(\n          jwtAudience || req.headers['user-agent'],\n          token,\n        );\n      },\n      getConnectedAndUser,\n\n      middleware: async <T>(\n        ctx: Context,\n        next: () => T | Promise<T>,\n      ): Promise<T> => {\n        const token = ctx.cookies.get(COOKIE_NAME);\n        const userAgent = ctx.request.headers['user-agent'];\n        logger.debug('middleware', { token });\n\n        const setState = (\n          connected: U['_id'] | null | undefined,\n          user: U | null | undefined,\n        ): void => {\n          ctx.state.connected = connected;\n          ctx.state.user = user;\n          ctx.sanitizedState.connected = connected;\n          ctx.sanitizedState.user = user && usersManager.sanitize(user);\n        };\n\n        const [connected, user] = await getConnectedAndUser(\n          jwtAudience || userAgent,\n          token,\n        );\n        logger.debug('middleware', { connected });\n\n        if (connected == null || user == null) {\n          if (token) ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          setState(null, null);\n          return next();\n        }\n\n        setState(connected, user);\n        return next();\n      },\n    };\n  };\n}\n"],"names":["createAuthController","usersManager","authenticationService","homeRouterKey","defaultStrategy","authHooks","login","ctx","strategy","namedParam","Error","params","paramsForLogin","redirectAuthUrl","addScope","state","connected","redirectTo","scopeKey","response","assert","connectedUser","accessResponse","afterLoginSuccess","afterScopeUpdate","keyPath","store","setConnected","logout","createRoutes","controller","segment","add","defaultRoute","randomBytesPromisified","promisify","randomBytes","randomHex","size","buffer","toString","logger","Logger","AuthenticationService","EventEmitter","constructor","config","strategies","userAccountsService","generateAuthUrl","debug","strategyInstance","type","oauth2","authorizationCode","authorizeURL","getTokens","options","result","getToken","code","redirect_uri","redirectUri","accessToken","access_token","refreshToken","refresh_token","tokenType","token_type","expiresIn","expires_in","expireDate","d","Date","setTime","getTime","idToken","id_token","tokensParam","token","create","refresh","tokens","host","get","request","urlGenerator","user","accountId","scope","getScope","cookies","set","JSON","stringify","isLoginAccess","maxAge","httpOnly","secure","access_type","redirect","isConnected","hooks","query","error","status","expose","cookieName","cookie","expires","parse","findOrCreateFromStrategy","account","update","refreshAccountTokens","tokenExpireDate","now","Promise","resolve","provider","then","updateAccount","STATUSES","VALIDATED","DELETED","UserAccountsService","strategyToService","userId","_id","service","newScope","scopeKeyToScope","accounts","find","join","subservice","profile","getProfile","getId","subservices","includes","push","replaceOne","emails","getEmails","findOneByAccountOrEmails","providerKey","info","Object","assign","displayName","getDisplayName","fullName","getFullName","name","getAccountName","userEmails","forEach","email","emailDomains","reduce","domains","split","Set","insertOne","COOKIE_NAME","getTokenFromRequest","req","Cookies","verifyPromisified","jsonwebtoken","verify","createDecodeJWT","secretKey","jwtAudience","algorithms","audience","createFindConnectedAndUser","decodeJwt","err","findConnected","MongoUsersManager","findByKey","sanitize","sanitizeBaseUser","length","$or","$in","findOne","accountIndex","indexOf","partialUpdateOne","$set","created","updated","map","UserAccountGoogleService","fetch","json","id","givenName","given_name","familyName","family_name","getDefaultScope","undefined","oldScope","filter","item","i","ar","UserAccountSlackService","team","authSocketIO","app","io","findConnectedAndUser","users","Map","use","socket","next","handshakeData","headers","client","on","delete","getTokenFromReq","createAuthApolloContext","connection","signPromisified","sign","init","context","time","algorithm","getConnectedAndUser","routes","getConnectedAndUserFromRequest","middleware","userAgent","setState","sanitizedState"],"mappings":"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"}