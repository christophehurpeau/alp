{"version":3,"file":"index-node10.es.js","sources":["../src/utils/generators.ts","../src/services/authentification/AuthenticationService.ts","../src/services/user/userAccountGoogleService.ts","../src/services/user/UserAccountsService.ts","../src/createAuthController.ts","../src/createRoutes.ts","../src/MongoUsersManager.ts","../src/index.ts"],"sourcesContent":["import { randomBytes } from 'crypto';\nimport { promisify } from 'util';\n\nconst randomBytesPromisified = promisify(randomBytes);\n\nexport async function randomBase64(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('base64');\n}\n\nexport async function randomHex(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('hex');\n}\n","/* eslint-disable camelcase, max-lines, @typescript-eslint/camelcase */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport { OAuthClient } from 'simple-oauth2';\nimport { NodeConfig } from 'alp-types';\nimport { randomHex } from '../../utils/generators';\nimport UserAccountsService from '../user/UserAccountsService';\nimport { AccountId, User, Account } from '../../../types.d';\nimport { Tokens } from './types';\n\nconst logger = new Logger('alp:auth:authentication');\n\nexport interface GenerateAuthUrlOptions {\n  accessType?: string;\n  grantType?: string;\n  includeGrantedScopes?: boolean;\n  loginHint?: string;\n  prompt?: string;\n  redirectUri?: string;\n  scope?: string;\n  state?: string;\n}\n\nexport interface GetTokensOptions {\n  code?: string;\n  redirectUri?: string;\n}\n\nexport interface Strategy {\n  type: string;\n  [key: string]: any;\n}\n\nexport interface Oauth2Strategy extends Strategy {\n  oauth2: OAuthClient;\n}\n\nexport interface Strategies {\n  [strategy: string]: Strategy;\n}\n\nexport default class AuthenticationService extends EventEmitter {\n  config: NodeConfig;\n\n  strategies: Strategies;\n\n  userAccountsService: UserAccountsService;\n\n  constructor(\n    config: NodeConfig,\n    strategies: Strategies,\n    userAccountsService: UserAccountsService,\n  ) {\n    super();\n    this.config = config;\n    this.strategies = strategies;\n    this.userAccountsService = userAccountsService;\n  }\n\n  /**\n   * @param {string} strategy\n   * @param {Object} options\n   * @param {string} [options.redirectUri]\n   * @param {string} [options.scope]\n   * Space-delimited set of permissions that the application requests.\n   * @param {string} [options.state]\n   * Any string that might be useful to your application upon receipt of the response\n   * @param {string} [options.grantType]\n   * @param {string} [options.accessType = 'online']\n   * online or offline\n   * @param {string} [options.prompt]\n   * Space-delimited, case-sensitive list of prompts to present the user.\n   * Values: none, consent, select_account\n   * @param {string} [options.loginHint] email address or sub identifier\n   * @param {boolean} [options.includeGrantedScopes]\n   * If this is provided with the value true, and the authorization request is granted,\n   * the authorization will include any previous authorizations granted\n   * to this user/application combination for other scopes\n   * @returns {string}\n   */\n  generateAuthUrl(strategy: string, options: GenerateAuthUrlOptions = {}) {\n    logger.debug('generateAuthUrl', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode.authorizeURL({\n          redirect_uri: options.redirectUri,\n          scope: options.scope,\n          state: options.state,\n          grant_type: options.grantType,\n          access_type: options.accessType,\n          login_hint: options.loginHint,\n          include_granted_scopes: options.includeGrantedScopes,\n        });\n    }\n  }\n\n  async getTokens(\n    strategy: string,\n    options: GetTokensOptions = {},\n  ): Promise<Tokens> {\n    logger.debug('getTokens', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const result = await strategyInstance.oauth2.authorizationCode.getToken(\n          {\n            code: options.code,\n            redirect_uri: options.redirectUri,\n          },\n        );\n        if (!result) return result;\n        return {\n          accessToken: result.access_token,\n          refreshToken: result.refresh_token,\n          tokenType: result.token_type,\n          expiresIn: result.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + result.expires_in * 1000);\n            return d;\n          })(),\n          idToken: result.id_token,\n        };\n        // return strategyInstance.accessToken.create(result);\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  async refreshToken(strategy: string, tokensParam: { refreshToken: string }) {\n    logger.debug('refreshToken', { strategy });\n    if (!tokensParam.refreshToken) {\n      throw new Error('Missing refresh token');\n    }\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const token: any = strategyInstance.oauth2.accessToken.create({\n          refresh_token: tokensParam.refreshToken,\n        });\n        const result = await token.refresh();\n        const tokens = result.token;\n        return {\n          accessToken: tokens.access_token,\n          tokenType: tokens.token_type,\n          expiresIn: tokens.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + tokens.expires_in * 1000);\n            return d;\n          })(),\n          idToken: tokens.id_token,\n        };\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  redirectUri(ctx: any, strategy: string) {\n    const host = `http${this.config.get('allowHttps') ? 's' : ''}://${\n      ctx.request.host\n    }`;\n    return `${host}${ctx.urlGenerator('loginResponse', { strategy })}`;\n  }\n\n  /**\n   *\n   * @param {Koa.Context} ctx\n   * @param {string} strategy\n   * @param {string} [refreshToken]\n   * @param {string} [scopeKey='login']\n   * @param user\n   * @param accountId\n   * @returns {*}\n   */\n  async redirectAuthUrl(\n    ctx: any,\n    strategy: string,\n    refreshToken?: string | undefined,\n    scopeKey?: string | undefined,\n    user?: User,\n    accountId?: AccountId,\n  ) {\n    logger.debug('redirectAuthUrl', { strategy, scopeKey, refreshToken });\n    const state = await randomHex(8);\n    const isLoginAccess = !scopeKey || scopeKey === 'login';\n    const scope = this.userAccountsService.getScope(\n      strategy,\n      scopeKey || 'login',\n      user,\n      accountId,\n    );\n\n    ctx.cookies.set(\n      `auth_${strategy}_${state}`,\n      JSON.stringify({\n        scopeKey,\n        scope,\n        isLoginAccess,\n      }),\n      {\n        maxAge: 10 * 60 * 1000,\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      },\n    );\n    const redirectUri = this.generateAuthUrl(strategy, {\n      redirectUri: this.redirectUri(ctx, strategy),\n      scope,\n      state,\n      accessType: refreshToken ? 'offline' : 'online',\n    });\n\n    return ctx.redirect(redirectUri);\n  }\n\n  /**\n   * @param {Koa.Context} ctx\n   * @param {string} strategy\n   * @param {boolean} isConnected\n   * @returns {*}\n   */\n  async accessResponse(ctx: any, strategy: string, isConnected?: boolean) {\n    if (ctx.query.error) {\n      const error: any = new Error(ctx.query.error);\n      error.status = 403;\n      error.expose = true;\n      throw error;\n    }\n\n    const code = ctx.query.code;\n    const state = ctx.query.state;\n    const cookieName = `auth_${strategy}_${state}`;\n    let cookie = ctx.cookies.get(cookieName);\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    if (!cookie) {\n      throw new Error('No cookie for this state');\n    }\n\n    cookie = JSON.parse(cookie);\n    if (!cookie || !cookie.scope) {\n      throw new Error('Unexpected cookie value');\n    }\n\n    if (!cookie.isLoginAccess) {\n      if (!isConnected) {\n        throw new Error('You are not connected');\n      }\n    }\n\n    const tokens: Tokens = await this.getTokens(strategy, {\n      code,\n      redirectUri: this.redirectUri(ctx, strategy),\n    });\n\n    if (cookie.isLoginAccess) {\n      const user = await this.userAccountsService.findOrCreateFromGoogle(\n        strategy,\n        tokens,\n        cookie.scope,\n        cookie.scopeKey,\n      );\n      return user;\n    }\n\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    const connectedUser = ctx.state.connected;\n    await this.userAccountsService.update(\n      connectedUser,\n      strategy,\n      tokens,\n      cookie.scope,\n      cookie.scopeKey,\n    );\n    return connectedUser;\n  }\n\n  refreshAccountTokens(user: User, account: Account) {\n    if (\n      account.tokenExpireDate &&\n      account.tokenExpireDate.getTime() > Date.now()\n    ) {\n      return Promise.resolve(false);\n    }\n    return this.refreshToken(account.provider, {\n      // accessToken: account.accessToken,\n      refreshToken: account.refreshToken as string,\n    }).then((tokens: Tokens) => {\n      if (!tokens) {\n        // serviceGoogle.updateFields({ accessToken:null, refreshToken:null, status: .OUTDATED });\n        return false;\n      }\n      account.accessToken = tokens.accessToken;\n      account.tokenExpireDate = tokens.expireDate;\n      return this.userAccountsService\n        .updateAccount(user, account)\n        .then(() => true);\n    });\n  }\n}\n","/* global fetch */\nimport EventEmitter from 'events';\nimport { Tokens } from '../authentification/types';\n\nexport default new class UserAccountGoogleService extends EventEmitter {\n  static scopeKeyToScope = {\n    login:\n      'openid profile email https://www.googleapis.com/auth/plus.profile.emails.read',\n  };\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens) {\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${\n        tokens.accessToken\n      }`,\n    ).then((response) => response.json());\n  }\n\n  isAccount(account: any, profile: any) {\n    return account.googleId === profile.id;\n  }\n\n  getId(profile: any) {\n    return profile.id;\n  }\n\n  getAccountName(profile: any) {\n    return profile.email;\n  }\n\n  getEmails(profile: any, plusProfile: any) {\n    const emails: string[] = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    if (plusProfile.emails) {\n      plusProfile.emails.forEach((email: any) => {\n        if (emails.indexOf(email.value) === -1) {\n          emails.push(email.value);\n        }\n      });\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile: any) {\n    return profile.name;\n  }\n\n  getFullName(profile: any) {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope: string) {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope\n          .concat(newScope.split(' '))\n          .filter((item: any, i: any, ar: string[]) => ar.indexOf(item) === i);\n  }\n}();\n","/* global fetch */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport { AccountId, User, Account } from '../../../types.d';\nimport MongoUsersManager from '../../MongoUsersManager';\nimport userAccountGoogleService from './userAccountGoogleService';\n\ninterface TokensObject {\n  accessToken: string;\n  expireDate: Date;\n  idToken: string;\n  refreshToken?: string;\n  tokenType: string;\n}\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport const STATUSES = {\n  VALIDATED: 'validated',\n  DELETED: 'deleted',\n};\n\nexport default class UserAccountsService extends EventEmitter {\n  static strategyToService: { [key: string]: any } = {\n    google: userAccountGoogleService,\n  };\n\n  usersManager: MongoUsersManager;\n\n  constructor(usersManager: MongoUsersManager) {\n    super();\n    this.usersManager = usersManager;\n  }\n\n  getScope(\n    strategy: string,\n    scopeKey: string,\n    user?: User,\n    accountId?: AccountId,\n  ) {\n    logger.debug('getScope', { strategy, userId: user && user._id });\n    const service = UserAccountsService.strategyToService[strategy];\n    const newScope = service.constructor.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(\n    user: User,\n    strategy: string,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ) {\n    const service = UserAccountsService.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && service.isAccount(account, profile),\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && account.subservices.indexOf(subservice) === -1) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.replaceOne(user);\n    return user;\n  }\n\n  async findOrCreateFromGoogle(\n    strategy: string,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<User> {\n    if (strategy !== 'google') {\n      throw new Error('Not supported at the moment');\n    }\n\n    const service = UserAccountsService.strategyToService[strategy];\n\n    const profile = await service.getProfile(tokens);\n\n    const plusProfile = await fetch(\n      `https://www.googleapis.com/plus/v1/people/me?access_token=${\n        tokens.accessToken\n      }`,\n    ).then((response) => response.json());\n\n    const emails = service.getEmails(profile, plusProfile);\n\n    let user:\n      | Partial<User>\n      | undefined = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId: service.getId(profile),\n      emails,\n    });\n\n    logger.info(!user ? 'create user' : 'existing user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    const accountId = service.getId(profile);\n\n    let account: Partial<Account> | undefined = user.accounts.find(\n      (account: Account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      // @ts-ignore\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach((email: string) => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = [\n      ...user.emails.reduce(\n        (domains: Set<string>, email: string) =>\n          domains.add(email.split('@', 2)[1]),\n        new Set<string>(),\n      ),\n    ];\n\n    const keyPath: string = this.usersManager.store.keyPath;\n\n    if (user[keyPath]) {\n      await this.usersManager.replaceOne(user as User);\n    } else {\n      await this.usersManager.insertOne(user as User);\n    }\n\n    return user as User;\n  }\n\n  async updateAccount(user: User, account: Account): Promise<User> {\n    await this.usersManager.updateAccount(user, account);\n    return user;\n  }\n}\n","import AuthenticationService from './services/authentification/AuthenticationService';\nimport MongoUsersManager from './MongoUsersManager';\n\nexport interface CreateAuthControllerParams {\n  authenticationService: AuthenticationService;\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager;\n}\n\nexport interface AuthController {\n  login(ctx: any): Promise<void>;\n  loginResponse(ctx: any): Promise<void>;\n  logout(ctx: any): Promise<void>;\n}\n\nexport function createAuthController({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n}: CreateAuthControllerParams): AuthController {\n  return {\n    async login(ctx: any) {\n      const strategy = ctx.namedParam('strategy');\n      if (!strategy) throw new Error('Strategy missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy);\n    },\n\n    async loginResponse(ctx: any) {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(\n        ctx,\n        strategy,\n      );\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx: any) {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n","import { AuthController } from './createAuthController';\n\nexport interface AuthRoutes {\n  login: [string, (segment: any) => void];\n  logout: [string, AuthController['logout']];\n}\n\nexport const createRoutes = (controller: AuthController): AuthRoutes => ({\n  login: [\n    '/login/:strategy',\n    (segment: any) => {\n      segment.add('/response', controller.loginResponse, 'loginResponse');\n      segment.defaultRoute(controller.login, 'login');\n    },\n  ],\n  logout: ['/logout', controller.logout],\n});\n","import { MongoInsertType } from 'liwi-mongo';\nimport { Store, Update } from 'liwi-store';\nimport { User, Account, UserSanitized } from '../types.d';\n\nexport default class MongoUsersManager<\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized\n> {\n  store: Store<U, '_id', any, any, any>;\n\n  constructor(store: Store<U, '_id', any, any, any>) {\n    this.store = store;\n  }\n\n  findConnected(connected: string): Promise<U | undefined> {\n    return this.store.findByKey(connected);\n  }\n\n  insertOne(user: MongoInsertType<U>): Promise<any> {\n    return this.store.insertOne(user);\n  }\n\n  replaceOne(user: U): Promise<any> {\n    return this.store.replaceOne(user);\n  }\n\n  public sanitize(user: U): USanitized {\n    return this.sanitizeBaseUser(user) as USanitized;\n  }\n\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number;\n    emails?: Array<string>;\n    provider: string;\n  }): Promise<U | undefined> {\n    let query: any = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length !== 0) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    return this.store.findOne(query);\n  }\n\n  updateAccount(user: U, account: Account) {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, {\n      $set: {\n        [`accounts.${accountIndex}`]: account,\n      },\n    } as Update<U>);\n  }\n\n  protected sanitizeBaseUser(user: U): UserSanitized {\n    return {\n      _id: user._id,\n      created: user.created,\n      updated: user.updated,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map((account: Account) => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  }\n}\n","import { promisify } from 'util';\nimport { sign, verify } from 'jsonwebtoken';\nimport Logger from 'nightingale-logger';\nimport { NodeApplication } from 'alp-types';\nimport { Option } from 'cookies';\nimport { User } from '../types.d';\nimport AuthenticationService, {\n  Strategies,\n} from './services/authentification/AuthenticationService';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport {\n  createAuthController,\n  AuthController as AuthControllerType,\n} from './createAuthController';\nimport { createRoutes, AuthRoutesType } from './createRoutes';\nimport MongoUsersManager from './MongoUsersManager';\n\nexport { default as MongoUsersManager } from './MongoUsersManager';\nexport { STATUSES } from './services/user/UserAccountsService';\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nconst signPromisified: any = promisify(sign);\nconst verifyPromisified: any = promisify(verify);\n\ninterface ExtendedNodeApplication extends NodeApplication {\n  websocket?: any;\n}\n\nexport type AuthController = AuthControllerType;\nexport type AuthRoutes = AuthRoutesType;\n\nexport default function init<U extends User = User>({\n  usersManager,\n  strategies,\n  homeRouterKey,\n}: {\n  homeRouterKey?: string;\n  strategies: Strategies;\n  usersManager: MongoUsersManager<U>;\n}) {\n  return (\n    app: ExtendedNodeApplication,\n    options?: Pick<Option, Exclude<keyof Option, 'secure'>>,\n  ) => {\n    const userAccountsService = new UserAccountsService(usersManager);\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n    });\n\n    app.context.setConnected = async function(\n      connected: number | string,\n      user: U,\n    ) {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await signPromisified(\n        { connected, time: Date.now() },\n        this.config.get('authentication').get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: this.request.headers['user-agent'],\n          expiresIn: '30 days',\n        },\n      );\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function() {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    const decodeJwt = async (token: string, userAgent: string) => {\n      const result = await verifyPromisified(\n        token,\n        app.config.get('authentication').get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: userAgent,\n        },\n      );\n      return result && result.connected;\n    };\n\n    if (app.websocket) {\n      logger.debug('app has websocket');\n      // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires\n      const Cookies = require('cookies');\n\n      const users = new Map();\n      app.websocket.users = users;\n\n      app.websocket.use(async (socket: any, next: any) => {\n        const handshakeData = socket.request;\n        const cookies = new Cookies(handshakeData, null, {\n          ...options,\n          secure: true,\n        });\n        const token = cookies.get(COOKIE_NAME);\n        logger.debug('middleware websocket', { token });\n\n        if (!token) return next();\n\n        let connected;\n        try {\n          connected = await decodeJwt(\n            token,\n            handshakeData.headers['user-agent'],\n          );\n        } catch (err) {\n          logger.info('failed to verify authentication', { err });\n          return next();\n        }\n        logger.debug('middleware websocket', { connected });\n\n        if (!connected) return next();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) return next();\n\n        socket.user = user;\n        users.set(socket.client.id, user);\n\n        socket.on('disconnected', () => users.delete(socket.client.id));\n\n        await next();\n      });\n    }\n\n    return {\n      routes: createRoutes(controller),\n\n      middleware: async (ctx: any, next: any) => {\n        const token = ctx.cookies.get(COOKIE_NAME);\n        logger.debug('middleware', { token });\n\n        const setState = (connected: any, user: any) => {\n          ctx.state.connected = connected;\n          ctx.state.user = user;\n          ctx.sanitizedState.connected = connected;\n          ctx.sanitizedState.user = user && usersManager.sanitize(user);\n        };\n\n        const notConnected = () => {\n          setState(null, null);\n          return next();\n        };\n\n        if (!token) return notConnected();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, ctx.request.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentification', { err });\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n        logger.debug('middleware', { connected });\n\n        if (!connected) return notConnected();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) {\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n\n        setState(connected, user);\n        return next();\n      },\n    };\n  };\n}\n"],"names":["randomBytesPromisified","promisify","randomBytes","randomHex","size","buffer","toString","logger","Logger","AuthenticationService","EventEmitter","constructor","config","strategies","userAccountsService","generateAuthUrl","strategy","options","debug","strategyInstance","type","oauth2","authorizationCode","authorizeURL","redirect_uri","redirectUri","scope","state","grant_type","grantType","access_type","accessType","login_hint","loginHint","include_granted_scopes","includeGrantedScopes","getTokens","result","getToken","code","accessToken","access_token","refreshToken","refresh_token","tokenType","token_type","expiresIn","expires_in","expireDate","d","Date","setTime","getTime","idToken","id_token","Error","tokensParam","token","create","refresh","tokens","ctx","host","get","request","urlGenerator","redirectAuthUrl","scopeKey","user","accountId","getScope","cookies","set","JSON","stringify","isLoginAccess","maxAge","httpOnly","secure","redirect","accessResponse","isConnected","query","error","status","expose","cookieName","cookie","expires","parse","findOrCreateFromGoogle","connectedUser","connected","update","refreshAccountTokens","account","tokenExpireDate","now","Promise","resolve","provider","then","updateAccount","providerKey","getProfile","fetch","response","json","isAccount","profile","googleId","id","getId","getAccountName","email","getEmails","plusProfile","emails","push","forEach","indexOf","value","getDisplayName","name","getFullName","givenName","given_name","familyName","family_name","getDefaultScope","newScope","undefined","oldScope","split","concat","filter","item","i","ar","scopeKeyToScope","login","STATUSES","VALIDATED","DELETED","UserAccountsService","usersManager","userId","_id","service","strategyToService","accounts","find","join","subservice","subservices","replaceOne","findOneByAccountOrEmails","info","Object","assign","displayName","fullName","includes","userEmails","emailDomains","reduce","domains","add","Set","keyPath","store","insertOne","google","userAccountGoogleService","createAuthController","authenticationService","homeRouterKey","namedParam","loginResponse","assert","setConnected","logout","createRoutes","controller","segment","defaultRoute","MongoUsersManager","findConnected","findByKey","sanitize","sanitizeBaseUser","length","$or","$in","findOne","accountIndex","partialUpdateOne","$set","created","updated","map","COOKIE_NAME","signPromisified","sign","verifyPromisified","verify","init","app","context","time","algorithm","audience","headers","decodeJwt","userAgent","websocket","Cookies","require","users","Map","use","socket","next","handshakeData","err","client","on","delete","routes","middleware","setState","sanitizedState","notConnected"],"mappings":"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"}