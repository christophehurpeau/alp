{"version":3,"file":"index-node10.es.js","sources":["../src/utils/generators.ts","../src/services/authentification/AuthenticationService.ts","../src/services/user/UserAccountsService.ts","../src/createAuthController.ts","../src/createRoutes.ts","../src/utils/createDecodeJWT.ts","../src/MongoUsersManager.ts","../src/services/user/UserAccountGoogleService.ts","../src/services/user/UserAccountSlackService.ts","../src/authSocketIO.ts","../src/index.ts"],"sourcesContent":["import { randomBytes } from 'crypto';\nimport { promisify } from 'util';\n\nconst randomBytesPromisified = promisify(randomBytes);\n\nexport async function randomBase64(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('base64');\n}\n\nexport async function randomHex(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('hex');\n}\n","/* eslint-disable camelcase, max-lines, @typescript-eslint/camelcase */\nimport EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport { OAuthClient } from 'simple-oauth2';\nimport { NodeConfig } from 'alp-types';\nimport { randomHex } from '../../utils/generators';\nimport UserAccountsService from '../user/UserAccountsService';\nimport { AccountId, User, Account } from '../../../types.d';\nimport { AllowedStrategyKeys, Tokens } from './types';\n\nconst logger = new Logger('alp:auth:authentication');\n\nexport interface GenerateAuthUrlOptions {\n  accessType?: string;\n  grantType?: string;\n  includeGrantedScopes?: boolean;\n  loginHint?: string;\n  prompt?: string;\n  redirectUri?: string;\n  scope?: string;\n  state?: string;\n}\n\nexport interface GetTokensOptions {\n  code: string;\n  redirectUri: string;\n}\n\nexport interface Strategy {\n  type: string;\n}\n\nexport interface Oauth2Strategy<Params extends string> extends Strategy {\n  oauth2: OAuthClient<Params>;\n}\n\nexport type Strategies<StrategyKeys extends AllowedStrategyKeys> = Record<\n  StrategyKeys,\n  Oauth2Strategy<any>\n>;\n\nexport interface AccessResponseHooks<StrategyKeys> {\n  afterLoginSuccess?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    connectedUser: any,\n  ) => void | Promise<void>;\n\n  afterScopeUpdate?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    scopeKey: string,\n    account: Account,\n    user: User,\n  ) => void | Promise<void>;\n}\n\nexport default class AuthenticationService<\n  StrategyKeys extends AllowedStrategyKeys\n> extends EventEmitter {\n  config: NodeConfig;\n\n  strategies: Strategies<StrategyKeys>;\n\n  userAccountsService: UserAccountsService<StrategyKeys>;\n\n  constructor(\n    config: NodeConfig,\n    strategies: Strategies<StrategyKeys>,\n    userAccountsService: UserAccountsService<StrategyKeys>,\n  ) {\n    super();\n    this.config = config;\n    this.strategies = strategies;\n    this.userAccountsService = userAccountsService;\n  }\n\n  generateAuthUrl<T extends StrategyKeys>(strategy: T, params: any) {\n    logger.debug('generateAuthUrl', { strategy, params });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode.authorizeURL(params);\n      default:\n        throw new Error('Invalid strategy');\n    }\n  }\n\n  async getTokens(\n    strategy: StrategyKeys,\n    options: GetTokensOptions,\n  ): Promise<Tokens> {\n    logger.debug('getTokens', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const result = await strategyInstance.oauth2.authorizationCode.getToken(\n          {\n            code: options.code,\n            redirect_uri: options.redirectUri,\n          },\n        );\n        if (!result) return result;\n        return {\n          accessToken: result.access_token,\n          refreshToken: result.refresh_token,\n          tokenType: result.token_type,\n          expiresIn: result.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + result.expires_in * 1000);\n            return d;\n          })(),\n          idToken: result.id_token,\n        };\n        // return strategyInstance.accessToken.create(result);\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  async refreshToken(\n    strategy: StrategyKeys,\n    tokensParam: { refreshToken: string },\n  ) {\n    logger.debug('refreshToken', { strategy });\n    if (!tokensParam.refreshToken) {\n      throw new Error('Missing refresh token');\n    }\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const token: any = strategyInstance.oauth2.accessToken.create({\n          refresh_token: tokensParam.refreshToken,\n        });\n        const result = await token.refresh();\n        const tokens = result.token;\n        return {\n          accessToken: tokens.access_token,\n          tokenType: tokens.token_type,\n          expiresIn: tokens.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + tokens.expires_in * 1000);\n            return d;\n          })(),\n          idToken: tokens.id_token,\n        };\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  redirectUri(ctx: any, strategy: string) {\n    const host = `http${this.config.get('allowHttps') ? 's' : ''}://${\n      ctx.request.host\n    }`;\n    return `${host}${ctx.urlGenerator('loginResponse', { strategy })}`;\n  }\n\n  async redirectAuthUrl(\n    ctx: any,\n    strategy: StrategyKeys,\n    {\n      refreshToken,\n      scopeKey,\n      user,\n      accountId,\n    }: {\n      refreshToken?: string | undefined;\n      scopeKey?: string | undefined;\n      user?: User;\n      accountId?: AccountId;\n    },\n    params?: any,\n  ) {\n    logger.debug('redirectAuthUrl', { strategy, scopeKey, refreshToken });\n    const state = await randomHex(8);\n    const isLoginAccess = !scopeKey || scopeKey === 'login';\n    const scope = this.userAccountsService.getScope(\n      strategy,\n      scopeKey || 'login',\n      user,\n      accountId,\n    );\n\n    if (!scope) {\n      throw new Error('Invalid empty scope');\n    }\n\n    ctx.cookies.set(\n      `auth_${strategy}_${state}`,\n      JSON.stringify({\n        scopeKey,\n        scope,\n        isLoginAccess,\n      }),\n      {\n        maxAge: 10 * 60 * 1000,\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      },\n    );\n    const redirectUri = this.generateAuthUrl(strategy, {\n      redirect_uri: this.redirectUri(ctx, strategy),\n      scope,\n      state,\n      access_type: refreshToken ? 'offline' : 'online',\n      ...params,\n    });\n\n    return ctx.redirect(redirectUri);\n  }\n\n  async accessResponse<StrategyKey extends StrategyKeys>(\n    ctx: any,\n    strategy: StrategyKey,\n    isConnected: undefined | boolean,\n    hooks: AccessResponseHooks<StrategyKeys>,\n  ) {\n    if (ctx.query.error) {\n      const error: any = new Error(ctx.query.error);\n      error.status = 403;\n      error.expose = true;\n      throw error;\n    }\n\n    const code = ctx.query.code;\n    const state = ctx.query.state;\n    const cookieName = `auth_${strategy}_${state}`;\n    let cookie = ctx.cookies.get(cookieName);\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    if (!cookie) {\n      throw new Error('No cookie for this state');\n    }\n\n    cookie = JSON.parse(cookie);\n    if (!cookie || !cookie.scope) {\n      throw new Error('Unexpected cookie value');\n    }\n\n    if (!cookie.isLoginAccess) {\n      if (!isConnected) {\n        throw new Error('You are not connected');\n      }\n    }\n\n    const tokens: Tokens = await this.getTokens(strategy, {\n      code,\n      redirectUri: this.redirectUri(ctx, strategy),\n    });\n\n    if (cookie.isLoginAccess) {\n      const user = await this.userAccountsService.findOrCreateFromStrategy(\n        strategy,\n        tokens,\n        cookie.scope,\n        cookie.scopeKey,\n      );\n\n      if (hooks.afterLoginSuccess) {\n        await hooks.afterLoginSuccess(strategy, user);\n      }\n\n      return user;\n    }\n\n    const connectedUser = ctx.state.user;\n    const { account, user } = await this.userAccountsService.update(\n      connectedUser,\n      strategy,\n      tokens,\n      cookie.scope,\n      cookie.scopeKey,\n    );\n\n    if (hooks.afterScopeUpdate) {\n      await hooks.afterScopeUpdate(strategy, cookie.scopeKey, account, user);\n    }\n\n    return connectedUser;\n  }\n\n  refreshAccountTokens(user: User, account: Account) {\n    if (\n      account.tokenExpireDate &&\n      account.tokenExpireDate.getTime() > Date.now()\n    ) {\n      return Promise.resolve(false);\n    }\n    return this.refreshToken(account.provider as StrategyKeys, {\n      // accessToken: account.accessToken,\n      refreshToken: account.refreshToken as string,\n    }).then((tokens: Tokens) => {\n      if (!tokens) {\n        // serviceGoogle.updateFields({ accessToken:null, refreshToken:null, status: .OUTDATED });\n        return false;\n      }\n      account.accessToken = tokens.accessToken;\n      account.tokenExpireDate = tokens.expireDate;\n      return this.userAccountsService\n        .updateAccount(user, account)\n        .then(() => true);\n    });\n  }\n}\n","import EventEmitter from 'events';\nimport Logger from 'nightingale-logger';\nimport { AccountId, User, Account } from '../../../types.d';\nimport MongoUsersManager from '../../MongoUsersManager';\nimport { AllowedStrategyKeys } from '../authentification/types';\nimport { AccountService, TokensObject } from './types';\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport const STATUSES = {\n  VALIDATED: 'validated',\n  DELETED: 'deleted',\n};\n\nexport default class UserAccountsService<\n  StrategyKeys extends AllowedStrategyKeys\n> extends EventEmitter {\n  private readonly strategyToService: Record<StrategyKeys, AccountService<any>>;\n\n  usersManager: MongoUsersManager;\n\n  constructor(\n    usersManager: MongoUsersManager,\n    strategyToService: Record<StrategyKeys, AccountService<any>>,\n  ) {\n    super();\n    this.usersManager = usersManager;\n    this.strategyToService = strategyToService;\n  }\n\n  getScope(\n    strategy: StrategyKeys,\n    scopeKey: string,\n    user?: User,\n    accountId?: AccountId,\n  ) {\n    logger.debug('getScope', { strategy, userId: user && user._id });\n    const service = this.strategyToService[strategy];\n    if (!service) {\n      throw new Error('Strategy not supported');\n    }\n\n    const newScope = service.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(\n    user: User,\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ) {\n    const service = this.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.replaceOne(user);\n    return { user, account };\n  }\n\n  async findOrCreateFromStrategy(\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<User> {\n    const service = this.strategyToService[strategy];\n    if (!service) throw new Error('Strategy not supported');\n\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    if (!accountId) throw new Error('Invalid profile: no id found');\n\n    const emails = service.getEmails(profile);\n\n    let user:\n      | Partial<User>\n      | undefined = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId,\n      emails,\n    });\n\n    logger.info(!user ? 'create user' : 'existing user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    let account: Partial<Account> | undefined = user.accounts.find(\n      (account: Account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach((email: string) => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = [\n      ...user.emails.reduce(\n        (domains: Set<string>, email: string) =>\n          domains.add(email.split('@', 2)[1]),\n        new Set<string>(),\n      ),\n    ];\n\n    const keyPath: string = this.usersManager.store.keyPath;\n\n    if (user[keyPath]) {\n      await this.usersManager.replaceOne(user as User);\n    } else {\n      await this.usersManager.insertOne(user as User);\n    }\n\n    return user as User;\n  }\n\n  async updateAccount(user: User, account: Account): Promise<User> {\n    await this.usersManager.updateAccount(user, account);\n    return user;\n  }\n}\n","import { Context } from 'alp-node';\nimport AuthenticationService, {\n  AccessResponseHooks,\n} from './services/authentification/AuthenticationService';\nimport MongoUsersManager from './MongoUsersManager';\nimport {\n  AllowedStrategyKeys,\n  AllowedMapParamsStrategy,\n} from './services/authentification/types';\n\nexport interface CreateAuthControllerParams<\n  StrategyKeys extends AllowedStrategyKeys\n> {\n  authenticationService: AuthenticationService<StrategyKeys>;\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager;\n  defaultStrategy?: StrategyKeys;\n  authHooks?: AuthHooks<StrategyKeys>;\n}\n\nexport interface AuthController {\n  login(ctx: Context): Promise<void>;\n  addScope(ctx: Context): Promise<void>;\n  loginResponse(ctx: Context): Promise<void>;\n  logout(ctx: Context): Promise<void>;\n}\n\ntype OptionalRecord<K extends keyof any, T> = { [P in K]?: T };\n\nexport interface AuthHooks<StrategyKeys extends AllowedStrategyKeys>\n  extends AccessResponseHooks<StrategyKeys> {\n  paramsForLogin?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    ctx: Context,\n  ) =>\n    | void\n    | Promise<void>\n    | OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>\n    | Promise<OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>>;\n}\n\nexport function createAuthController<StrategyKeys extends AllowedStrategyKeys>({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n  defaultStrategy,\n  authHooks = {},\n}: CreateAuthControllerParams<StrategyKeys>): AuthController {\n  return {\n    async login(ctx: Context): Promise<void> {\n      const strategy = ctx.namedParam('strategy') || defaultStrategy;\n      if (!strategy) throw new Error('Strategy missing');\n      const params =\n        (authHooks.paramsForLogin &&\n          (await authHooks.paramsForLogin(strategy, ctx))) ||\n        {};\n      await authenticationService.redirectAuthUrl(ctx, strategy, {}, params);\n    },\n\n    async addScope(ctx: Context): Promise<void> {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy') || defaultStrategy;\n      if (!strategy) throw new Error('Strategy missing');\n      const scopeKey = ctx.namedParam('scopeKey');\n      if (!scopeKey) throw new Error('Scope missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy, { scopeKey });\n    },\n\n    async loginResponse(ctx: Context): Promise<void> {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(\n        ctx,\n        strategy,\n        ctx.state.connected,\n        {\n          afterLoginSuccess: authHooks.afterLoginSuccess,\n          afterScopeUpdate: authHooks.afterScopeUpdate,\n        },\n      );\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx: Context): Promise<void> {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n","import { AuthController } from './createAuthController';\n\nexport interface AuthRoutes {\n  login: [string, (segment: any) => void];\n  addScope: [string, AuthController['addScope']];\n  logout: [string, AuthController['logout']];\n}\n\nexport const createRoutes = (controller: AuthController): AuthRoutes => ({\n  login: [\n    '/login/:strategy?',\n    (segment: any) => {\n      segment.add('/response', controller.loginResponse, 'loginResponse');\n      segment.defaultRoute(controller.login, 'login');\n    },\n  ],\n  addScope: ['/auth/add-scope/:strategy/:scopeKey', controller.addScope],\n  logout: ['/logout', controller.logout],\n});\n","import { promisify } from 'util';\nimport { verify } from 'jsonwebtoken';\n\nconst verifyPromisified: any = promisify(verify);\n\nexport const createDecodeJWT = (secretKey: string) => async (\n  token: string,\n  userAgent: string,\n) => {\n  const result = await verifyPromisified(token, secretKey, {\n    algorithm: 'HS512',\n    audience: userAgent,\n  });\n  return result && result.connected;\n};\n","import { MongoInsertType } from 'liwi-mongo';\nimport { Store, Update } from 'liwi-store';\nimport { User, Account, UserSanitized } from '../types.d';\n\nexport default class MongoUsersManager<\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized\n> {\n  store: Store<U, '_id', any, any>;\n\n  constructor(store: Store<U, '_id', any, any>) {\n    this.store = store;\n  }\n\n  findConnected(connected: string): Promise<U | undefined> {\n    return this.store.findByKey(connected);\n  }\n\n  insertOne(user: MongoInsertType<U>): Promise<any> {\n    return this.store.insertOne(user);\n  }\n\n  replaceOne(user: U): Promise<any> {\n    return this.store.replaceOne(user);\n  }\n\n  sanitize(user: U): USanitized {\n    return this.sanitizeBaseUser(user) as USanitized;\n  }\n\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number;\n    emails?: string[];\n    provider: string;\n  }): Promise<U | undefined> {\n    let query: any = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length !== 0) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    return this.store.findOne(query);\n  }\n\n  updateAccount(user: U, account: Account) {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, {\n      $set: {\n        [`accounts.${accountIndex}`]: account,\n      },\n    } as Update<U>);\n  }\n\n  protected sanitizeBaseUser(user: U): UserSanitized {\n    return {\n      _id: user._id,\n      created: user.created,\n      updated: user.updated,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map((account: Account) => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  }\n}\n","/* global fetch */\nimport { Tokens } from '../authentification/types';\nimport { AccountService } from './types';\n\nexport default class UserAccountGoogleService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys> {\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'openid profile email',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens) {\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any) {\n    return profile.id;\n  }\n\n  getAccountName(profile: any) {\n    return profile.email;\n  }\n\n  getEmails(profile: any) {\n    const emails: string[] = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile: any) {\n    return profile.name;\n  }\n\n  getFullName(profile: any) {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope: string) {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope\n          .concat(newScope.split(' '))\n          .filter((item: any, i: any, ar: string[]) => ar.indexOf(item) === i);\n  }\n}\n","/* global fetch */\nimport { Tokens } from '../authentification/types';\nimport { AccountService } from './types';\n\n// https://api.slack.com/methods/users.identity\n\nexport default class UserAccountSlackService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys> {\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'identity.basic identity.email identity.avatar',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens) {\n    return fetch(\n      `https://slack.com/api/users.identity?token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any) {\n    if (\n      !profile ||\n      !profile.team ||\n      !profile.team.id ||\n      !profile.user ||\n      !profile.user.id\n    ) {\n      return null;\n    }\n    return `team:${profile.team.id};user:${profile.user.id}`;\n  }\n\n  getAccountName(profile: any) {\n    return profile.user.email;\n  }\n\n  getEmails(profile: any) {\n    return [profile.user.email];\n  }\n\n  getDisplayName(profile: any) {\n    return profile.user.name;\n  }\n\n  getFullName(profile: any) {\n    return null;\n  }\n\n  getDefaultScope(newScope: string) {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope\n          .concat(newScope.split(' '))\n          .filter((item: any, i: any, ar: string[]) => ar.indexOf(item) === i);\n  }\n}\n","import Cookies, { Option } from 'cookies';\nimport Logger from 'nightingale-logger';\nimport { NodeApplication } from 'alp-types';\nimport { User } from '../types.d';\nimport { createDecodeJWT } from './utils/createDecodeJWT';\nimport MongoUsersManager from './MongoUsersManager';\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nexport const authSocketIO = <U extends User = User>(\n  app: NodeApplication,\n  usersManager: MongoUsersManager<U>,\n  io: any,\n  options?: Pick<Option, Exclude<keyof Option, 'secure'>>,\n) => {\n  const decodeJwt = createDecodeJWT(\n    app.config.get('authentication').get('secretKey'),\n  );\n\n  const users = new Map();\n  io.users = users;\n\n  io.use(async (socket: any, next: any) => {\n    const handshakeData = socket.request;\n    const cookies = new Cookies(handshakeData, (null as unknown) as any, {\n      ...options,\n      secure: true,\n    });\n    const token = cookies.get(COOKIE_NAME);\n    logger.debug('middleware websocket', { token });\n\n    if (!token) return next();\n\n    let connected;\n    try {\n      connected = await decodeJwt(token, handshakeData.headers['user-agent']);\n    } catch (err) {\n      logger.info('failed to verify authentication', { err });\n      return next();\n    }\n    logger.debug('middleware websocket', { connected });\n\n    if (!connected) return next();\n\n    const user = await usersManager.findConnected(connected);\n\n    if (!user) return next();\n\n    socket.user = user;\n    users.set(socket.client.id, user);\n\n    socket.on('disconnected', () => users.delete(socket.client.id));\n\n    await next();\n  });\n};\n","import { promisify } from 'util';\nimport { sign } from 'jsonwebtoken';\nimport Logger from 'nightingale-logger';\nimport { NodeApplication } from 'alp-types';\nimport { User } from '../types.d';\nimport AuthenticationService, {\n  Strategies,\n} from './services/authentification/AuthenticationService';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport {\n  createAuthController,\n  AuthController as AuthControllerType,\n  AuthHooks,\n} from './createAuthController';\nimport { createRoutes, AuthRoutes as AuthRoutesType } from './createRoutes';\nimport MongoUsersManager from './MongoUsersManager';\nimport { createDecodeJWT } from './utils/createDecodeJWT';\nimport { AllowedStrategyKeys } from './services/authentification/types';\nimport { AccountService } from './services/user/types';\n\nexport { AuthenticationService };\nexport { default as MongoUsersManager } from './MongoUsersManager';\nexport {\n  default as UserAccountGoogleService,\n} from './services/user/UserAccountGoogleService';\nexport {\n  default as UserAccountSlackService,\n} from './services/user/UserAccountSlackService';\nexport { authSocketIO } from './authSocketIO';\nexport { STATUSES } from './services/user/UserAccountsService';\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nconst signPromisified: any = promisify(sign);\n\nexport type AuthController = AuthControllerType;\nexport type AuthRoutes = AuthRoutesType;\n\nexport default function init<\n  U extends User = User,\n  StrategyKeys extends AllowedStrategyKeys = 'google'\n>({\n  homeRouterKey,\n  usersManager,\n  strategies,\n  defaultStrategy,\n  strategyToService,\n  authHooks,\n}: {\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager<U>;\n  strategies: Strategies<StrategyKeys>;\n  defaultStrategy?: StrategyKeys;\n  strategyToService: Record<StrategyKeys, AccountService<any>>;\n  authHooks?: AuthHooks<StrategyKeys>;\n}) {\n  return (app: NodeApplication) => {\n    const userAccountsService = new UserAccountsService(\n      usersManager,\n      strategyToService,\n    );\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n      defaultStrategy,\n      authHooks,\n    });\n\n    app.context.setConnected = async function(\n      connected: number | string,\n      user: U,\n    ) {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await signPromisified(\n        { connected, time: Date.now() },\n        this.config.get('authentication').get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: this.request.headers['user-agent'],\n          expiresIn: '30 days',\n        },\n      );\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function() {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    const decodeJwt = createDecodeJWT(\n      app.config.get('authentication').get('secretKey'),\n    );\n    return {\n      routes: createRoutes(controller),\n\n      middleware: async (ctx: any, next: any) => {\n        const token = ctx.cookies.get(COOKIE_NAME);\n        logger.debug('middleware', { token });\n\n        const setState = (connected: any, user: any) => {\n          ctx.state.connected = connected;\n          ctx.state.user = user;\n          ctx.sanitizedState.connected = connected;\n          ctx.sanitizedState.user = user && usersManager.sanitize(user);\n        };\n\n        const notConnected = () => {\n          setState(null, null);\n          return next();\n        };\n\n        if (!token) return notConnected();\n\n        let connected;\n        try {\n          connected = await decodeJwt(token, ctx.request.headers['user-agent']);\n        } catch (err) {\n          logger.info('failed to verify authentification', { err });\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n        logger.debug('middleware', { connected });\n\n        if (!connected) return notConnected();\n\n        const user = await usersManager.findConnected(connected);\n\n        if (!user) {\n          ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n\n        setState(connected, user);\n        return next();\n      },\n    };\n  };\n}\n"],"names":["randomBytesPromisified","promisify","randomBytes","randomHex","size","buffer","toString","logger","Logger","AuthenticationService","EventEmitter","constructor","config","strategies","userAccountsService","generateAuthUrl","strategy","params","debug","strategyInstance","type","oauth2","authorizationCode","authorizeURL","Error","getTokens","options","result","getToken","code","redirect_uri","redirectUri","accessToken","access_token","refreshToken","refresh_token","tokenType","token_type","expiresIn","expires_in","expireDate","d","Date","setTime","getTime","idToken","id_token","tokensParam","token","create","refresh","tokens","ctx","host","get","request","urlGenerator","redirectAuthUrl","scopeKey","user","accountId","state","scope","getScope","cookies","set","JSON","stringify","isLoginAccess","maxAge","httpOnly","secure","access_type","redirect","accessResponse","isConnected","hooks","query","error","status","expose","cookieName","cookie","expires","parse","findOrCreateFromStrategy","afterLoginSuccess","connectedUser","account","update","afterScopeUpdate","refreshAccountTokens","tokenExpireDate","now","Promise","resolve","provider","then","updateAccount","STATUSES","VALIDATED","DELETED","UserAccountsService","usersManager","strategyToService","userId","_id","service","newScope","scopeKeyToScope","accounts","find","join","subservice","profile","getProfile","getId","subservices","includes","push","replaceOne","emails","getEmails","findOneByAccountOrEmails","providerKey","info","Object","assign","displayName","getDisplayName","fullName","getFullName","name","getAccountName","userEmails","forEach","email","emailDomains","reduce","domains","add","split","Set","keyPath","store","insertOne","createAuthController","authenticationService","homeRouterKey","defaultStrategy","authHooks","login","namedParam","paramsForLogin","addScope","connected","loginResponse","assert","setConnected","logout","createRoutes","controller","segment","defaultRoute","verifyPromisified","verify","createDecodeJWT","secretKey","userAgent","algorithm","audience","MongoUsersManager","findConnected","findByKey","sanitize","sanitizeBaseUser","length","$or","$in","findOne","accountIndex","indexOf","partialUpdateOne","$set","created","updated","map","UserAccountGoogleService","fetch","response","json","id","givenName","given_name","familyName","family_name","getDefaultScope","undefined","oldScope","concat","filter","item","i","ar","UserAccountSlackService","team","COOKIE_NAME","authSocketIO","app","io","decodeJwt","users","Map","use","socket","next","handshakeData","Cookies","headers","err","client","on","delete","signPromisified","sign","init","context","time","routes","middleware","setState","sanitizedState","notConnected"],"mappings":"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"}