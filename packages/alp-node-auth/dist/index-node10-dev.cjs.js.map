{"version":3,"file":"index-node10-dev.cjs.js","sources":["../src/utils/generators.ts","../src/services/authentification/AuthenticationService.ts","../src/services/user/UserAccountsService.ts","../src/createAuthController.ts","../src/createRoutes.ts","../src/utils/createDecodeJWT.ts","../src/MongoUsersManager.ts","../src/services/user/UserAccountGoogleService.ts","../src/services/user/UserAccountSlackService.ts","../src/authSocketIO.ts","../src/index.ts"],"sourcesContent":["import { randomBytes } from 'crypto';\nimport { promisify } from 'util';\n\nconst randomBytesPromisified = promisify(randomBytes);\n\nexport async function randomBase64(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('base64');\n}\n\nexport async function randomHex(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('hex');\n}\n","/* eslint-disable camelcase, max-lines, @typescript-eslint/camelcase */\nimport { EventEmitter } from 'events';\nimport Logger from 'nightingale-logger';\nimport { OAuthClient } from 'simple-oauth2';\nimport { NodeConfig } from 'alp-types';\nimport { randomHex } from '../../utils/generators';\nimport UserAccountsService from '../user/UserAccountsService';\nimport { AccountId, User, Account } from '../../../types.d';\nimport { AllowedStrategyKeys, Tokens } from './types';\n\nconst logger = new Logger('alp:auth:authentication');\n\nexport interface GenerateAuthUrlOptions {\n  accessType?: string;\n  grantType?: string;\n  includeGrantedScopes?: boolean;\n  loginHint?: string;\n  prompt?: string;\n  redirectUri?: string;\n  scope?: string;\n  state?: string;\n}\n\nexport interface GetTokensOptions {\n  code: string;\n  redirectUri: string;\n}\n\nexport interface Strategy {\n  type: string;\n}\n\nexport interface Oauth2Strategy<Params extends string> extends Strategy {\n  oauth2: OAuthClient<Params>;\n}\n\nexport type Strategies<StrategyKeys extends AllowedStrategyKeys> = Record<\n  StrategyKeys,\n  Oauth2Strategy<any>\n>;\n\nexport interface AccessResponseHooks<StrategyKeys> {\n  afterLoginSuccess?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    connectedUser: any,\n  ) => void | Promise<void>;\n\n  afterScopeUpdate?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    scopeKey: string,\n    account: Account,\n    user: User,\n  ) => void | Promise<void>;\n}\n\nexport default class AuthenticationService<\n  StrategyKeys extends AllowedStrategyKeys\n> extends EventEmitter {\n  config: NodeConfig;\n\n  strategies: Strategies<StrategyKeys>;\n\n  userAccountsService: UserAccountsService<StrategyKeys>;\n\n  constructor(\n    config: NodeConfig,\n    strategies: Strategies<StrategyKeys>,\n    userAccountsService: UserAccountsService<StrategyKeys>,\n  ) {\n    super();\n    this.config = config;\n    this.strategies = strategies;\n    this.userAccountsService = userAccountsService;\n  }\n\n  generateAuthUrl<T extends StrategyKeys>(strategy: T, params: any) {\n    logger.debug('generateAuthUrl', { strategy, params });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode.authorizeURL(params);\n      default:\n        throw new Error('Invalid strategy');\n    }\n  }\n\n  async getTokens(\n    strategy: StrategyKeys,\n    options: GetTokensOptions,\n  ): Promise<Tokens> {\n    logger.debug('getTokens', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const result = await strategyInstance.oauth2.authorizationCode.getToken(\n          {\n            code: options.code,\n            redirect_uri: options.redirectUri,\n          },\n        );\n        if (!result) return result;\n        return {\n          accessToken: result.access_token,\n          refreshToken: result.refresh_token,\n          tokenType: result.token_type,\n          expiresIn: result.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + result.expires_in * 1000);\n            return d;\n          })(),\n          idToken: result.id_token,\n        };\n        // return strategyInstance.accessToken.create(result);\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  async refreshToken(\n    strategy: StrategyKeys,\n    tokensParam: { refreshToken: string },\n  ) {\n    logger.debug('refreshToken', { strategy });\n    if (!tokensParam.refreshToken) {\n      throw new Error('Missing refresh token');\n    }\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const token: any = strategyInstance.oauth2.accessToken.create({\n          refresh_token: tokensParam.refreshToken,\n        });\n        const result = await token.refresh();\n        const tokens = result.token;\n        return {\n          accessToken: tokens.access_token,\n          tokenType: tokens.token_type,\n          expiresIn: tokens.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + tokens.expires_in * 1000);\n            return d;\n          })(),\n          idToken: tokens.id_token,\n        };\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  redirectUri(ctx: any, strategy: string) {\n    const host = `http${this.config.get('allowHttps') ? 's' : ''}://${\n      ctx.request.host\n    }`;\n    return `${host}${ctx.urlGenerator('loginResponse', { strategy })}`;\n  }\n\n  async redirectAuthUrl(\n    ctx: any,\n    strategy: StrategyKeys,\n    {\n      refreshToken,\n      scopeKey,\n      user,\n      accountId,\n    }: {\n      refreshToken?: string | undefined;\n      scopeKey?: string | undefined;\n      user?: User;\n      accountId?: AccountId;\n    },\n    params?: any,\n  ) {\n    logger.debug('redirectAuthUrl', { strategy, scopeKey, refreshToken });\n    const state = await randomHex(8);\n    const isLoginAccess = !scopeKey || scopeKey === 'login';\n    const scope = this.userAccountsService.getScope(\n      strategy,\n      scopeKey || 'login',\n      user,\n      accountId,\n    );\n\n    if (!scope) {\n      throw new Error('Invalid empty scope');\n    }\n\n    ctx.cookies.set(\n      `auth_${strategy}_${state}`,\n      JSON.stringify({\n        scopeKey,\n        scope,\n        isLoginAccess,\n      }),\n      {\n        maxAge: 10 * 60 * 1000,\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      },\n    );\n    const redirectUri = this.generateAuthUrl(strategy, {\n      redirect_uri: this.redirectUri(ctx, strategy),\n      scope,\n      state,\n      access_type: refreshToken ? 'offline' : 'online',\n      ...params,\n    });\n\n    return ctx.redirect(redirectUri);\n  }\n\n  async accessResponse<StrategyKey extends StrategyKeys>(\n    ctx: any,\n    strategy: StrategyKey,\n    isConnected: undefined | boolean,\n    hooks: AccessResponseHooks<StrategyKeys>,\n  ) {\n    if (ctx.query.error) {\n      const error: any = new Error(ctx.query.error);\n      error.status = 403;\n      error.expose = true;\n      throw error;\n    }\n\n    const code = ctx.query.code;\n    const state = ctx.query.state;\n    const cookieName = `auth_${strategy}_${state}`;\n    let cookie = ctx.cookies.get(cookieName);\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    if (!cookie) {\n      throw new Error('No cookie for this state');\n    }\n\n    cookie = JSON.parse(cookie);\n    if (!cookie || !cookie.scope) {\n      throw new Error('Unexpected cookie value');\n    }\n\n    if (!cookie.isLoginAccess) {\n      if (!isConnected) {\n        throw new Error('You are not connected');\n      }\n    }\n\n    const tokens: Tokens = await this.getTokens(strategy, {\n      code,\n      redirectUri: this.redirectUri(ctx, strategy),\n    });\n\n    if (cookie.isLoginAccess) {\n      const user = await this.userAccountsService.findOrCreateFromStrategy(\n        strategy,\n        tokens,\n        cookie.scope,\n        cookie.scopeKey,\n      );\n\n      if (hooks.afterLoginSuccess) {\n        await hooks.afterLoginSuccess(strategy, user);\n      }\n\n      return user;\n    }\n\n    const connectedUser = ctx.state.user;\n    const { account, user } = await this.userAccountsService.update(\n      connectedUser,\n      strategy,\n      tokens,\n      cookie.scope,\n      cookie.scopeKey,\n    );\n\n    if (hooks.afterScopeUpdate) {\n      await hooks.afterScopeUpdate(strategy, cookie.scopeKey, account, user);\n    }\n\n    return connectedUser;\n  }\n\n  refreshAccountTokens(user: User, account: Account) {\n    if (\n      account.tokenExpireDate &&\n      account.tokenExpireDate.getTime() > Date.now()\n    ) {\n      return Promise.resolve(false);\n    }\n    return this.refreshToken(account.provider as StrategyKeys, {\n      // accessToken: account.accessToken,\n      refreshToken: account.refreshToken as string,\n    }).then((tokens: Tokens) => {\n      if (!tokens) {\n        // serviceGoogle.updateFields({ accessToken:null, refreshToken:null, status: .OUTDATED });\n        return false;\n      }\n      account.accessToken = tokens.accessToken;\n      account.tokenExpireDate = tokens.expireDate;\n      return this.userAccountsService\n        .updateAccount(user, account)\n        .then(() => true);\n    });\n  }\n}\n","import { EventEmitter } from 'events';\nimport Logger from 'nightingale-logger';\nimport { AccountId, User, Account } from '../../../types.d';\nimport MongoUsersManager from '../../MongoUsersManager';\nimport { AllowedStrategyKeys } from '../authentification/types';\nimport { AccountService, TokensObject } from './types';\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport const STATUSES = {\n  VALIDATED: 'validated',\n  DELETED: 'deleted',\n};\n\nexport default class UserAccountsService<\n  StrategyKeys extends AllowedStrategyKeys\n> extends EventEmitter {\n  private readonly strategyToService: Record<StrategyKeys, AccountService<any>>;\n\n  usersManager: MongoUsersManager;\n\n  constructor(\n    usersManager: MongoUsersManager,\n    strategyToService: Record<StrategyKeys, AccountService<any>>,\n  ) {\n    super();\n    this.usersManager = usersManager;\n    this.strategyToService = strategyToService;\n  }\n\n  getScope(\n    strategy: StrategyKeys,\n    scopeKey: string,\n    user?: User,\n    accountId?: AccountId,\n  ) {\n    logger.debug('getScope', { strategy, userId: user?._id });\n    const service = this.strategyToService[strategy];\n    if (!service) {\n      throw new Error('Strategy not supported');\n    }\n\n    const newScope = service.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(\n    user: User,\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ) {\n    const service = this.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.replaceOne(user);\n    return { user, account };\n  }\n\n  async findOrCreateFromStrategy(\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<User> {\n    const service = this.strategyToService[strategy];\n    if (!service) throw new Error('Strategy not supported');\n\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    if (!accountId) throw new Error('Invalid profile: no id found');\n\n    const emails = service.getEmails(profile);\n\n    let user:\n      | Partial<User>\n      | undefined = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId,\n      emails,\n    });\n\n    logger.info(!user ? 'create user' : 'existing user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    let account: Partial<Account> | undefined = user.accounts.find(\n      (account: Account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach((email: string) => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = [\n      ...user.emails.reduce(\n        (domains: Set<string>, email: string) =>\n          domains.add(email.split('@', 2)[1]),\n        new Set<string>(),\n      ),\n    ];\n\n    const keyPath: string = this.usersManager.store.keyPath;\n\n    if (user[keyPath]) {\n      await this.usersManager.replaceOne(user as User);\n    } else {\n      await this.usersManager.insertOne(user as User);\n    }\n\n    return user as User;\n  }\n\n  async updateAccount(user: User, account: Account): Promise<User> {\n    await this.usersManager.updateAccount(user, account);\n    return user;\n  }\n}\n","import { Context } from 'alp-types';\nimport AuthenticationService, {\n  AccessResponseHooks,\n} from './services/authentification/AuthenticationService';\nimport MongoUsersManager from './MongoUsersManager';\nimport {\n  AllowedStrategyKeys,\n  AllowedMapParamsStrategy,\n} from './services/authentification/types';\n\nexport interface CreateAuthControllerParams<\n  StrategyKeys extends AllowedStrategyKeys\n> {\n  authenticationService: AuthenticationService<StrategyKeys>;\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager;\n  defaultStrategy?: StrategyKeys;\n  authHooks?: AuthHooks<StrategyKeys>;\n}\n\nexport interface AuthController {\n  login(ctx: Context): Promise<void>;\n  addScope(ctx: Context): Promise<void>;\n  loginResponse(ctx: Context): Promise<void>;\n  logout(ctx: Context): Promise<void>;\n}\n\ntype OptionalRecord<K extends keyof any, T> = { [P in K]?: T };\n\nexport interface AuthHooks<StrategyKeys extends AllowedStrategyKeys>\n  extends AccessResponseHooks<StrategyKeys> {\n  paramsForLogin?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    ctx: Context,\n  ) =>\n    | void\n    | Promise<void>\n    | OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>\n    | Promise<OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>>;\n}\n\nexport function createAuthController<StrategyKeys extends AllowedStrategyKeys>({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n  defaultStrategy,\n  authHooks = {},\n}: CreateAuthControllerParams<StrategyKeys>): AuthController {\n  return {\n    async login(ctx: Context): Promise<void> {\n      const strategy = ctx.namedParam('strategy') || defaultStrategy;\n      if (!strategy) throw new Error('Strategy missing');\n      const params =\n        (authHooks.paramsForLogin &&\n          (await authHooks.paramsForLogin(strategy, ctx))) ||\n        {};\n      await authenticationService.redirectAuthUrl(ctx, strategy, {}, params);\n    },\n\n    async addScope(ctx: Context): Promise<void> {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy') || defaultStrategy;\n      if (!strategy) throw new Error('Strategy missing');\n      const scopeKey = ctx.namedParam('scopeKey');\n      if (!scopeKey) throw new Error('Scope missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy, { scopeKey });\n    },\n\n    async loginResponse(ctx: Context): Promise<void> {\n      if (ctx.state.connected) {\n        ctx.redirect(ctx.urlGenerator(homeRouterKey));\n      }\n\n      const strategy = ctx.namedParam('strategy');\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(\n        ctx,\n        strategy,\n        ctx.state.connected,\n        {\n          afterLoginSuccess: authHooks.afterLoginSuccess,\n          afterScopeUpdate: authHooks.afterScopeUpdate,\n        },\n      );\n      const keyPath: string = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      ctx.state.connected = connectedUser;\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n\n    async logout(ctx: Context): Promise<void> {\n      ctx.logout();\n      await ctx.redirect(ctx.urlGenerator(homeRouterKey));\n    },\n  };\n}\n","import { AuthController } from './createAuthController';\n\nexport interface AuthRoutes {\n  login: [string, (segment: any) => void];\n  addScope: [string, AuthController['addScope']];\n  logout: [string, AuthController['logout']];\n}\n\nexport const createRoutes = (controller: AuthController): AuthRoutes => ({\n  login: [\n    '/login/:strategy?',\n    (segment: any) => {\n      segment.add('/response', controller.loginResponse, 'loginResponse');\n      segment.defaultRoute(controller.login, 'login');\n    },\n  ],\n  addScope: ['/auth/add-scope/:strategy/:scopeKey', controller.addScope],\n  logout: ['/logout', controller.logout],\n});\n","import { promisify } from 'util';\nimport { verify } from 'jsonwebtoken';\n\nconst verifyPromisified: any = promisify(verify);\n\nexport const createDecodeJWT = (secretKey: string) => async (\n  token: string,\n  userAgent: string,\n) => {\n  const result = await verifyPromisified(token, secretKey, {\n    algorithm: 'HS512',\n    audience: userAgent,\n  });\n  return result?.connected;\n};\n","import { MongoInsertType } from 'liwi-mongo';\nimport { Store, Update } from 'liwi-store';\nimport { User, Account, UserSanitized } from '../types.d';\n\nexport default class MongoUsersManager<\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized\n> {\n  store: Store<U, '_id', any, any>;\n\n  constructor(store: Store<U, '_id', any, any>) {\n    this.store = store;\n  }\n\n  findConnected(connected: string): Promise<U | undefined> {\n    return this.store.findByKey(connected);\n  }\n\n  insertOne(user: MongoInsertType<U>): Promise<any> {\n    return this.store.insertOne(user);\n  }\n\n  replaceOne(user: U): Promise<any> {\n    return this.store.replaceOne(user);\n  }\n\n  sanitize(user: U): USanitized {\n    return this.sanitizeBaseUser(user) as USanitized;\n  }\n\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number;\n    emails?: string[];\n    provider: string;\n  }): Promise<U | undefined> {\n    let query: any = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length !== 0) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    return this.store.findOne(query);\n  }\n\n  updateAccount(user: U, account: Account) {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, {\n      $set: {\n        [`accounts.${accountIndex}`]: account,\n      },\n    } as Update<U>);\n  }\n\n  protected sanitizeBaseUser(user: U): UserSanitized {\n    return {\n      _id: user._id,\n      created: user.created,\n      updated: user.updated,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map((account: Account) => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  }\n}\n","/* global fetch */\nimport { Tokens } from '../authentification/types';\nimport { AccountService } from './types';\n\nexport default class UserAccountGoogleService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys> {\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'openid profile email',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens) {\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any) {\n    return profile.id;\n  }\n\n  getAccountName(profile: any) {\n    return profile.email;\n  }\n\n  getEmails(profile: any) {\n    const emails: string[] = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile: any) {\n    return profile.name;\n  }\n\n  getFullName(profile: any) {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope: string) {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope\n          .concat(newScope.split(' '))\n          .filter((item: any, i: any, ar: string[]) => ar.indexOf(item) === i);\n  }\n}\n","/* global fetch */\nimport { Tokens } from '../authentification/types';\nimport { AccountService } from './types';\n\n// https://api.slack.com/methods/users.identity\n\nexport default class UserAccountSlackService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys> {\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'identity.basic identity.email identity.avatar',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens) {\n    return fetch(\n      `https://slack.com/api/users.identity?token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any) {\n    if (\n      !profile ||\n      !profile.team ||\n      !profile.team.id ||\n      !profile.user ||\n      !profile.user.id\n    ) {\n      return null;\n    }\n    return `team:${profile.team.id};user:${profile.user.id}`;\n  }\n\n  getAccountName(profile: any) {\n    return profile.user.email;\n  }\n\n  getEmails(profile: any) {\n    return [profile.user.email];\n  }\n\n  getDisplayName(profile: any) {\n    return profile.user.name;\n  }\n\n  getFullName(profile: any) {\n    return null;\n  }\n\n  getDefaultScope(newScope: string) {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string) {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope\n          .concat(newScope.split(' '))\n          .filter((item: any, i: any, ar: string[]) => ar.indexOf(item) === i);\n  }\n}\n","import Cookies, { Option } from 'cookies';\nimport Logger from 'nightingale-logger';\nimport { NodeApplication } from 'alp-types';\nimport { User } from '../types.d';\nimport { createDecodeJWT } from './utils/createDecodeJWT';\nimport MongoUsersManager from './MongoUsersManager';\n\nconst COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nexport const authSocketIO = <U extends User = User>(\n  app: NodeApplication,\n  usersManager: MongoUsersManager<U>,\n  io: any,\n  options?: Pick<Option, Exclude<keyof Option, 'secure'>>,\n) => {\n  const decodeJwt = createDecodeJWT(\n    app.config.get('authentication').get('secretKey'),\n  );\n\n  const users = new Map();\n  io.users = users;\n\n  io.use(async (socket: any, next: any) => {\n    const handshakeData = socket.request;\n    const cookies = new Cookies(handshakeData, (null as unknown) as any, {\n      ...options,\n      secure: true,\n    });\n    const token = cookies.get(COOKIE_NAME);\n    logger.debug('middleware websocket', { token });\n\n    if (!token) return next();\n\n    let connected;\n    try {\n      connected = await decodeJwt(token, handshakeData.headers['user-agent']);\n    } catch (err) {\n      logger.info('failed to verify authentication', { err });\n      return next();\n    }\n    logger.debug('middleware websocket', { connected });\n\n    if (!connected) return next();\n\n    const user = await usersManager.findConnected(connected);\n\n    if (!user) return next();\n\n    socket.user = user;\n    users.set(socket.client.id, user);\n\n    socket.on('disconnected', () => users.delete(socket.client.id));\n\n    await next();\n  });\n};\n","import { promisify } from 'util';\nimport { sign } from 'jsonwebtoken';\nimport Logger from 'nightingale-logger';\nimport { NodeApplication } from 'alp-types';\nimport { User } from '../types.d';\nimport AuthenticationService, {\n  Strategies,\n} from './services/authentification/AuthenticationService';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport {\n  createAuthController,\n  AuthController as AuthControllerType,\n  AuthHooks,\n} from './createAuthController';\nimport { createRoutes, AuthRoutes as AuthRoutesType } from './createRoutes';\nimport MongoUsersManager from './MongoUsersManager';\nimport { createDecodeJWT } from './utils/createDecodeJWT';\nimport { AllowedStrategyKeys } from './services/authentification/types';\nimport { AccountService } from './services/user/types';\n\nexport { AuthenticationService };\nexport { default as MongoUsersManager } from './MongoUsersManager';\nexport { default as UserAccountGoogleService } from './services/user/UserAccountGoogleService';\nexport { default as UserAccountSlackService } from './services/user/UserAccountSlackService';\nexport { authSocketIO } from './authSocketIO';\nexport { STATUSES } from './services/user/UserAccountsService';\n\nexport const COOKIE_NAME = 'connectedUser';\nconst logger = new Logger('alp:auth');\n\nconst signPromisified: any = promisify(sign);\n\nexport type AuthController = AuthControllerType;\nexport type AuthRoutes = AuthRoutesType;\n\nexport default function init<\n  U extends User = User,\n  StrategyKeys extends AllowedStrategyKeys = 'google'\n>({\n  homeRouterKey,\n  usersManager,\n  strategies,\n  defaultStrategy,\n  strategyToService,\n  authHooks,\n}: {\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager<U>;\n  strategies: Strategies<StrategyKeys>;\n  defaultStrategy?: StrategyKeys;\n  strategyToService: Record<StrategyKeys, AccountService<any>>;\n  authHooks?: AuthHooks<StrategyKeys>;\n}) {\n  return (app: NodeApplication) => {\n    const userAccountsService = new UserAccountsService(\n      usersManager,\n      strategyToService,\n    );\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n      defaultStrategy,\n      authHooks,\n    });\n\n    app.context.setConnected = async function(\n      connected: number | string,\n      user: U,\n    ) {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await signPromisified(\n        { connected, time: Date.now() },\n        this.config.get('authentication').get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: this.request.headers['user-agent'],\n          expiresIn: '30 days',\n        },\n      );\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function() {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    const decodeJwt = createDecodeJWT(\n      app.config.get('authentication').get('secretKey'),\n    );\n\n    const getConnectedAndUser = async (\n      userAgent: string,\n      token?: string,\n    ): Promise<[null | string | number, null | undefined | U]> => {\n      if (!token) return [null, null];\n\n      let connected;\n      try {\n        connected = await decodeJwt(token, userAgent);\n      } catch (err) {\n        logger.info('failed to verify authentification', { err });\n      }\n\n      if (connected == null) return [null, null];\n\n      const user = await usersManager.findConnected(connected);\n\n      return [connected, user];\n    };\n\n    return {\n      routes: createRoutes(controller),\n\n      getConnectedAndUser,\n\n      middleware: async (ctx: any, next: any) => {\n        const token = ctx.cookies.get(COOKIE_NAME);\n        const userAgent = ctx.request.headers['user-agent'];\n        logger.debug('middleware', { token });\n\n        const setState = (connected: any, user: null | undefined | U): void => {\n          ctx.state.connected = connected;\n          ctx.state.user = user;\n          ctx.sanitizedState.connected = connected;\n          ctx.sanitizedState.user = user && usersManager.sanitize(user);\n        };\n\n        const notConnected = () => {\n          setState(null, null);\n          return next();\n        };\n\n        const [connected, user] = await getConnectedAndUser(userAgent, token);\n        logger.debug('middleware', { connected });\n\n        if (connected == null || user == null) {\n          if (token) ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          return notConnected();\n        }\n\n        setState(connected, user);\n        return next();\n      },\n    };\n  };\n}\n"],"names":["randomBytesPromisified","promisify","randomBytes","randomHex","size","buffer","toString","logger","Logger","AuthenticationService","EventEmitter","constructor","config","strategies","userAccountsService","generateAuthUrl","strategy","params","debug","strategyInstance","type","oauth2","authorizationCode","authorizeURL","Error","getTokens","options","result","getToken","code","redirect_uri","redirectUri","accessToken","access_token","refreshToken","refresh_token","tokenType","token_type","expiresIn","expires_in","expireDate","d","Date","setTime","getTime","idToken","id_token","tokensParam","token","create","refresh","tokens","ctx","host","get","request","urlGenerator","redirectAuthUrl","scopeKey","user","accountId","state","scope","getScope","cookies","set","JSON","stringify","isLoginAccess","maxAge","httpOnly","secure","access_type","redirect","accessResponse","isConnected","hooks","query","error","status","expose","cookieName","cookie","expires","parse","findOrCreateFromStrategy","afterLoginSuccess","connectedUser","account","update","afterScopeUpdate","refreshAccountTokens","tokenExpireDate","now","Promise","resolve","provider","then","updateAccount","STATUSES","VALIDATED","DELETED","UserAccountsService","usersManager","strategyToService","userId","_id","service","newScope","scopeKeyToScope","accounts","find","join","subservice","profile","getProfile","getId","subservices","includes","push","replaceOne","emails","getEmails","findOneByAccountOrEmails","providerKey","info","Object","assign","displayName","getDisplayName","fullName","getFullName","name","getAccountName","userEmails","forEach","email","emailDomains","reduce","domains","add","split","Set","keyPath","store","insertOne","createAuthController","authenticationService","homeRouterKey","defaultStrategy","authHooks","login","namedParam","paramsForLogin","addScope","connected","loginResponse","assert","setConnected","logout","createRoutes","controller","segment","defaultRoute","verifyPromisified","verify","createDecodeJWT","secretKey","userAgent","algorithm","audience","MongoUsersManager","findConnected","findByKey","sanitize","sanitizeBaseUser","length","$or","$in","findOne","accountIndex","indexOf","partialUpdateOne","$set","created","updated","map","UserAccountGoogleService","fetch","response","json","id","givenName","given_name","familyName","family_name","getDefaultScope","undefined","oldScope","concat","filter","item","i","ar","UserAccountSlackService","team","COOKIE_NAME","authSocketIO","app","io","decodeJwt","users","Map","use","socket","next","handshakeData","Cookies","headers","err","client","on","delete","signPromisified","sign","init","context","time","getConnectedAndUser","routes","middleware","setState","sanitizedState","notConnected"],"mappings":"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"}