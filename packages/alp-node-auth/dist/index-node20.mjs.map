{"version":3,"file":"index-node20.mjs","sources":["../src/createAuthController.ts","../src/createRoutes.ts","../src/utils/generators.ts","../src/services/authentification/AuthenticationService.ts","../src/services/user/UserAccountsService.ts","../src/utils/cookies.ts","../src/utils/createFindLoggedInUser.ts","../src/MongoUsersManager.ts","../src/services/user/UserAccountGoogleService.ts","../src/services/user/UserAccountSlackService.ts","../src/authSocketIO.ts","../src/authApolloContext.ts","../src/index.ts"],"sourcesContent":["import type { AlpRouteRef, Context } from \"alp-node\";\nimport type MongoUsersManager from \"./MongoUsersManager\";\nimport type {\n  AccessResponseHooks,\n  AuthenticationService,\n} from \"./services/authentification/AuthenticationService\";\nimport type {\n  AllowedMapParamsStrategy,\n  AllowedStrategyKeys,\n} from \"./services/authentification/types\";\nimport type { User, UserSanitized } from \"./types\";\n\nexport interface CreateAuthControllerParams<\n  StrategyKeys extends AllowedStrategyKeys,\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n> {\n  authenticationService: AuthenticationService<StrategyKeys, U, UserSanitized>;\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager<U, USanitized>;\n  defaultStrategy?: StrategyKeys;\n  authHooks?: AuthHooks<StrategyKeys>;\n}\n\nexport interface AuthController {\n  login: AlpRouteRef;\n  addScope: AlpRouteRef;\n  response: AlpRouteRef;\n  logout: AlpRouteRef;\n}\n\ntype OptionalRecord<K extends keyof any, T> = Partial<Record<K, T>>;\n\nexport interface AuthHooks<StrategyKeys extends AllowedStrategyKeys>\n  extends AccessResponseHooks<StrategyKeys> {\n  paramsForLogin?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    ctx: Context,\n  ) =>\n    | OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>\n    | Promise<OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>>\n    | Promise<void>\n    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n    | void;\n}\n\nexport function createAuthController<\n  StrategyKeys extends AllowedStrategyKeys,\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n>({\n  usersManager,\n  authenticationService,\n  homeRouterKey = \"/\",\n  defaultStrategy,\n  authHooks = {},\n}: CreateAuthControllerParams<StrategyKeys, U, USanitized>): AuthController {\n  return {\n    async login(ctx: Context): Promise<void> {\n      const strategy: StrategyKeys = (ctx.namedParam(\"strategy\") ||\n        defaultStrategy) as StrategyKeys;\n      if (!strategy) throw new Error(\"Strategy missing\");\n      const params =\n        (authHooks.paramsForLogin &&\n          (await authHooks.paramsForLogin(strategy, ctx))) ||\n        {};\n      await authenticationService.redirectAuthUrl(ctx, strategy, {}, params);\n    },\n\n    /**\n     * Add scope in existing\n     * The user must already be connected\n     */\n    async addScope(ctx: Context): Promise<void> {\n      if (!ctx.state.loggedInUser) {\n        ctx.redirectTo(homeRouterKey);\n        return;\n      }\n\n      const strategy: StrategyKeys = (ctx.namedParam(\"strategy\") ||\n        defaultStrategy) as StrategyKeys;\n      if (!strategy) throw new Error(\"Strategy missing\");\n      const scopeKey = ctx.namedParam(\"scopeKey\");\n      if (!scopeKey) throw new Error(\"Scope missing\");\n      await authenticationService.redirectAuthUrl(ctx, strategy, { scopeKey });\n    },\n\n    async response(ctx: Context): Promise<void> {\n      const strategy: StrategyKeys = ctx.namedParam(\"strategy\") as StrategyKeys;\n      ctx.assert(strategy);\n\n      const loggedInUser = await authenticationService.accessResponse(\n        ctx,\n        strategy,\n        !!ctx.state.loggedInUser,\n        {\n          afterLoginSuccess: authHooks.afterLoginSuccess,\n          afterScopeUpdate: authHooks.afterScopeUpdate,\n        },\n      );\n      const keyPath = usersManager.store.keyPath;\n      await ctx.setLoggedIn(loggedInUser[keyPath], loggedInUser);\n      ctx.redirectTo(homeRouterKey);\n    },\n\n    // eslint-disable-next-line @typescript-eslint/require-await -- keep async in case i later need await in this method\n    async logout(ctx: Context): Promise<void> {\n      ctx.logout();\n      ctx.redirectTo(homeRouterKey);\n    },\n  };\n}\n","import type { AuthController } from \"./createAuthController\";\n\nexport interface AuthRoutes {\n  login: [string, (segment: any) => void];\n  addScope: [string, AuthController[\"addScope\"]];\n  logout: [string, AuthController[\"logout\"]];\n}\n\nexport const createRoutes = (controller: AuthController): AuthRoutes => ({\n  login: [\n    \"/login/:strategy?\",\n    (segment: any) => {\n      segment.add(\"/response\", controller.response, \"authResponse\");\n      segment.defaultRoute(controller.login, \"login\");\n    },\n  ],\n  addScope: [\"/add-scope/:strategy/:scopeKey\", controller.addScope],\n  logout: [\"/logout\", controller.logout],\n});\n","import { randomBytes } from \"node:crypto\";\nimport { promisify } from \"node:util\";\n\nconst randomBytesPromisified = promisify(randomBytes);\n\nexport async function randomBase64(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString(\"base64\");\n}\n\nexport async function randomHex(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString(\"hex\");\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable camelcase */\nimport { EventEmitter } from \"node:events\";\nimport type { Context, NodeConfig } from \"alp-node\";\nimport { Logger } from \"nightingale-logger\";\nimport type { Strategy as Oauth2Strategy } from \"../../../strategies/strategies.d\";\nimport type { Account, AccountId, User, UserSanitized } from \"../../types\";\nimport { randomHex } from \"../../utils/generators\";\nimport type UserAccountsService from \"../user/UserAccountsService\";\nimport type { AllowedStrategyKeys, Tokens } from \"./types\";\n\nconst logger = new Logger(\"alp:auth:authentication\");\n\nexport interface GenerateAuthUrlOptions {\n  accessType?: string;\n  grantType?: string;\n  includeGrantedScopes?: boolean;\n  loginHint?: string;\n  prompt?: string;\n  redirectUri?: string;\n  scope?: string;\n  state?: string;\n}\n\nexport interface GetTokensOptions {\n  code: string;\n  redirectUri: string;\n}\n\nexport type Strategies<StrategyKeys extends AllowedStrategyKeys> = Record<\n  StrategyKeys,\n  Oauth2Strategy<any>\n>;\n\nexport interface AccessResponseHooks<StrategyKeys, U extends User = User> {\n  afterLoginSuccess?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    loggedInUser: U,\n  ) => Promise<void> | void;\n\n  afterScopeUpdate?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    scopeKey: string,\n    account: Account,\n    user: U,\n  ) => Promise<void> | void;\n}\n\nexport class AuthenticationService<\n  StrategyKeys extends AllowedStrategyKeys,\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n  // eslint-disable-next-line unicorn/prefer-event-target\n> extends EventEmitter {\n  config: NodeConfig;\n\n  strategies: Strategies<StrategyKeys>;\n\n  userAccountsService: UserAccountsService<StrategyKeys, U, USanitized>;\n\n  constructor(\n    config: NodeConfig,\n    strategies: Strategies<StrategyKeys>,\n    userAccountsService: UserAccountsService<StrategyKeys, U, USanitized>,\n  ) {\n    super();\n    this.config = config;\n    this.strategies = strategies;\n    this.userAccountsService = userAccountsService;\n  }\n\n  generateAuthUrl<T extends StrategyKeys>(strategy: T, params: any): string {\n    logger.debug(\"generateAuthUrl\", { strategy, params });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case \"oauth2\":\n        return strategyInstance.oauth2.authorizationCode.authorizeURL(params);\n      default:\n        throw new Error(\"Invalid strategy\");\n    }\n  }\n\n  async getTokens(\n    strategy: StrategyKeys,\n    options: GetTokensOptions,\n  ): Promise<Tokens> {\n    logger.debug(\"getTokens\", { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case \"oauth2\": {\n        const result = await strategyInstance.oauth2.authorizationCode.getToken(\n          {\n            code: options.code,\n            redirect_uri: options.redirectUri,\n          },\n        );\n        if (!result) return result;\n        const tokens = result.token;\n\n        return {\n          accessToken: tokens.access_token as string,\n          refreshToken: tokens.refresh_token as string,\n          tokenType: tokens.token_type as string,\n          expiresIn: tokens.expires_in as number,\n          expireDate: (() => {\n            if (tokens.expires_in == null) return null;\n            const d = new Date();\n            d.setTime(d.getTime() + (tokens.expires_in as number) * 1000);\n            return d;\n          })(),\n          idToken: tokens.id_token as string,\n        };\n        // return strategyInstance.accessToken.create(result);\n      }\n\n      default:\n        throw new Error(\"Invalid stategy\");\n    }\n  }\n\n  async refreshToken(\n    strategy: StrategyKeys,\n    tokensParam: { refreshToken: string },\n  ): Promise<Tokens> {\n    logger.debug(\"refreshToken\", { strategy });\n    if (!tokensParam.refreshToken) {\n      throw new Error(\"Missing refresh token\");\n    }\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case \"oauth2\": {\n        const token = strategyInstance.oauth2.clientCredentials.createToken({\n          refresh_token: tokensParam.refreshToken,\n        });\n        const result = await token.refresh();\n        const tokens = result.token;\n        return {\n          accessToken: tokens.access_token as string,\n          tokenType: tokens.token_type as string,\n          expiresIn: tokens.expires_in as number,\n          expireDate: (() => {\n            if (tokens.expires_in == null) return null;\n            const d = new Date();\n            d.setTime(d.getTime() + (tokens.expires_in as number) * 1000);\n            return d;\n          })(),\n          idToken: tokens.id_token as string,\n        };\n      }\n\n      default:\n        throw new Error(\"Invalid stategy\");\n    }\n  }\n\n  redirectUri(ctx: Context, strategy: string): string {\n    const host = `http${this.config.get(\"allowHttps\") ? \"s\" : \"\"}://${\n      ctx.request.host\n    }`;\n    return `${host}${ctx.urlGenerator(\"authResponse\", {\n      strategy,\n    })}`;\n  }\n\n  async redirectAuthUrl(\n    ctx: Context,\n    strategy: StrategyKeys,\n    {\n      refreshToken,\n      scopeKey,\n      user,\n      accountId,\n    }: {\n      refreshToken?: string | undefined;\n      scopeKey?: string | undefined;\n      user?: U;\n      accountId?: AccountId;\n    },\n    params?: any,\n  ): Promise<void> {\n    logger.debug(\"redirectAuthUrl\", { strategy, scopeKey, refreshToken });\n    const state = await randomHex(8);\n    const isLoginAccess = !scopeKey || scopeKey === \"login\";\n    const scope = this.userAccountsService.getScope(\n      strategy,\n      scopeKey || \"login\",\n      user,\n      accountId,\n    );\n\n    if (!scope) {\n      throw new Error(\"Invalid empty scope\");\n    }\n\n    ctx.cookies.set(\n      `auth_${strategy}_${state}`,\n      JSON.stringify({\n        scopeKey,\n        scope,\n        isLoginAccess,\n      }),\n      {\n        maxAge: 10 * 60 * 1000,\n        httpOnly: true,\n        secure: this.config.get(\"allowHttps\"),\n      },\n    );\n    const redirectUri = this.generateAuthUrl(strategy, {\n      redirect_uri: this.redirectUri(ctx, strategy),\n      scope,\n      state,\n      access_type: refreshToken ? \"offline\" : \"online\",\n      ...params,\n    });\n\n    ctx.redirect(redirectUri);\n  }\n\n  async accessResponse<StrategyKey extends StrategyKeys>(\n    ctx: Context,\n    strategy: StrategyKey,\n    isLoggedIn: boolean,\n    hooks: AccessResponseHooks<StrategyKeys, U>,\n  ): Promise<U> {\n    const errorParam = ctx.params.queryParam(\"error\").notEmpty();\n    if (errorParam.isValid()) {\n      ctx.throw(errorParam.value, 403);\n    }\n\n    const code = ctx.validParams.queryParam(\"code\").notEmpty().value;\n    const state = ctx.validParams.queryParam(\"state\").notEmpty().value;\n\n    const cookieName = `auth_${strategy}_${state}`;\n    const cookie = ctx.cookies.get(cookieName);\n    ctx.cookies.set(cookieName, \"\", { expires: new Date(1) });\n    if (!cookie) {\n      throw new Error(\"No cookie for this state\");\n    }\n\n    const parsedCookie = JSON.parse(cookie);\n    if (!parsedCookie?.scope) {\n      throw new Error(\"Unexpected cookie value\");\n    }\n\n    if (!parsedCookie.isLoginAccess) {\n      if (!isLoggedIn) {\n        throw new Error(\"You are not connected\");\n      }\n    }\n\n    const tokens: Tokens = await this.getTokens(strategy, {\n      code,\n      redirectUri: this.redirectUri(ctx, strategy),\n    });\n\n    if (parsedCookie.isLoginAccess) {\n      const user = await this.userAccountsService.findOrCreateFromStrategy(\n        strategy,\n        tokens,\n        parsedCookie.scope,\n        parsedCookie.scopeKey,\n      );\n\n      if (hooks.afterLoginSuccess) {\n        await hooks.afterLoginSuccess(strategy, user);\n      }\n\n      return user;\n    }\n\n    const loggedInUser = ctx.state.loggedInUser as U;\n    const { account, user } = await this.userAccountsService.update(\n      loggedInUser,\n      strategy,\n      tokens,\n      parsedCookie.scope,\n      parsedCookie.scopeKey,\n    );\n\n    if (hooks.afterScopeUpdate) {\n      await hooks.afterScopeUpdate(\n        strategy,\n        parsedCookie.scopeKey,\n        account,\n        user,\n      );\n    }\n\n    return loggedInUser;\n  }\n\n  refreshAccountTokens(user: U, account: Account): Promise<boolean> {\n    if (\n      account.tokenExpireDate &&\n      account.tokenExpireDate.getTime() > Date.now()\n    ) {\n      return Promise.resolve(false);\n    }\n    return this.refreshToken(account.provider as StrategyKeys, {\n      // accessToken: account.accessToken,\n      refreshToken: account.refreshToken!,\n    }).then((tokens: Tokens) => {\n      if (!tokens) {\n        // serviceGoogle.updateFields({ accessToken:null, refreshToken:null, status: .OUTDATED });\n        return false;\n      }\n      account.accessToken = tokens.accessToken;\n      account.tokenExpireDate = tokens.expireDate;\n      return this.userAccountsService\n        .updateAccount(user, account)\n        .then(() => true);\n    });\n  }\n}\n","import { EventEmitter } from \"node:events\";\nimport { Logger } from \"nightingale-logger\";\nimport type MongoUsersManager from \"../../MongoUsersManager\";\nimport type { Account, AccountId, User, UserSanitized } from \"../../types\";\nimport type { AllowedStrategyKeys } from \"../authentification/types\";\nimport type { AccountService, TokensObject } from \"./types\";\n\nconst logger = new Logger(\"alp:auth:userAccounts\");\n\nexport const STATUSES = {\n  VALIDATED: \"validated\",\n  DELETED: \"deleted\",\n};\n\nexport default class UserAccountsService<\n  StrategyKeys extends AllowedStrategyKeys,\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n  // eslint-disable-next-line unicorn/prefer-event-target\n> extends EventEmitter {\n  private readonly strategyToService: Record<StrategyKeys, AccountService<any>>;\n\n  usersManager: MongoUsersManager<U, USanitized>;\n\n  constructor(\n    usersManager: MongoUsersManager<U, USanitized>,\n    strategyToService: Record<StrategyKeys, AccountService<any>>,\n  ) {\n    super();\n    this.usersManager = usersManager;\n    this.strategyToService = strategyToService;\n  }\n\n  getScope(\n    strategy: StrategyKeys,\n    scopeKey: string,\n    user?: U,\n    accountId?: AccountId,\n  ): string {\n    logger.debug(\"getScope\", { strategy, userId: user?._id });\n    const service = this.strategyToService[strategy];\n    if (!service) {\n      throw new Error(\"Strategy not supported\");\n    }\n\n    const newScope = service.scopeKeyToScope[scopeKey]!;\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error(\"Could not found associated account\");\n    }\n    return service.getScope(account.scope, newScope).join(\" \");\n  }\n\n  async update(\n    user: U,\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<{ user: U; account: U[\"accounts\"][number] }> {\n    const service = this.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error(\"Could not found associated account\");\n    }\n    account.status = \"valid\";\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate !== undefined) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.replaceOne(user);\n    return { user, account };\n  }\n\n  async findOrCreateFromStrategy(\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<U> {\n    const service = this.strategyToService[strategy];\n    if (!service) throw new Error(\"Strategy not supported\");\n\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    if (!accountId) throw new Error(\"Invalid profile: no id found\");\n\n    const emails = service.getEmails(profile);\n\n    let user: Partial<U> | undefined =\n      await this.usersManager.findOneByAccountOrEmails({\n        provider: service.providerKey,\n        accountId,\n        emails,\n      });\n\n    logger.info(!user ? \"create user\" : \"existing user\", {\n      userId: user?._id,\n      accountId,\n      /*emails , user*/\n    });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    let account: Partial<Account> | undefined = user.accounts.find(\n      (account: Account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      user.accounts.push(account as Account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = \"valid\";\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate !== undefined) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach((email: string) => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = [\n      // eslint-disable-next-line unicorn/no-array-reduce\n      ...user.emails.reduce(\n        (domains: Set<string>, email: string) =>\n          domains.add(email.split(\"@\", 2)[1]!),\n        new Set<string>(),\n      ),\n    ];\n\n    const keyPath = this.usersManager.store.keyPath;\n\n    if (user[keyPath]) {\n      await this.usersManager.replaceOne(user as U);\n    } else {\n      await this.usersManager.insertOne(user as U);\n    }\n\n    return user as U;\n  }\n\n  async updateAccount(user: U, account: Account): Promise<U> {\n    await this.usersManager.updateAccount(user, account);\n    return user;\n  }\n}\n","import type { IncomingMessage } from \"node:http\";\nimport type { Option } from \"cookies\";\nimport Cookies from \"cookies\";\n\nexport const COOKIE_NAME_TOKEN = \"loggedInUserToken\";\nexport const COOKIE_NAME_STATE = \"loggedInUserState\";\n\nexport const getTokenFromRequest = (\n  req: IncomingMessage,\n  options?: Pick<Option, Exclude<keyof Option, \"secure\">>,\n): string | undefined => {\n  if (req.headers.authorization?.startsWith(\"Bearer \")) {\n    return req.headers.authorization.slice(\"Bearer \".length);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  const cookies = new Cookies(req, null as unknown as any, {\n    ...options,\n    secure: true,\n  });\n\n  return cookies.get(COOKIE_NAME_TOKEN);\n};\n","import { promisify } from \"node:util\";\nimport type {\n  GetPublicKeyOrSecret,\n  Secret,\n  VerifyCallback,\n  VerifyOptions,\n} from \"jsonwebtoken\";\nimport jsonwebtoken from \"jsonwebtoken\";\nimport type { Logger } from \"nightingale-logger\";\nimport type MongoUsersManager from \"../MongoUsersManager\";\nimport type { User, UserSanitized } from \"../types\";\n\ntype Verify = (\n  token: string,\n  secretOrPublicKey: GetPublicKeyOrSecret | Secret,\n  options?: VerifyOptions,\n  callback?: VerifyCallback,\n) => void;\n\nconst verifyPromisified = promisify<\n  Parameters<Verify>[0],\n  Parameters<Verify>[1],\n  Parameters<Verify>[2],\n  Parameters<VerifyCallback>[1]\n>(jsonwebtoken.verify as Verify);\n\nconst createDecodeJWT =\n  (secretKey: string) =>\n  async (token: string, jwtAudience: string): Promise<string | undefined> => {\n    const result = await verifyPromisified(token, secretKey, {\n      algorithms: [\"HS512\"],\n      audience: jwtAudience,\n    });\n    return (result as any)?.loggedInUserId as string | undefined;\n  };\n\nexport type FindLoggedInUser<U extends User> = (\n  jwtAudience?: string,\n  token?: string,\n) => Promise<[U[\"_id\"] | null | undefined, U | null | undefined]>;\n\nexport const createFindLoggedInUser = <\n  U extends User,\n  USanitized extends UserSanitized,\n>(\n  secretKey: string,\n  usersManager: MongoUsersManager<U, USanitized>,\n  logger: Logger,\n): FindLoggedInUser<U> => {\n  const decodeJwt = createDecodeJWT(secretKey);\n\n  const findLoggedInUser: FindLoggedInUser<U> = async (jwtAudience, token) => {\n    if (!token || !jwtAudience) return [null, null];\n\n    let loggedInUserId;\n    try {\n      loggedInUserId = await decodeJwt(token, jwtAudience);\n    } catch (error: unknown) {\n      logger.debug(\"failed to verify authentification\", { err: error });\n    }\n\n    if (loggedInUserId == null) return [null, null];\n\n    const loggedInUser = await usersManager.findById(loggedInUserId);\n\n    if (!loggedInUser) return [null, null];\n\n    return [loggedInUserId, loggedInUser];\n  };\n\n  return findLoggedInUser;\n};\n","import type { MongoInsertType, MongoStore, Update } from \"liwi-mongo\";\nimport type { Account, User, UserSanitized } from \"./types\";\n\nexport default class MongoUsersManager<\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n> {\n  store: MongoStore<U>;\n\n  constructor(store: MongoStore<U>) {\n    this.store = store;\n  }\n\n  /** @deprecated use findById instead */\n  findConnected(connected: string): Promise<U | undefined> {\n    return this.store.findByKey(connected);\n  }\n\n  findById(userId: string): Promise<U | undefined> {\n    return this.store.findByKey(userId);\n  }\n\n  insertOne(user: MongoInsertType<U>): Promise<any> {\n    return this.store.insertOne(user);\n  }\n\n  replaceOne(user: U): Promise<any> {\n    return this.store.replaceOne(user);\n  }\n\n  sanitize(user: U): USanitized {\n    return this.sanitizeBaseUser(user) as USanitized;\n  }\n\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: number | string;\n    emails?: string[];\n    provider: string;\n  }): Promise<U | undefined> {\n    let query: any = {\n      \"accounts.provider\": provider,\n      \"accounts.accountId\": accountId,\n    };\n\n    if (emails && emails.length > 0) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return this.store.findOne(query);\n  }\n\n  updateAccount(user: U, account: Account): Promise<U> {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error(\"Invalid account\");\n    }\n\n    return this.store.partialUpdateOne(user, {\n      $set: {\n        [`accounts.${accountIndex}`]: account,\n      },\n    } as Update<U>);\n  }\n\n  sanitizeBaseUser(user: U): UserSanitized {\n    return {\n      _id: user._id,\n      created: user.created,\n      updated: user.updated,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map((account: Account) => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport type { Tokens } from \"../authentification/types\";\nimport type { AccountService, FullName } from \"./types\";\n\nexport default class UserAccountGoogleService<ScopeKeys extends \"login\">\n  implements AccountService<ScopeKeys>\n{\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<\"login\", ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: \"openid profile email\",\n    };\n  }\n\n  providerKey = \"google\";\n\n  getProfile(tokens: Tokens): Promise<any> {\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any): any {\n    return profile.id;\n  }\n\n  getAccountName(profile: any): string | null | undefined {\n    return profile.email;\n  }\n\n  getEmails(profile: any): string[] {\n    const emails: string[] = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile: any): string | null | undefined {\n    return profile.name;\n  }\n\n  getFullName(profile: any): FullName {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope: string): string[] {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string): string[] {\n    return !oldScope\n      ? newScope.split(\" \")\n      : [...oldScope, ...newScope.split(\" \")].filter(\n          (item, i, ar) => ar.indexOf(item) === i,\n        );\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport type { Tokens } from \"../authentification/types\";\nimport type { AccountService, FullName } from \"./types\";\n\n// https://api.slack.com/methods/users.identity\n\nexport default class UserAccountSlackService<ScopeKeys extends \"login\">\n  implements AccountService<ScopeKeys>\n{\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<\"login\", ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: \"identity.basic identity.email identity.avatar\",\n    };\n  }\n\n  providerKey = \"google\";\n\n  getProfile(tokens: Tokens): Promise<any> {\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    return fetch(\n      `https://slack.com/api/users.identity?token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any): string | null {\n    if (!profile?.team?.id || !profile.user?.id) {\n      return null;\n    }\n    return `team:${profile.team.id as string};user:${\n      profile.user.id as string\n    }`;\n  }\n\n  getAccountName(profile: any): string | null | undefined {\n    return profile.user.email;\n  }\n\n  getEmails(profile: any): string[] {\n    return profile.user.email ? [profile.user.email] : [];\n  }\n\n  getDisplayName(profile: any): string | null | undefined {\n    return profile.user.name;\n  }\n\n  getFullName(profile: any): FullName | null {\n    return null;\n  }\n\n  getDefaultScope(newScope: string): string[] {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string): string[] {\n    return !oldScope\n      ? newScope.split(\" \")\n      : [...oldScope, ...newScope.split(\" \")].filter(\n          (item, i, ar) => ar.indexOf(item) === i,\n        );\n  }\n}\n","import type { NodeApplication } from \"alp-node\";\nimport { Logger } from \"nightingale-logger\";\nimport type MongoUsersManager from \"./MongoUsersManager\";\nimport type { User } from \"./types\";\nimport { getTokenFromRequest } from \"./utils/cookies\";\nimport { createFindLoggedInUser } from \"./utils/createFindLoggedInUser\";\n\nconst logger = new Logger(\"alp:auth\");\n\nexport const authSocketIO = <U extends User = User>(\n  app: NodeApplication,\n  usersManager: MongoUsersManager<U>,\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  io: any,\n  jwtAudience?: string,\n): void => {\n  const findLoggedInUser = createFindLoggedInUser(\n    app.config.get<{ secretKey: string }>(\"authentication\").secretKey,\n    usersManager,\n    logger,\n  );\n\n  const users = new Map();\n  io.users = users;\n\n  io.use(async (socket: any, next: any) => {\n    const handshakeData = socket.request;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const token = getTokenFromRequest(handshakeData);\n\n    if (!token) return next();\n\n    const [loggedInUserId, loggedInUser] = await findLoggedInUser(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      jwtAudience || handshakeData.headers[\"user-agent\"],\n      token,\n    );\n\n    if (!loggedInUserId || !loggedInUser) return next();\n\n    socket.user = loggedInUser;\n    users.set(socket.client.id, loggedInUser);\n\n    socket.on(\"disconnected\", () => users.delete(socket.client.id));\n\n    await next();\n  });\n};\n","import type { IncomingMessage } from \"node:http\";\nimport type { NodeConfig } from \"alp-node\";\nimport { Logger } from \"nightingale-logger\";\nimport type MongoUsersManager from \"./MongoUsersManager\";\nimport type { User } from \"./types\";\nimport { COOKIE_NAME_TOKEN, getTokenFromRequest } from \"./utils/cookies\";\nimport { createFindLoggedInUser } from \"./utils/createFindLoggedInUser\";\n\nconst logger = new Logger(\"alp:auth\");\n\nconst getTokenFromReq = (\n  req: IncomingMessage & { cookies?: Record<string, string> },\n): string | undefined => {\n  if (req.cookies) return req.cookies[COOKIE_NAME_TOKEN];\n  return getTokenFromRequest(req);\n};\n\n/*\n * Not tested yet.\n * @internal\n */\nexport const createAuthApolloContext = <U extends User = User>(\n  config: NodeConfig,\n  usersManager: MongoUsersManager<U>,\n): any => {\n  const findLoggedInUser = createFindLoggedInUser(\n    config.get<{ secretKey: string }>(\"authentication\").secretKey,\n    usersManager,\n    logger,\n  );\n\n  return async ({ req, connection }: { req: any; connection: any }) => {\n    if (connection?.loggedInUser) {\n      return { user: connection.loggedInUser };\n    }\n\n    if (!req) return null;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const token = getTokenFromReq(req);\n\n    if (!token) return { user: undefined };\n\n    const [, loggedInUser] = await findLoggedInUser(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      req.headers[\"user-agent\"],\n      token,\n    );\n\n    return { user: loggedInUser };\n  };\n};\n","import type { IncomingMessage } from \"node:http\";\nimport { promisify } from \"node:util\";\nimport type { Context, ContextState, NodeApplication } from \"alp-node\";\nimport jsonwebtoken from \"jsonwebtoken\";\nimport { Logger } from \"nightingale-logger\";\nimport type MongoUsersManager from \"./MongoUsersManager\";\nimport type {\n  AuthController as AuthControllerType,\n  AuthHooks,\n} from \"./createAuthController\";\nimport { createAuthController } from \"./createAuthController\";\nimport type { AuthRoutes as AuthRoutesType } from \"./createRoutes\";\nimport { createRoutes } from \"./createRoutes\";\nimport type { Strategies } from \"./services/authentification/AuthenticationService\";\nimport { AuthenticationService } from \"./services/authentification/AuthenticationService\";\nimport type { AllowedStrategyKeys } from \"./services/authentification/types\";\nimport UserAccountsService from \"./services/user/UserAccountsService\";\nimport type { AccountService } from \"./services/user/types\";\nimport type { User, UserSanitized } from \"./types\";\nimport {\n  COOKIE_NAME_STATE,\n  COOKIE_NAME_TOKEN,\n  getTokenFromRequest,\n} from \"./utils/cookies\";\nimport { createFindLoggedInUser } from \"./utils/createFindLoggedInUser\";\n\nexport { default as MongoUsersManager } from \"./MongoUsersManager\";\nexport { default as UserAccountGoogleService } from \"./services/user/UserAccountGoogleService\";\nexport { default as UserAccountSlackService } from \"./services/user/UserAccountSlackService\";\nexport { authSocketIO } from \"./authSocketIO\";\nexport { createAuthApolloContext } from \"./authApolloContext\";\nexport { STATUSES } from \"./services/user/UserAccountsService\";\n\nexport type * from \"./types\";\n\ndeclare module \"alp-node\" {\n  interface ContextState {\n    loggedInUserId:\n      | NonNullable<ContextState[\"loggedInUser\"]>[\"_id\"]\n      | null\n      | undefined;\n    loggedInUser: User | null | undefined;\n  }\n\n  interface ContextSanitizedState {\n    loggedInUserId:\n      | NonNullable<ContextSanitizedState[\"loggedInUser\"]>[\"_id\"]\n      | null\n      | undefined;\n    loggedInUser: UserSanitized | null | undefined;\n  }\n\n  interface BaseContext {\n    setLoggedIn: (\n      loggedInUserId: NonNullable<ContextState[\"loggedInUserId\"]>,\n      loggedInUser: NonNullable<ContextState[\"loggedInUser\"]>,\n    ) => Promise<void>;\n    logout: () => void;\n  }\n}\n\nconst logger = new Logger(\"alp:auth\");\n\nconst signPromisified: any = promisify(jsonwebtoken.sign);\n\nexport type AuthController = AuthControllerType;\nexport type AuthRoutes = AuthRoutesType;\nexport { AuthenticationService } from \"./services/authentification/AuthenticationService\";\n\nexport default function init<\n  StrategyKeys extends AllowedStrategyKeys = \"google\",\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n>({\n  homeRouterKey,\n  usersManager,\n  strategies,\n  defaultStrategy,\n  strategyToService,\n  authHooks,\n  jwtAudience,\n}: {\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager<U, USanitized>;\n  strategies: Strategies<StrategyKeys>;\n  defaultStrategy?: StrategyKeys;\n  strategyToService: Record<StrategyKeys, AccountService<any>>;\n  authHooks?: AuthHooks<StrategyKeys>;\n  jwtAudience?: string;\n}) {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  return (app: NodeApplication) => {\n    const userAccountsService = new UserAccountsService(\n      usersManager,\n      strategyToService,\n    );\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n      defaultStrategy,\n      authHooks,\n    });\n\n    app.context.setLoggedIn = async function setLoggedIn(\n      this: Context,\n      loggedInUserId: NonNullable<ContextState[\"loggedInUser\"]>[\"_id\"],\n      loggedInUser: NonNullable<ContextState[\"loggedInUser\"]>,\n    ): Promise<void> {\n      logger.debug(\"setLoggedIn\", { loggedInUser });\n      if (!loggedInUserId) {\n        throw new Error(\"Illegal value for setLoggedIn\");\n      }\n\n      this.state.loggedInUserId = loggedInUserId;\n      this.state.loggedInUser = loggedInUser;\n\n      const token = await signPromisified(\n        { loggedInUserId, time: Date.now() },\n        this.config\n          .get<Map<string, unknown>>(\"authentication\")\n          .get(\"secretKey\"),\n        {\n          algorithm: \"HS512\",\n          audience: jwtAudience || this.request.headers[\"user-agent\"],\n          expiresIn: \"30 days\",\n        },\n      );\n\n      const calcExpiresTime = (): number => {\n        const date = new Date();\n        date.setDate(date.getDate() + 30);\n        return date.getTime();\n      };\n\n      this.cookies.set(COOKIE_NAME_TOKEN, token, {\n        httpOnly: true,\n        secure: this.config.get(\"allowHttps\"),\n      });\n\n      this.cookies.set(\n        COOKIE_NAME_STATE,\n        JSON.stringify({ loggedInUserId, expiresIn: calcExpiresTime() }),\n        {\n          httpOnly: false,\n          secure: this.config.get(\"allowHttps\"),\n        },\n      );\n    };\n\n    app.context.logout = function logout(this: Context): void {\n      delete this.state.loggedInUserId;\n      delete this.state.loggedInUser;\n      this.cookies.set(COOKIE_NAME_TOKEN, \"\", { expires: new Date(1) });\n      this.cookies.set(COOKIE_NAME_STATE, \"\", { expires: new Date(1) });\n    };\n\n    const findLoggedInUser = createFindLoggedInUser(\n      app.config.get<{ secretKey: string }>(\"authentication\").secretKey,\n      usersManager,\n      logger,\n    );\n\n    return {\n      routes: createRoutes(controller),\n      findLoggedInUserFromRequest: (\n        req: IncomingMessage,\n      ): ReturnType<typeof findLoggedInUser> => {\n        const token = getTokenFromRequest(req);\n        return findLoggedInUser(\n          jwtAudience || req.headers[\"user-agent\"],\n          token,\n        );\n      },\n      findLoggedInUser,\n      middleware: async <T>(\n        ctx: Context,\n        next: () => Promise<T> | T,\n      ): Promise<T> => {\n        const token = ctx.cookies.get(COOKIE_NAME_TOKEN);\n        const userAgent = ctx.request.headers[\"user-agent\"];\n        logger.debug(\"middleware\", { token });\n\n        const setState = (\n          loggedInUserId: U[\"_id\"] | null | undefined,\n          loggedInUser: U | null | undefined,\n        ): void => {\n          ctx.state.loggedInUserId = loggedInUserId;\n          ctx.state.user = loggedInUser;\n          ctx.sanitizedState.loggedInUserId = loggedInUserId;\n          ctx.sanitizedState.loggedInUser =\n            loggedInUser && usersManager.sanitize(loggedInUser);\n        };\n\n        const [loggedInUserId, loggedInUser] = await findLoggedInUser(\n          jwtAudience || userAgent,\n          token,\n        );\n        logger.debug(\"middleware\", { loggedInUserId });\n\n        if (loggedInUserId == null || loggedInUser == null) {\n          if (token) {\n            ctx.cookies.set(COOKIE_NAME_TOKEN, \"\", { expires: new Date(1) });\n            ctx.cookies.set(COOKIE_NAME_STATE, \"\", { expires: new Date(1) });\n          }\n          setState(null, null);\n          return next();\n        }\n\n        setState(loggedInUserId, loggedInUser);\n        return next();\n      },\n    };\n  };\n}\n"],"names":["createAuthController","usersManager","authenticationService","homeRouterKey","defaultStrategy","authHooks","login","ctx","strategy","namedParam","Error","params","paramsForLogin","redirectAuthUrl","addScope","state","loggedInUser","redirectTo","scopeKey","response","assert","accessResponse","afterLoginSuccess","afterScopeUpdate","keyPath","store","setLoggedIn","logout","createRoutes","controller","segment","add","defaultRoute","randomBytesPromisified","promisify","randomBytes","randomHex","size","buffer","toString","logger","Logger","AuthenticationService","EventEmitter","constructor","config","strategies","userAccountsService","generateAuthUrl","debug","strategyInstance","type","oauth2","authorizationCode","authorizeURL","getTokens","options","result","getToken","code","redirect_uri","redirectUri","tokens","token","accessToken","access_token","refreshToken","refresh_token","tokenType","token_type","expiresIn","expires_in","expireDate","d","Date","setTime","getTime","idToken","id_token","tokensParam","clientCredentials","createToken","refresh","host","get","request","urlGenerator","user","accountId","scope","getScope","cookies","set","JSON","stringify","isLoginAccess","maxAge","httpOnly","secure","access_type","redirect","isLoggedIn","hooks","errorParam","queryParam","notEmpty","isValid","throw","value","validParams","cookieName","cookie","expires","parsedCookie","parse","findOrCreateFromStrategy","account","update","refreshAccountTokens","tokenExpireDate","now","Promise","resolve","provider","then","updateAccount","STATUSES","VALIDATED","DELETED","UserAccountsService","strategyToService","userId","_id","service","newScope","scopeKeyToScope","accounts","find","join","subservice","profile","getProfile","getId","status","undefined","subservices","includes","push","replaceOne","emails","getEmails","findOneByAccountOrEmails","providerKey","info","Object","assign","displayName","getDisplayName","fullName","getFullName","name","getAccountName","userEmails","forEach","email","emailDomains","reduce","domains","split","Set","insertOne","COOKIE_NAME_TOKEN","COOKIE_NAME_STATE","getTokenFromRequest","req","headers","authorization","startsWith","slice","Cookies","verifyPromisified","jsonwebtoken","verify","createDecodeJWT","secretKey","jwtAudience","algorithms","audience","loggedInUserId","createFindLoggedInUser","decodeJwt","error","err","findById","MongoUsersManager","findConnected","connected","findByKey","sanitize","sanitizeBaseUser","query","length","$or","$in","findOne","accountIndex","indexOf","partialUpdateOne","$set","created","updated","map","UserAccountGoogleService","fetch","json","id","givenName","given_name","familyName","family_name","getDefaultScope","oldScope","filter","item","i","ar","UserAccountSlackService","team","authSocketIO","app","io","findLoggedInUser","users","Map","use","socket","next","handshakeData","client","on","delete","getTokenFromReq","createAuthApolloContext","connection","signPromisified","sign","init","context","time","algorithm","date","setDate","getDate","routes","findLoggedInUserFromRequest","middleware","userAgent","setState","sanitizedState"],"mappings":"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"}