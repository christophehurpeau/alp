{"version":3,"file":"index-node14.mjs","sources":["../src/createAuthController.ts","../src/createRoutes.ts","../src/utils/generators.ts","../src/services/authentification/AuthenticationService.ts","../src/services/user/UserAccountsService.ts","../src/utils/cookies.ts","../src/utils/createFindConnectedAndUser.ts","../src/MongoUsersManager.ts","../src/services/user/UserAccountGoogleService.ts","../src/services/user/UserAccountSlackService.ts","../src/authSocketIO.ts","../src/authApolloContext.ts","../src/index.ts"],"sourcesContent":["import type { Context } from 'alp-node';\nimport 'alp-router';\nimport type { User, UserSanitized } from '../types.d';\nimport type MongoUsersManager from './MongoUsersManager';\nimport type {\n  AuthenticationService,\n  AccessResponseHooks,\n} from './services/authentification/AuthenticationService';\nimport type {\n  AllowedStrategyKeys,\n  AllowedMapParamsStrategy,\n} from './services/authentification/types';\n\nexport interface CreateAuthControllerParams<\n  StrategyKeys extends AllowedStrategyKeys,\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n> {\n  authenticationService: AuthenticationService<StrategyKeys, U, UserSanitized>;\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager<U, USanitized>;\n  defaultStrategy?: StrategyKeys;\n  authHooks?: AuthHooks<StrategyKeys>;\n}\n\nexport interface AuthController {\n  login: (ctx: Context) => Promise<void>;\n  addScope: (ctx: Context) => Promise<void>;\n  loginResponse: (ctx: Context) => Promise<void>;\n  logout: (ctx: Context) => Promise<void>;\n}\n\ntype OptionalRecord<K extends keyof any, T> = { [P in K]?: T };\n\nexport interface AuthHooks<StrategyKeys extends AllowedStrategyKeys>\n  extends AccessResponseHooks<StrategyKeys> {\n  paramsForLogin?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    ctx: Context,\n  ) => // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n  | void\n    | Promise<void>\n    | OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>\n    | Promise<OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>>;\n}\n\nexport function createAuthController<\n  StrategyKeys extends AllowedStrategyKeys,\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n>({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n  defaultStrategy,\n  authHooks = {},\n}: CreateAuthControllerParams<StrategyKeys, U, USanitized>): AuthController {\n  return {\n    async login(ctx: Context): Promise<void> {\n      const strategy: StrategyKeys = (ctx.namedParam('strategy') ||\n        defaultStrategy) as StrategyKeys;\n      if (!strategy) throw new Error('Strategy missing');\n      const params =\n        (authHooks.paramsForLogin &&\n          (await authHooks.paramsForLogin(strategy, ctx))) ||\n        {};\n      await authenticationService.redirectAuthUrl(ctx, strategy, {}, params);\n    },\n\n    async addScope(ctx: Context): Promise<void> {\n      if (ctx.state.connected) {\n        await ctx.redirectTo(homeRouterKey);\n        return;\n      }\n\n      const strategy: StrategyKeys = (ctx.namedParam('strategy') ||\n        defaultStrategy) as StrategyKeys;\n      if (!strategy) throw new Error('Strategy missing');\n      const scopeKey = ctx.namedParam('scopeKey');\n      if (!scopeKey) throw new Error('Scope missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy, { scopeKey });\n    },\n\n    async loginResponse(ctx: Context): Promise<void> {\n      if (ctx.state.connected) {\n        await ctx.redirectTo(homeRouterKey);\n        return;\n      }\n\n      const strategy: StrategyKeys = ctx.namedParam('strategy') as StrategyKeys;\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(\n        ctx,\n        strategy,\n        ctx.state.connected as boolean | undefined,\n        {\n          afterLoginSuccess: authHooks.afterLoginSuccess,\n          afterScopeUpdate: authHooks.afterScopeUpdate,\n        },\n      );\n      const keyPath = usersManager.store.keyPath;\n      await ctx.setConnected(connectedUser[keyPath], connectedUser);\n      await ctx.redirectTo(homeRouterKey);\n    },\n\n    async logout(ctx: Context): Promise<void> {\n      ctx.logout();\n      await ctx.redirectTo(homeRouterKey);\n    },\n  };\n}\n","import type { AuthController } from './createAuthController';\n\nexport interface AuthRoutes {\n  login: [string, (segment: any) => void];\n  addScope: [string, AuthController['addScope']];\n  logout: [string, AuthController['logout']];\n}\n\nexport const createRoutes = (controller: AuthController): AuthRoutes => ({\n  login: [\n    '/login/:strategy?',\n    (segment: any) => {\n      segment.add('/response', controller.loginResponse, 'loginResponse');\n      segment.defaultRoute(controller.login, 'login');\n    },\n  ],\n  addScope: ['/auth/add-scope/:strategy/:scopeKey', controller.addScope],\n  logout: ['/logout', controller.logout],\n});\n","import { randomBytes } from 'crypto';\nimport { promisify } from 'util';\n\nconst randomBytesPromisified = promisify(randomBytes);\n\nexport async function randomBase64(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('base64');\n}\n\nexport async function randomHex(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('hex');\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable camelcase, max-lines */\nimport { EventEmitter } from 'events';\nimport 'alp-router';\nimport type { Context, NodeConfig } from 'alp-types';\nimport { Logger } from 'nightingale-logger';\nimport type { OAuthClient } from 'simple-oauth2';\nimport type { AccountId, User, Account, UserSanitized } from '../../../types.d';\nimport { randomHex } from '../../utils/generators';\nimport type UserAccountsService from '../user/UserAccountsService';\nimport type { AllowedStrategyKeys, Tokens } from './types';\n\nconst logger = new Logger('alp:auth:authentication');\n\nexport interface GenerateAuthUrlOptions {\n  accessType?: string;\n  grantType?: string;\n  includeGrantedScopes?: boolean;\n  loginHint?: string;\n  prompt?: string;\n  redirectUri?: string;\n  scope?: string;\n  state?: string;\n}\n\nexport interface GetTokensOptions {\n  code: string;\n  redirectUri: string;\n}\n\nexport interface Strategy {\n  type: string;\n}\n\nexport interface Oauth2Strategy<Params extends string> extends Strategy {\n  oauth2: OAuthClient<Params>;\n}\n\nexport type Strategies<StrategyKeys extends AllowedStrategyKeys> = Record<\n  StrategyKeys,\n  Oauth2Strategy<any>\n>;\n\nexport interface AccessResponseHooks<StrategyKeys, U extends User = User> {\n  afterLoginSuccess?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    connectedUser: U,\n  ) => void | Promise<void>;\n\n  afterScopeUpdate?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    scopeKey: string,\n    account: Account,\n    user: U,\n  ) => void | Promise<void>;\n}\n\nexport class AuthenticationService<\n  StrategyKeys extends AllowedStrategyKeys,\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n> extends EventEmitter {\n  config: NodeConfig;\n\n  strategies: Strategies<StrategyKeys>;\n\n  userAccountsService: UserAccountsService<StrategyKeys, U, USanitized>;\n\n  constructor(\n    config: NodeConfig,\n    strategies: Strategies<StrategyKeys>,\n    userAccountsService: UserAccountsService<StrategyKeys, U, USanitized>,\n  ) {\n    super();\n    this.config = config;\n    this.strategies = strategies;\n    this.userAccountsService = userAccountsService;\n  }\n\n  generateAuthUrl<T extends StrategyKeys>(strategy: T, params: any): string {\n    logger.debug('generateAuthUrl', { strategy, params });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode.authorizeURL(params);\n      default:\n        throw new Error('Invalid strategy');\n    }\n  }\n\n  async getTokens(\n    strategy: StrategyKeys,\n    options: GetTokensOptions,\n  ): Promise<Tokens> {\n    logger.debug('getTokens', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const result = await strategyInstance.oauth2.authorizationCode.getToken(\n          {\n            code: options.code,\n            redirect_uri: options.redirectUri,\n          },\n        );\n        if (!result) return result;\n        return {\n          accessToken: result.access_token,\n          refreshToken: result.refresh_token,\n          tokenType: result.token_type,\n          expiresIn: result.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + result.expires_in * 1000);\n            return d;\n          })(),\n          idToken: result.id_token,\n        };\n        // return strategyInstance.accessToken.create(result);\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  async refreshToken(\n    strategy: StrategyKeys,\n    tokensParam: { refreshToken: string },\n  ): Promise<Tokens> {\n    logger.debug('refreshToken', { strategy });\n    if (!tokensParam.refreshToken) {\n      throw new Error('Missing refresh token');\n    }\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const token = strategyInstance.oauth2.accessToken.create({\n          refresh_token: tokensParam.refreshToken,\n        });\n        const result = await token.refresh();\n        const tokens = result.token;\n        return {\n          accessToken: tokens.access_token,\n          tokenType: tokens.token_type,\n          expiresIn: tokens.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + tokens.expires_in * 1000);\n            return d;\n          })(),\n          idToken: tokens.id_token,\n        };\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  redirectUri(ctx: Context, strategy: string): string {\n    const host = `http${this.config.get('allowHttps') ? 's' : ''}://${\n      ctx.request.host\n    }`;\n    return `${host}${ctx.urlGenerator('loginResponse', { strategy })}`;\n  }\n\n  async redirectAuthUrl(\n    ctx: Context,\n    strategy: StrategyKeys,\n    {\n      refreshToken,\n      scopeKey,\n      user,\n      accountId,\n    }: {\n      refreshToken?: string | undefined;\n      scopeKey?: string | undefined;\n      user?: U;\n      accountId?: AccountId;\n    },\n    params?: any,\n  ): Promise<void> {\n    logger.debug('redirectAuthUrl', { strategy, scopeKey, refreshToken });\n    const state = await randomHex(8);\n    const isLoginAccess = !scopeKey || scopeKey === 'login';\n    const scope = this.userAccountsService.getScope(\n      strategy,\n      scopeKey || 'login',\n      user,\n      accountId,\n    );\n\n    if (!scope) {\n      throw new Error('Invalid empty scope');\n    }\n\n    ctx.cookies.set(\n      `auth_${strategy}_${state}`,\n      JSON.stringify({\n        scopeKey,\n        scope,\n        isLoginAccess,\n      }),\n      {\n        maxAge: 10 * 60 * 1000,\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      },\n    );\n    const redirectUri = this.generateAuthUrl(strategy, {\n      redirect_uri: this.redirectUri(ctx, strategy),\n      scope,\n      state,\n      access_type: refreshToken ? 'offline' : 'online',\n      ...params,\n    });\n\n    return ctx.redirect(redirectUri);\n  }\n\n  async accessResponse<StrategyKey extends StrategyKeys>(\n    ctx: any,\n    strategy: StrategyKey,\n    isConnected: undefined | boolean,\n    hooks: AccessResponseHooks<StrategyKeys, U>,\n  ): Promise<U> {\n    if (ctx.query.error) {\n      const error: any = new Error(ctx.query.error);\n      error.status = 403;\n      error.expose = true;\n      throw error;\n    }\n\n    const code = ctx.query.code;\n    const state = ctx.query.state;\n    const cookieName = `auth_${strategy}_${state as string}`;\n    let cookie = ctx.cookies.get(cookieName);\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    if (!cookie) {\n      throw new Error('No cookie for this state');\n    }\n\n    cookie = JSON.parse(cookie);\n    if (!cookie || !cookie.scope) {\n      throw new Error('Unexpected cookie value');\n    }\n\n    if (!cookie.isLoginAccess) {\n      if (!isConnected) {\n        throw new Error('You are not connected');\n      }\n    }\n\n    const tokens: Tokens = await this.getTokens(strategy, {\n      code,\n      redirectUri: this.redirectUri(ctx, strategy),\n    });\n\n    if (cookie.isLoginAccess) {\n      const user = await this.userAccountsService.findOrCreateFromStrategy(\n        strategy,\n        tokens,\n        cookie.scope,\n        cookie.scopeKey,\n      );\n\n      if (hooks.afterLoginSuccess) {\n        await hooks.afterLoginSuccess(strategy, user);\n      }\n\n      return user;\n    }\n\n    const connectedUser = ctx.state.user;\n    const { account, user } = await this.userAccountsService.update(\n      connectedUser,\n      strategy,\n      tokens,\n      cookie.scope,\n      cookie.scopeKey,\n    );\n\n    if (hooks.afterScopeUpdate) {\n      await hooks.afterScopeUpdate(strategy, cookie.scopeKey, account, user);\n    }\n\n    return connectedUser;\n  }\n\n  refreshAccountTokens(user: U, account: Account): Promise<boolean> {\n    if (\n      account.tokenExpireDate &&\n      account.tokenExpireDate.getTime() > Date.now()\n    ) {\n      return Promise.resolve(false);\n    }\n    return this.refreshToken(account.provider as StrategyKeys, {\n      // accessToken: account.accessToken,\n      refreshToken: account.refreshToken!,\n    }).then((tokens: Tokens) => {\n      if (!tokens) {\n        // serviceGoogle.updateFields({ accessToken:null, refreshToken:null, status: .OUTDATED });\n        return false;\n      }\n      account.accessToken = tokens.accessToken;\n      account.tokenExpireDate = tokens.expireDate;\n      return this.userAccountsService\n        .updateAccount(user, account)\n        .then(() => true);\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/no-shadow */\nimport { EventEmitter } from 'events';\nimport { Logger } from 'nightingale-logger';\nimport type { AccountId, User, Account, UserSanitized } from '../../../types.d';\nimport type MongoUsersManager from '../../MongoUsersManager';\nimport type { AllowedStrategyKeys } from '../authentification/types';\nimport type { AccountService, TokensObject } from './types';\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport const STATUSES = {\n  VALIDATED: 'validated',\n  DELETED: 'deleted',\n};\n\nexport default class UserAccountsService<\n  StrategyKeys extends AllowedStrategyKeys,\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n> extends EventEmitter {\n  private readonly strategyToService: Record<StrategyKeys, AccountService<any>>;\n\n  usersManager: MongoUsersManager<U, USanitized>;\n\n  constructor(\n    usersManager: MongoUsersManager<U, USanitized>,\n    strategyToService: Record<StrategyKeys, AccountService<any>>,\n  ) {\n    super();\n    this.usersManager = usersManager;\n    this.strategyToService = strategyToService;\n  }\n\n  getScope(\n    strategy: StrategyKeys,\n    scopeKey: string,\n    user?: U,\n    accountId?: AccountId,\n  ): string {\n    logger.debug('getScope', { strategy, userId: user?._id });\n    const service = this.strategyToService[strategy];\n    if (!service) {\n      throw new Error('Strategy not supported');\n    }\n\n    const newScope = service.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(\n    user: U,\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<{ user: U; account: U['accounts'][number] }> {\n    const service = this.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.replaceOne(user);\n    return { user, account };\n  }\n\n  async findOrCreateFromStrategy(\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<U> {\n    const service = this.strategyToService[strategy];\n    if (!service) throw new Error('Strategy not supported');\n\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    if (!accountId) throw new Error('Invalid profile: no id found');\n\n    const emails = service.getEmails(profile);\n\n    let user: Partial<U> | undefined =\n      await this.usersManager.findOneByAccountOrEmails({\n        provider: service.providerKey,\n        accountId,\n        emails,\n      });\n\n    logger.info(!user ? 'create user' : 'existing user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    let account: Partial<Account> | undefined = user.accounts.find(\n      (account: Account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      // @ts-expect-error well...\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach((email: string) => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = [\n      // eslint-disable-next-line unicorn/no-array-reduce\n      ...user.emails.reduce(\n        (domains: Set<string>, email: string) =>\n          domains.add(email.split('@', 2)[1]),\n        new Set<string>(),\n      ),\n    ];\n\n    const keyPath = this.usersManager.store.keyPath;\n\n    if (user[keyPath]) {\n      await this.usersManager.replaceOne(user as U);\n    } else {\n      await this.usersManager.insertOne(user as U);\n    }\n\n    return user as U;\n  }\n\n  async updateAccount(user: U, account: Account): Promise<U> {\n    await this.usersManager.updateAccount(user, account);\n    return user;\n  }\n}\n","import type { IncomingMessage } from 'http';\nimport type { Option } from 'cookies';\nimport Cookies from 'cookies';\n\nexport const COOKIE_NAME = 'connectedUser';\n\nexport const getTokenFromRequest = (\n  req: IncomingMessage,\n  options?: Pick<Option, Exclude<keyof Option, 'secure'>>,\n): string | undefined => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  const cookies = new Cookies(req, null as unknown as any, {\n    ...options,\n    secure: true,\n  });\n\n  return cookies.get(COOKIE_NAME);\n};\n","import { promisify } from 'util';\nimport type {\n  GetPublicKeyOrSecret,\n  Secret,\n  VerifyCallback,\n  VerifyOptions,\n} from 'jsonwebtoken';\nimport jsonwebtoken from 'jsonwebtoken';\nimport type { Logger } from 'nightingale-logger';\nimport type { User, UserSanitized } from '../../types.d';\nimport type MongoUsersManager from '../MongoUsersManager';\n\ntype Verify = (\n  token: string,\n  secretOrPublicKey: Secret | GetPublicKeyOrSecret,\n  options?: VerifyOptions,\n  callback?: VerifyCallback,\n) => void;\n\nconst verifyPromisified = promisify<\n  Parameters<Verify>[0],\n  Parameters<Verify>[1],\n  Parameters<Verify>[2],\n  Parameters<VerifyCallback>[1]\n>(jsonwebtoken.verify as Verify);\n\nconst createDecodeJWT =\n  (secretKey: string) =>\n  async (token: string, jwtAudience: string): Promise<string | undefined> => {\n    const result = await verifyPromisified(token, secretKey, {\n      algorithms: ['HS512'],\n      audience: jwtAudience,\n    });\n    return (result as any)?.connected as string | undefined;\n  };\n\nexport type FindConnectedAndUser<U extends User> = (\n  jwtAudience?: string,\n  token?: string,\n) => Promise<[null | undefined | U['_id'], null | undefined | U]>;\n\nexport const createFindConnectedAndUser = <\n  U extends User,\n  USanitized extends UserSanitized,\n>(\n  secretKey: string,\n  usersManager: MongoUsersManager<U, USanitized>,\n  logger: Logger,\n): FindConnectedAndUser<U> => {\n  const decodeJwt = createDecodeJWT(secretKey);\n\n  const findConnectedAndUser: FindConnectedAndUser<U> = async (\n    jwtAudience,\n    token,\n  ) => {\n    if (!token || !jwtAudience) return [null, null];\n\n    let connected;\n    try {\n      connected = await decodeJwt(token, jwtAudience);\n    } catch (err: unknown) {\n      logger.debug('failed to verify authentification', { err });\n    }\n\n    if (connected == null) return [null, null];\n\n    const user = await usersManager.findConnected(connected);\n\n    return [connected, user];\n  };\n\n  return findConnectedAndUser;\n};\n","import type { MongoInsertType, MongoStore, Update } from 'liwi-mongo';\nimport type { User, Account, UserSanitized } from '../types.d';\n\nexport default class MongoUsersManager<\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n> {\n  store: MongoStore<U>;\n\n  constructor(store: MongoStore<U>) {\n    this.store = store;\n  }\n\n  findConnected(connected: string): Promise<U | undefined> {\n    return this.store.findByKey(connected);\n  }\n\n  insertOne(user: MongoInsertType<U>): Promise<any> {\n    return this.store.insertOne(user);\n  }\n\n  replaceOne(user: U): Promise<any> {\n    return this.store.replaceOne(user);\n  }\n\n  sanitize(user: U): USanitized {\n    return this.sanitizeBaseUser(user) as USanitized;\n  }\n\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number;\n    emails?: string[];\n    provider: string;\n  }): Promise<U | undefined> {\n    let query: any = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length > 0) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return this.store.findOne(query);\n  }\n\n  updateAccount(user: U, account: Account): Promise<U> {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, {\n      $set: {\n        [`accounts.${accountIndex}`]: account,\n      },\n    } as Update<U>);\n  }\n\n  protected sanitizeBaseUser(user: U): UserSanitized {\n    return {\n      _id: user._id,\n      created: user.created,\n      updated: user.updated,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map((account: Account) => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { fetch } from 'alp-node';\nimport type { Tokens } from '../authentification/types';\nimport type { AccountService, FullName } from './types';\n\nexport default class UserAccountGoogleService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys>\n{\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'openid profile email',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens): Promise<any> {\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any): any {\n    return profile.id;\n  }\n\n  getAccountName(profile: any): string | null | undefined {\n    return profile.email;\n  }\n\n  getEmails(profile: any): string[] {\n    const emails: string[] = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile: any): string | null | undefined {\n    return profile.name;\n  }\n\n  getFullName(profile: any): FullName {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope: string): string[] {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string): string[] {\n    return !oldScope\n      ? newScope.split(' ')\n      : [...oldScope, ...newScope.split(' ')].filter(\n          (item, i, ar) => ar.indexOf(item) === i,\n        );\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { fetch } from 'alp-node';\nimport type { Tokens } from '../authentification/types';\nimport type { AccountService, FullName } from './types';\n\n// https://api.slack.com/methods/users.identity\n\nexport default class UserAccountSlackService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys>\n{\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'identity.basic identity.email identity.avatar',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens): Promise<any> {\n    return fetch(\n      `https://slack.com/api/users.identity?token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any): string | null {\n    if (\n      !profile ||\n      !profile.team ||\n      !profile.team.id ||\n      !profile.user ||\n      !profile.user.id\n    ) {\n      return null;\n    }\n    return `team:${profile.team.id as string};user:${\n      profile.user.id as string\n    }`;\n  }\n\n  getAccountName(profile: any): string | null | undefined {\n    return profile.user.email;\n  }\n\n  getEmails(profile: any): string[] {\n    return profile.user.email ? [profile.user.email] : [];\n  }\n\n  getDisplayName(profile: any): string | null | undefined {\n    return profile.user.name;\n  }\n\n  getFullName(profile: any): FullName | null {\n    return null;\n  }\n\n  getDefaultScope(newScope: string): string[] {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string): string[] {\n    return !oldScope\n      ? newScope.split(' ')\n      : [...oldScope, ...newScope.split(' ')].filter(\n          (item, i, ar) => ar.indexOf(item) === i,\n        );\n  }\n}\n","import type { NodeApplication } from 'alp-types';\nimport type { Option } from 'cookies';\nimport { Logger } from 'nightingale-logger';\nimport type { User } from '../types.d';\nimport type MongoUsersManager from './MongoUsersManager';\nimport { getTokenFromRequest } from './utils/cookies';\nimport { createFindConnectedAndUser } from './utils/createFindConnectedAndUser';\n\nconst logger = new Logger('alp:auth');\n\nexport const authSocketIO = <U extends User = User>(\n  app: NodeApplication,\n  usersManager: MongoUsersManager<U>,\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  io: any,\n  options?: Pick<Option, Exclude<keyof Option, 'secure'>>,\n): void => {\n  const findConnectedAndUser = createFindConnectedAndUser(\n    app.config.get<Map<string, string>>('authentication').get('secretKey')!,\n    usersManager,\n    logger,\n  );\n\n  const users = new Map();\n  io.users = users;\n\n  io.use(async (socket: any, next: any) => {\n    const handshakeData = socket.request;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const token = getTokenFromRequest(handshakeData);\n\n    if (!token) return next();\n\n    const [connected, user] = await findConnectedAndUser(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      handshakeData.headers['user-agent'],\n      token,\n    );\n\n    if (!connected || !user) return next();\n\n    socket.user = user;\n    users.set(socket.client.id, user);\n\n    socket.on('disconnected', () => users.delete(socket.client.id));\n\n    await next();\n  });\n};\n","import type { IncomingMessage } from 'http';\nimport type { NodeConfig } from 'alp-types';\nimport { Logger } from 'nightingale-logger';\nimport type { User } from '../types.d';\nimport type MongoUsersManager from './MongoUsersManager';\nimport { getTokenFromRequest, COOKIE_NAME } from './utils/cookies';\nimport { createFindConnectedAndUser } from './utils/createFindConnectedAndUser';\n\nconst logger = new Logger('alp:auth');\n\nconst getTokenFromReq = (\n  req: IncomingMessage & { cookies?: Record<string, string> },\n): string | undefined => {\n  if (req.cookies) return req.cookies[COOKIE_NAME];\n  return getTokenFromRequest(req);\n};\n\n/*\n * Not tested yet.\n * @internal\n */\nexport const createAuthApolloContext = <U extends User = User>(\n  config: NodeConfig,\n  usersManager: MongoUsersManager<U>,\n): any => {\n  const findConnectedAndUser = createFindConnectedAndUser(\n    config.get<Map<string, string>>('authentication').get('secretKey')!,\n    usersManager,\n    logger,\n  );\n\n  return async ({ req, connection }: { req: any; connection: any }) => {\n    if (connection?.user) {\n      return { user: connection.user };\n    }\n\n    if (!req) return null;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const token = getTokenFromReq(req);\n\n    if (!token) return { user: undefined };\n\n    const [, user] = await findConnectedAndUser(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      req.headers['user-agent'],\n      token,\n    );\n\n    return { user };\n  };\n};\n","import type { IncomingMessage } from 'http';\nimport { promisify } from 'util';\nimport type { Context } from 'alp-node';\nimport type { ContextState, NodeApplication } from 'alp-types';\nimport jsonwebtoken from 'jsonwebtoken';\nimport { Logger } from 'nightingale-logger';\nimport type { User, UserSanitized } from '../types.d';\nimport type MongoUsersManager from './MongoUsersManager';\nimport type {\n  AuthController as AuthControllerType,\n  AuthHooks,\n} from './createAuthController';\nimport { createAuthController } from './createAuthController';\nimport type { AuthRoutes as AuthRoutesType } from './createRoutes';\nimport { createRoutes } from './createRoutes';\nimport type { Strategies } from './services/authentification/AuthenticationService';\nimport { AuthenticationService } from './services/authentification/AuthenticationService';\nimport type { AllowedStrategyKeys } from './services/authentification/types';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport type { AccountService } from './services/user/types';\nimport { getTokenFromRequest, COOKIE_NAME } from './utils/cookies';\nimport { createFindConnectedAndUser } from './utils/createFindConnectedAndUser';\n\nexport { default as MongoUsersManager } from './MongoUsersManager';\nexport { default as UserAccountGoogleService } from './services/user/UserAccountGoogleService';\nexport { default as UserAccountSlackService } from './services/user/UserAccountSlackService';\nexport { authSocketIO } from './authSocketIO';\nexport { createAuthApolloContext } from './authApolloContext';\nexport { STATUSES } from './services/user/UserAccountsService';\n\ndeclare module 'alp-types' {\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  interface ContextState {\n    connected: NonNullable<ContextState['user']>['_id'] | null | undefined;\n    user: User | null | undefined;\n  }\n\n  interface ContextSanitizedState {\n    connected:\n      | NonNullable<ContextSanitizedState['user']>['_id']\n      | null\n      | undefined;\n    user: UserSanitized | null | undefined;\n  }\n\n  interface BaseContext {\n    setConnected: (\n      connected: NonNullable<ContextState['user']>['_id'],\n      user: NonNullable<ContextState['user']>,\n    ) => Promise<void>;\n    logout: () => void;\n  }\n}\n\nconst logger = new Logger('alp:auth');\n\nconst signPromisified: any = promisify(jsonwebtoken.sign);\n\nexport type AuthController = AuthControllerType;\nexport type AuthRoutes = AuthRoutesType;\nexport { AuthenticationService } from './services/authentification/AuthenticationService';\n\nexport default function init<\n  StrategyKeys extends AllowedStrategyKeys = 'google',\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized,\n>({\n  homeRouterKey,\n  usersManager,\n  strategies,\n  defaultStrategy,\n  strategyToService,\n  authHooks,\n  jwtAudience,\n}: {\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager<U, USanitized>;\n  strategies: Strategies<StrategyKeys>;\n  defaultStrategy?: StrategyKeys;\n  strategyToService: Record<StrategyKeys, AccountService<any>>;\n  authHooks?: AuthHooks<StrategyKeys>;\n  jwtAudience?: string;\n}) {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  return (app: NodeApplication) => {\n    const userAccountsService = new UserAccountsService(\n      usersManager,\n      strategyToService,\n    );\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n      defaultStrategy,\n      authHooks,\n    });\n\n    app.context.setConnected = async function (\n      this: Context,\n      connected: NonNullable<ContextState['user']>['_id'],\n      user: NonNullable<ContextState['user']>,\n    ): Promise<void> {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await signPromisified(\n        { connected, time: Date.now() },\n        this.config\n          .get<Map<string, unknown>>('authentication')\n          .get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: jwtAudience || this.request.headers['user-agent'],\n          expiresIn: '30 days',\n        },\n      );\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function (this: Context): void {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    const getConnectedAndUser = createFindConnectedAndUser(\n      app.config\n        .get<Map<string, unknown>>('authentication')\n        .get('secretKey') as string,\n      usersManager,\n      logger,\n    );\n\n    return {\n      routes: createRoutes(controller),\n\n      getConnectedAndUserFromRequest: (\n        req: IncomingMessage,\n      ): ReturnType<typeof getConnectedAndUser> => {\n        const token = getTokenFromRequest(req);\n        return getConnectedAndUser(\n          jwtAudience || req.headers['user-agent'],\n          token,\n        );\n      },\n      getConnectedAndUser,\n\n      middleware: async <T>(\n        ctx: Context,\n        next: () => T | Promise<T>,\n      ): Promise<T> => {\n        const token = ctx.cookies.get(COOKIE_NAME);\n        const userAgent = ctx.request.headers['user-agent'];\n        logger.debug('middleware', { token });\n\n        const setState = (\n          connected: U['_id'] | null | undefined,\n          user: U | null | undefined,\n        ): void => {\n          ctx.state.connected = connected;\n          ctx.state.user = user;\n          ctx.sanitizedState.connected = connected;\n          ctx.sanitizedState.user = user && usersManager.sanitize(user);\n        };\n\n        const [connected, user] = await getConnectedAndUser(\n          jwtAudience || userAgent,\n          token,\n        );\n        logger.debug('middleware', { connected });\n\n        if (connected == null || user == null) {\n          if (token) ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          setState(null, null);\n          return next();\n        }\n\n        setState(connected, user);\n        return next();\n      },\n    };\n  };\n}\n"],"names":["createAuthController","usersManager","authenticationService","homeRouterKey","defaultStrategy","authHooks","login","ctx","strategy","namedParam","Error","params","paramsForLogin","redirectAuthUrl","addScope","state","connected","redirectTo","scopeKey","loginResponse","assert","connectedUser","accessResponse","afterLoginSuccess","afterScopeUpdate","keyPath","store","setConnected","logout","createRoutes","controller","segment","add","defaultRoute","randomBytesPromisified","promisify","randomBytes","randomHex","size","buffer","toString","logger","Logger","AuthenticationService","EventEmitter","constructor","config","strategies","userAccountsService","generateAuthUrl","debug","strategyInstance","type","oauth2","authorizationCode","authorizeURL","getTokens","options","result","getToken","code","redirect_uri","redirectUri","accessToken","access_token","refreshToken","refresh_token","tokenType","token_type","expiresIn","expires_in","expireDate","d","Date","setTime","getTime","idToken","id_token","tokensParam","token","create","refresh","tokens","host","get","request","urlGenerator","user","accountId","scope","getScope","cookies","set","JSON","stringify","isLoginAccess","maxAge","httpOnly","secure","access_type","redirect","isConnected","hooks","query","error","status","expose","cookieName","cookie","expires","parse","findOrCreateFromStrategy","account","update","refreshAccountTokens","tokenExpireDate","now","Promise","resolve","provider","then","updateAccount","STATUSES","VALIDATED","DELETED","UserAccountsService","strategyToService","userId","_id","service","newScope","scopeKeyToScope","accounts","find","join","subservice","profile","getProfile","getId","subservices","includes","push","replaceOne","emails","getEmails","findOneByAccountOrEmails","providerKey","info","Object","assign","displayName","getDisplayName","fullName","getFullName","name","getAccountName","userEmails","forEach","email","emailDomains","reduce","domains","split","Set","insertOne","COOKIE_NAME","getTokenFromRequest","req","Cookies","verifyPromisified","jsonwebtoken","verify","createDecodeJWT","secretKey","jwtAudience","algorithms","audience","createFindConnectedAndUser","decodeJwt","err","findConnected","MongoUsersManager","findByKey","sanitize","sanitizeBaseUser","length","$or","$in","findOne","accountIndex","indexOf","partialUpdateOne","$set","created","updated","map","UserAccountGoogleService","fetch","response","json","id","givenName","given_name","familyName","family_name","getDefaultScope","undefined","oldScope","filter","item","i","ar","UserAccountSlackService","team","authSocketIO","app","io","findConnectedAndUser","users","Map","use","socket","next","handshakeData","headers","client","on","delete","getTokenFromReq","createAuthApolloContext","connection","signPromisified","sign","init","context","time","algorithm","getConnectedAndUser","routes","getConnectedAndUserFromRequest","middleware","userAgent","setState","sanitizedState"],"mappings":";;;;;;;;;AA8CO,SAASA,oBAAT,CAIL;EACAC,YADA;EAEAC,qBAFA;EAGAC,aAAa,GAAG,GAHhB;EAIAC,eAJA;EAKAC,SAAS,GAAG;AALZ,CAJK,EAUqE;EAC1E,OAAO;IACL,MAAMC,KAAN,CAAYC,GAAZ,EAAyC;MACvC,MAAMC,QAAsB,GAAID,GAAG,CAACE,UAAJ,CAAe,UAAf,KAC9BL,eADF;MAEA,IAAI,CAACI,QAAL,EAAe,MAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;MACf,MAAMC,MAAM,GACTN,SAAS,CAACO,cAAV,KACE,MAAMP,SAAS,CAACO,cAAV,CAAyBJ,QAAzB,EAAmCD,GAAnC,CADR,CAAD,IAEA,EAHF;MAIA,MAAML,qBAAqB,CAACW,eAAtB,CAAsCN,GAAtC,EAA2CC,QAA3C,EAAqD,EAArD,EAAyDG,MAAzD,CAAN;KATG;;IAYL,MAAMG,QAAN,CAAeP,GAAf,EAA4C;MAC1C,IAAIA,GAAG,CAACQ,KAAJ,CAAUC,SAAd,EAAyB;QACvB,MAAMT,GAAG,CAACU,UAAJ,CAAed,aAAf,CAAN;QACA;;;MAGF,MAAMK,QAAsB,GAAID,GAAG,CAACE,UAAJ,CAAe,UAAf,KAC9BL,eADF;MAEA,IAAI,CAACI,QAAL,EAAe,MAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;MACf,MAAMQ,QAAQ,GAAGX,GAAG,CAACE,UAAJ,CAAe,UAAf,CAAjB;MACA,IAAI,CAACS,QAAL,EAAe,MAAM,IAAIR,KAAJ,CAAU,eAAV,CAAN;MACf,MAAMR,qBAAqB,CAACW,eAAtB,CAAsCN,GAAtC,EAA2CC,QAA3C,EAAqD;QAAEU;OAAvD,CAAN;KAvBG;;IA0BL,MAAMC,aAAN,CAAoBZ,GAApB,EAAiD;MAC/C,IAAIA,GAAG,CAACQ,KAAJ,CAAUC,SAAd,EAAyB;QACvB,MAAMT,GAAG,CAACU,UAAJ,CAAed,aAAf,CAAN;QACA;;;MAGF,MAAMK,QAAsB,GAAGD,GAAG,CAACE,UAAJ,CAAe,UAAf,CAA/B;MACAF,GAAG,CAACa,MAAJ,CAAWZ,QAAX;MAEA,MAAMa,aAAa,GAAG,MAAMnB,qBAAqB,CAACoB,cAAtB,CAC1Bf,GAD0B,EAE1BC,QAF0B,EAG1BD,GAAG,CAACQ,KAAJ,CAAUC,SAHgB,EAI1B;QACEO,iBAAiB,EAAElB,SAAS,CAACkB,iBAD/B;QAEEC,gBAAgB,EAAEnB,SAAS,CAACmB;OANJ,CAA5B;MASA,MAAMC,OAAO,GAAGxB,YAAY,CAACyB,KAAb,CAAmBD,OAAnC;MACA,MAAMlB,GAAG,CAACoB,YAAJ,CAAiBN,aAAa,CAACI,OAAD,CAA9B,EAAyCJ,aAAzC,CAAN;MACA,MAAMd,GAAG,CAACU,UAAJ,CAAed,aAAf,CAAN;KA9CG;;IAiDL,MAAMyB,MAAN,CAAarB,GAAb,EAA0C;MACxCA,GAAG,CAACqB,MAAJ;MACA,MAAMrB,GAAG,CAACU,UAAJ,CAAed,aAAf,CAAN;;;GAnDJ;AAsDD;;ACvGM,MAAM0B,YAAY,GAAIC,UAAD,KAA6C;EACvExB,KAAK,EAAE,CACL,mBADK,EAEJyB,OAAD,IAAkB;IAChBA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,UAAU,CAACX,aAApC,EAAmD,eAAnD;IACAY,OAAO,CAACE,YAAR,CAAqBH,UAAU,CAACxB,KAAhC,EAAuC,OAAvC;GAJG,CADgE;EAQvEQ,QAAQ,EAAE,CAAC,qCAAD,EAAwCgB,UAAU,CAAChB,QAAnD,CAR6D;EASvEc,MAAM,EAAE,CAAC,SAAD,EAAYE,UAAU,CAACF,MAAvB;AAT+D,CAA7C,CAArB;;ACLP,MAAMM,sBAAsB,GAAGC,SAAS,CAACC,WAAD,CAAxC;AAOO,eAAeC,SAAf,CAAyBC,IAAzB,EAAwD;EAC7D,MAAMC,MAAM,GAAG,MAAML,sBAAsB,CAACI,IAAD,CAA3C;EACA,OAAOC,MAAM,CAACC,QAAP,CAAgB,KAAhB,CAAP;AACD;;ACbD;AAcA,MAAMC,QAAM,GAAG,IAAIC,MAAJ,CAAW,yBAAX,CAAf;AA6CO,MAAMC,qBAAN,SAIGC,YAJH,CAIgB;EAOrBC,WAAW,CACTC,MADS,EAETC,UAFS,EAGTC,mBAHS,EAIT;IACA;IACA,KAAKF,MAAL,GAAcA,MAAd;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKC,mBAAL,GAA2BA,mBAA3B;;;EAGFC,eAAe,CAAyBzC,QAAzB,EAAsCG,MAAtC,EAA2D;IACxE8B,QAAM,CAACS,KAAP,CAAa,iBAAb,EAAgC;MAAE1C,QAAF;MAAYG;KAA5C;IACA,MAAMwC,gBAAgB,GAAG,KAAKJ,UAAL,CAAgBvC,QAAhB,CAAzB;;IACA,QAAQ2C,gBAAgB,CAACC,IAAzB;MACE,KAAK,QAAL;QACE,OAAOD,gBAAgB,CAACE,MAAjB,CAAwBC,iBAAxB,CAA0CC,YAA1C,CAAuD5C,MAAvD,CAAP;;MACF;QACE,MAAM,IAAID,KAAJ,CAAU,kBAAV,CAAN;;;;EAIS,MAAT8C,SAAS,CACbhD,QADa,EAEbiD,OAFa,EAGI;IACjBhB,QAAM,CAACS,KAAP,CAAa,WAAb,EAA0B;MAAE1C,QAAF;MAAYiD;KAAtC;IACA,MAAMN,gBAAgB,GAAG,KAAKJ,UAAL,CAAgBvC,QAAhB,CAAzB;;IACA,QAAQ2C,gBAAgB,CAACC,IAAzB;MACE,KAAK,QAAL;QAAe;UACb,MAAMM,MAAM,GAAG,MAAMP,gBAAgB,CAACE,MAAjB,CAAwBC,iBAAxB,CAA0CK,QAA1C,CACnB;YACEC,IAAI,EAAEH,OAAO,CAACG,IADhB;YAEEC,YAAY,EAAEJ,OAAO,CAACK;WAHL,CAArB;UAMA,IAAI,CAACJ,MAAL,EAAa,OAAOA,MAAP;UACb,OAAO;YACLK,WAAW,EAAEL,MAAM,CAACM,YADf;YAELC,YAAY,EAAEP,MAAM,CAACQ,aAFhB;YAGLC,SAAS,EAAET,MAAM,CAACU,UAHb;YAILC,SAAS,EAAEX,MAAM,CAACY,UAJb;YAKLC,UAAU,EAAE,CAAC,MAAM;cACjB,MAAMC,CAAC,GAAG,IAAIC,IAAJ,EAAV;cACAD,CAAC,CAACE,OAAF,CAAUF,CAAC,CAACG,OAAF,KAAcjB,MAAM,CAACY,UAAP,GAAoB,IAA5C;cACA,OAAOE,CAAP;aAHU,GALP;YAULI,OAAO,EAAElB,MAAM,CAACmB;WAVlB,CARa;;;MAuBf;QACE,MAAM,IAAInE,KAAJ,CAAU,iBAAV,CAAN;;;;EAIY,MAAZuD,YAAY,CAChBzD,QADgB,EAEhBsE,WAFgB,EAGC;IACjBrC,QAAM,CAACS,KAAP,CAAa,cAAb,EAA6B;MAAE1C;KAA/B;;IACA,IAAI,CAACsE,WAAW,CAACb,YAAjB,EAA+B;MAC7B,MAAM,IAAIvD,KAAJ,CAAU,uBAAV,CAAN;;;IAEF,MAAMyC,gBAAgB,GAAG,KAAKJ,UAAL,CAAgBvC,QAAhB,CAAzB;;IACA,QAAQ2C,gBAAgB,CAACC,IAAzB;MACE,KAAK,QAAL;QAAe;UACb,MAAM2B,KAAK,GAAG5B,gBAAgB,CAACE,MAAjB,CAAwBU,WAAxB,CAAoCiB,MAApC,CAA2C;YACvDd,aAAa,EAAEY,WAAW,CAACb;WADf,CAAd;UAGA,MAAMP,MAAM,GAAG,MAAMqB,KAAK,CAACE,OAAN,EAArB;UACA,MAAMC,MAAM,GAAGxB,MAAM,CAACqB,KAAtB;UACA,OAAO;YACLhB,WAAW,EAAEmB,MAAM,CAAClB,YADf;YAELG,SAAS,EAAEe,MAAM,CAACd,UAFb;YAGLC,SAAS,EAAEa,MAAM,CAACZ,UAHb;YAILC,UAAU,EAAE,CAAC,MAAM;cACjB,MAAMC,CAAC,GAAG,IAAIC,IAAJ,EAAV;cACAD,CAAC,CAACE,OAAF,CAAUF,CAAC,CAACG,OAAF,KAAcO,MAAM,CAACZ,UAAP,GAAoB,IAA5C;cACA,OAAOE,CAAP;aAHU,GAJP;YASLI,OAAO,EAAEM,MAAM,CAACL;WATlB;;;MAaF;QACE,MAAM,IAAInE,KAAJ,CAAU,iBAAV,CAAN;;;;EAINoD,WAAW,CAACvD,GAAD,EAAeC,QAAf,EAAyC;IAClD,MAAM2E,IAAI,GAAI,OAAM,KAAKrC,MAAL,CAAYsC,GAAZ,CAAgB,YAAhB,IAAgC,GAAhC,GAAsC,EAAG,MAC3D7E,GAAG,CAAC8E,OAAJ,CAAYF,IACb,EAFD;IAGA,OAAQ,GAAEA,IAAK,GAAE5E,GAAG,CAAC+E,YAAJ,CAAiB,eAAjB,EAAkC;MAAE9E;KAApC,CAAgD,EAAjE;;;EAGmB,MAAfK,eAAe,CACnBN,GADmB,EAEnBC,QAFmB,EAGnB;IACEyD,YADF;IAEE/C,QAFF;IAGEqE,IAHF;IAIEC;GAPiB,EAcnB7E,MAdmB,EAeJ;IACf8B,QAAM,CAACS,KAAP,CAAa,iBAAb,EAAgC;MAAE1C,QAAF;MAAYU,QAAZ;MAAsB+C;KAAtD;IACA,MAAMlD,KAAK,GAAG,MAAMsB,SAAS,CAAC,CAAD,CAA7B;IAEA,MAAMoD,KAAK,GAAG,KAAKzC,mBAAL,CAAyB0C,QAAzB,CACZlF,QADY,EAEZU,QAAQ,IAAI,OAFA,EAGZqE,IAHY,EAIZC,SAJY,CAAd;;IAOA,IAAI,CAACC,KAAL,EAAY;MACV,MAAM,IAAI/E,KAAJ,CAAU,qBAAV,CAAN;;;IAGFH,GAAG,CAACoF,OAAJ,CAAYC,GAAZ,CACG,QAAOpF,QAAS,IAAGO,KAAM,EAD5B,EAEE8E,IAAI,CAACC,SAAL,CAAe;MACb5E,QADa;MAEbuE,KAFa;MAGbM,aAAa,EAjBK,CAAC7E,QAAD,IAAaA,QAAQ,KAAK;KAc9C,CAFF,EAOE;MACE8E,MAAM,QADR;MAEEC,QAAQ,EAAE,IAFZ;MAGEC,MAAM,EAAE,KAAKpD,MAAL,CAAYsC,GAAZ,CAAgB,YAAhB;KAVZ;IAaA,MAAMtB,WAAW,GAAG,KAAKb,eAAL,CAAqBzC,QAArB,EAA+B;MACjDqD,YAAY,EAAE,KAAKC,WAAL,CAAiBvD,GAAjB,EAAsBC,QAAtB,CADmC;MAEjDiF,KAFiD;MAGjD1E,KAHiD;MAIjDoF,WAAW,EAAElC,YAAY,GAAG,SAAH,GAAe,QAJS;MAKjD,GAAGtD;KALe,CAApB;IAQA,OAAOJ,GAAG,CAAC6F,QAAJ,CAAatC,WAAb,CAAP;;;EAGkB,MAAdxC,cAAc,CAClBf,GADkB,EAElBC,QAFkB,EAGlB6F,WAHkB,EAIlBC,KAJkB,EAKN;IACZ,IAAI/F,GAAG,CAACgG,KAAJ,CAAUC,KAAd,EAAqB;MACnB,MAAMA,KAAU,GAAG,IAAI9F,KAAJ,CAAUH,GAAG,CAACgG,KAAJ,CAAUC,KAApB,CAAnB;MACAA,KAAK,CAACC,MAAN,GAAe,GAAf;MACAD,KAAK,CAACE,MAAN,GAAe,IAAf;MACA,MAAMF,KAAN;;;IAGF,MAAM5C,IAAI,GAAGrD,GAAG,CAACgG,KAAJ,CAAU3C,IAAvB;IACA,MAAM7C,KAAK,GAAGR,GAAG,CAACgG,KAAJ,CAAUxF,KAAxB;IACA,MAAM4F,UAAU,GAAI,QAAOnG,QAAS,IAAGO,KAAgB,EAAvD;IACA,IAAI6F,MAAM,GAAGrG,GAAG,CAACoF,OAAJ,CAAYP,GAAZ,CAAgBuB,UAAhB,CAAb;IACApG,GAAG,CAACoF,OAAJ,CAAYC,GAAZ,CAAgBe,UAAhB,EAA4B,EAA5B,EAAgC;MAAEE,OAAO,EAAE,IAAIpC,IAAJ,CAAS,CAAT;KAA3C;;IACA,IAAI,CAACmC,MAAL,EAAa;MACX,MAAM,IAAIlG,KAAJ,CAAU,0BAAV,CAAN;;;IAGFkG,MAAM,GAAGf,IAAI,CAACiB,KAAL,CAAWF,MAAX,CAAT;;IACA,IAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACnB,KAAvB,EAA8B;MAC5B,MAAM,IAAI/E,KAAJ,CAAU,yBAAV,CAAN;;;IAGF,IAAI,CAACkG,MAAM,CAACb,aAAZ,EAA2B;MACzB,IAAI,CAACM,WAAL,EAAkB;QAChB,MAAM,IAAI3F,KAAJ,CAAU,uBAAV,CAAN;;;;IAIJ,MAAMwE,MAAc,GAAG,MAAM,KAAK1B,SAAL,CAAehD,QAAf,EAAyB;MACpDoD,IADoD;MAEpDE,WAAW,EAAE,KAAKA,WAAL,CAAiBvD,GAAjB,EAAsBC,QAAtB;KAFc,CAA7B;;IAKA,IAAIoG,MAAM,CAACb,aAAX,EAA0B;MACxB,MAAMR,IAAI,GAAG,MAAM,KAAKvC,mBAAL,CAAyB+D,wBAAzB,CACjBvG,QADiB,EAEjB0E,MAFiB,EAGjB0B,MAAM,CAACnB,KAHU,EAIjBmB,MAAM,CAAC1F,QAJU,CAAnB;;MAOA,IAAIoF,KAAK,CAAC/E,iBAAV,EAA6B;QAC3B,MAAM+E,KAAK,CAAC/E,iBAAN,CAAwBf,QAAxB,EAAkC+E,IAAlC,CAAN;;;MAGF,OAAOA,IAAP;;;IAGF,MAAMlE,aAAa,GAAGd,GAAG,CAACQ,KAAJ,CAAUwE,IAAhC;IACA,MAAM;MAAEyB,OAAF;MAAWzB;QAAS,MAAM,KAAKvC,mBAAL,CAAyBiE,MAAzB,CAC9B5F,aAD8B,EAE9Bb,QAF8B,EAG9B0E,MAH8B,EAI9B0B,MAAM,CAACnB,KAJuB,EAK9BmB,MAAM,CAAC1F,QALuB,CAAhC;;IAQA,IAAIoF,KAAK,CAAC9E,gBAAV,EAA4B;MAC1B,MAAM8E,KAAK,CAAC9E,gBAAN,CAAuBhB,QAAvB,EAAiCoG,MAAM,CAAC1F,QAAxC,EAAkD8F,OAAlD,EAA2DzB,IAA3D,CAAN;;;IAGF,OAAOlE,aAAP;;;EAGF6F,oBAAoB,CAAC3B,IAAD,EAAUyB,OAAV,EAA8C;IAChE,IACEA,OAAO,CAACG,eAAR,IACAH,OAAO,CAACG,eAAR,CAAwBxC,OAAxB,KAAoCF,IAAI,CAAC2C,GAAL,EAFtC,EAGE;MACA,OAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;;;IAEF,OAAO,KAAKrD,YAAL,CAAkB+C,OAAO,CAACO,QAA1B,EAAoD;;MAEzDtD,YAAY,EAAE+C,OAAO,CAAC/C;KAFjB,EAGJuD,IAHI,CAGEtC,MAAD,IAAoB;MAC1B,IAAI,CAACA,MAAL,EAAa;;QAEX,OAAO,KAAP;;;MAEF8B,OAAO,CAACjD,WAAR,GAAsBmB,MAAM,CAACnB,WAA7B;MACAiD,OAAO,CAACG,eAAR,GAA0BjC,MAAM,CAACX,UAAjC;MACA,OAAO,KAAKvB,mBAAL,CACJyE,aADI,CACUlC,IADV,EACgByB,OADhB,EAEJQ,IAFI,CAEC,MAAM,IAFP,CAAP;KAVK,CAAP;;;AA3OmB;;AC/DvB;AAQA,MAAM/E,QAAM,GAAG,IAAIC,MAAJ,CAAW,uBAAX,CAAf;MAEagF,QAAQ,GAAG;EACtBC,SAAS,EAAE,WADW;EAEtBC,OAAO,EAAE;AAFa;AAKT,MAAMC,mBAAN,SAILjF,YAJK,CAIQ;EAKrBC,WAAW,CACT5C,YADS,EAET6H,iBAFS,EAGT;IACA;IACA,KAAK7H,YAAL,GAAoBA,YAApB;IACA,KAAK6H,iBAAL,GAAyBA,iBAAzB;;;EAGFpC,QAAQ,CACNlF,QADM,EAENU,QAFM,EAGNqE,IAHM,EAINC,SAJM,EAKE;IACR/C,QAAM,CAACS,KAAP,CAAa,UAAb,EAAyB;MAAE1C,QAAF;MAAYuH,MAAM,EAAExC,IAAI,EAAEyC;KAAnD;IACA,MAAMC,OAAO,GAAG,KAAKH,iBAAL,CAAuBtH,QAAvB,CAAhB;;IACA,IAAI,CAACyH,OAAL,EAAc;MACZ,MAAM,IAAIvH,KAAJ,CAAU,wBAAV,CAAN;;;IAGF,MAAMwH,QAAQ,GAAGD,OAAO,CAACE,eAAR,CAAwBjH,QAAxB,CAAjB;;IACA,IAAI,CAACqE,IAAD,IAAS,CAACC,SAAd,EAAyB;MACvB,OAAO0C,QAAP;;;IAEF,MAAMlB,OAAO,GAAGzB,IAAI,CAAC6C,QAAL,CAAcC,IAAd,CACbrB,OAAD,IACEA,OAAO,CAACO,QAAR,KAAqB/G,QAArB,IAAiCwG,OAAO,CAACxB,SAAR,KAAsBA,SAF3C,CAAhB;;IAKA,IAAI,CAACwB,OAAL,EAAc;MACZ,MAAM,IAAItG,KAAJ,CAAU,oCAAV,CAAN;;;IAEF,OAAOuH,OAAO,CAACvC,QAAR,CAAiBsB,OAAO,CAACvB,KAAzB,EAAgCyC,QAAhC,EAA0CI,IAA1C,CAA+C,GAA/C,CAAP;;;EAGU,MAANrB,MAAM,CACV1B,IADU,EAEV/E,QAFU,EAGV0E,MAHU,EAIVO,KAJU,EAKV8C,UALU,EAM4C;IACtD,MAAMN,OAAO,GAAG,KAAKH,iBAAL,CAAuBtH,QAAvB,CAAhB;IACA,MAAMgI,OAAO,GAAG,MAAMP,OAAO,CAACQ,UAAR,CAAmBvD,MAAnB,CAAtB;IACA,MAAMM,SAAS,GAAGyC,OAAO,CAACS,KAAR,CAAcF,OAAd,CAAlB;IACA,MAAMxB,OAAO,GAAGzB,IAAI,CAAC6C,QAAL,CAAcC,IAAd,CACbrB,OAAD,IACEA,OAAO,CAACO,QAAR,KAAqB/G,QAArB,IAAiCwG,OAAO,CAACxB,SAAR,KAAsBA,SAF3C,CAAhB;;IAIA,IAAI,CAACwB,OAAL,EAAc;;;MAGZ,MAAM,IAAItG,KAAJ,CAAU,oCAAV,CAAN;;;IAEFsG,OAAO,CAACP,MAAR,GAAiB,OAAjB;IACAO,OAAO,CAACjD,WAAR,GAAsBmB,MAAM,CAACnB,WAA7B;;IACA,IAAImB,MAAM,CAACjB,YAAX,EAAyB;MACvB+C,OAAO,CAAC/C,YAAR,GAAuBiB,MAAM,CAACjB,YAA9B;;;IAEF,IAAIiB,MAAM,CAACX,UAAX,EAAuB;MACrByC,OAAO,CAACG,eAAR,GAA0BjC,MAAM,CAACX,UAAjC;;;IAEFyC,OAAO,CAACvB,KAAR,GAAgBwC,OAAO,CAACvC,QAAR,CAAiBsB,OAAO,CAACvB,KAAzB,EAAgCA,KAAhC,CAAhB;IACAuB,OAAO,CAAC2B,WAAR,GAAsB3B,OAAO,CAAC2B,WAAR,IAAuB,EAA7C;;IACA,IAAIJ,UAAU,IAAI,CAACvB,OAAO,CAAC2B,WAAR,CAAoBC,QAApB,CAA6BL,UAA7B,CAAnB,EAA6D;MAC3DvB,OAAO,CAAC2B,WAAR,CAAoBE,IAApB,CAAyBN,UAAzB;;;IAGF,MAAM,KAAKtI,YAAL,CAAkB6I,UAAlB,CAA6BvD,IAA7B,CAAN;IACA,OAAO;MAAEA,IAAF;MAAQyB;KAAf;;;EAG4B,MAAxBD,wBAAwB,CAC5BvG,QAD4B,EAE5B0E,MAF4B,EAG5BO,KAH4B,EAI5B8C,UAJ4B,EAKhB;IACZ,MAAMN,OAAO,GAAG,KAAKH,iBAAL,CAAuBtH,QAAvB,CAAhB;IACA,IAAI,CAACyH,OAAL,EAAc,MAAM,IAAIvH,KAAJ,CAAU,wBAAV,CAAN;IAEd,MAAM8H,OAAO,GAAG,MAAMP,OAAO,CAACQ,UAAR,CAAmBvD,MAAnB,CAAtB;IACA,MAAMM,SAAS,GAAGyC,OAAO,CAACS,KAAR,CAAcF,OAAd,CAAlB;IACA,IAAI,CAAChD,SAAL,EAAgB,MAAM,IAAI9E,KAAJ,CAAU,8BAAV,CAAN;IAEhB,MAAMqI,MAAM,GAAGd,OAAO,CAACe,SAAR,CAAkBR,OAAlB,CAAf;IAEA,IAAIjD,IAA4B,GAC9B,MAAM,KAAKtF,YAAL,CAAkBgJ,wBAAlB,CAA2C;MAC/C1B,QAAQ,EAAEU,OAAO,CAACiB,WAD6B;MAE/C1D,SAF+C;MAG/CuD;KAHI,CADR;IAOAtG,QAAM,CAAC0G,IAAP,CAAY,CAAC5D,IAAD,GAAQ,aAAR,GAAwB,eAApC,EAAqD;MAAEwD,MAAF;MAAUxD;KAA/D;;IAEA,IAAI,CAACA,IAAL,EAAW;MACTA,IAAI,GAAG,EAAP;;;IAGF6D,MAAM,CAACC,MAAP,CAAc9D,IAAd,EAAoB;MAClB+D,WAAW,EAAErB,OAAO,CAACsB,cAAR,CAAuBf,OAAvB,CADK;MAElBgB,QAAQ,EAAEvB,OAAO,CAACwB,WAAR,CAAoBjB,OAApB,CAFQ;MAGlB/B,MAAM,EAAEiB,QAAQ,CAACC;KAHnB;IAMA,IAAI,CAACpC,IAAI,CAAC6C,QAAV,EAAoB7C,IAAI,CAAC6C,QAAL,GAAgB,EAAhB;IAEpB,IAAIpB,OAAqC,GAAGzB,IAAI,CAAC6C,QAAL,CAAcC,IAAd,CACzCrB,OAAD,IACEA,OAAO,CAACO,QAAR,KAAqB/G,QAArB,IAAiCwG,OAAO,CAACxB,SAAR,KAAsBA,SAFf,CAA5C;;IAKA,IAAI,CAACwB,OAAL,EAAc;MACZA,OAAO,GAAG;QAAEO,QAAQ,EAAE/G,QAAZ;QAAsBgF;OAAhC,CADY;;MAGZD,IAAI,CAAC6C,QAAL,CAAcS,IAAd,CAAmB7B,OAAnB;;;IAGFA,OAAO,CAAC0C,IAAR,GAAezB,OAAO,CAAC0B,cAAR,CAAuBnB,OAAvB,CAAf;IACAxB,OAAO,CAACP,MAAR,GAAiB,OAAjB;IACAO,OAAO,CAACwB,OAAR,GAAkBA,OAAlB;IACAxB,OAAO,CAACjD,WAAR,GAAsBmB,MAAM,CAACnB,WAA7B;;IACA,IAAImB,MAAM,CAACjB,YAAX,EAAyB;MACvB+C,OAAO,CAAC/C,YAAR,GAAuBiB,MAAM,CAACjB,YAA9B;;;IAEF,IAAIiB,MAAM,CAACX,UAAX,EAAuB;MACrByC,OAAO,CAACG,eAAR,GAA0BjC,MAAM,CAACX,UAAjC;;;IAEFyC,OAAO,CAACvB,KAAR,GAAgBwC,OAAO,CAACvC,QAAR,CAAiBsB,OAAO,CAACvB,KAAzB,EAAgCA,KAAhC,CAAhB;IAEA,IAAI,CAACuB,OAAO,CAAC2B,WAAb,EAA0B3B,OAAO,CAAC2B,WAAR,GAAsB,EAAtB;;IAC1B,IAAIJ,UAAU,IAAI,CAACvB,OAAO,CAAC2B,WAAR,CAAoBC,QAApB,CAA6BL,UAA7B,CAAnB,EAA6D;MAC3DvB,OAAO,CAAC2B,WAAR,CAAoBE,IAApB,CAAyBN,UAAzB;;;IAGF,IAAI,CAAChD,IAAI,CAACwD,MAAV,EAAkBxD,IAAI,CAACwD,MAAL,GAAc,EAAd;IAClB,MAAMa,UAAU,GAAGrE,IAAI,CAACwD,MAAxB;IACAA,MAAM,CAACc,OAAP,CAAgBC,KAAD,IAAmB;MAChC,IAAI,CAACF,UAAU,CAAChB,QAAX,CAAoBkB,KAApB,CAAL,EAAiC;QAC/BF,UAAU,CAACf,IAAX,CAAgBiB,KAAhB;;KAFJ;IAMAvE,IAAI,CAACwE,YAAL,GAAoB;IAElB,GAAGxE,IAAI,CAACwD,MAAL,CAAYiB,MAAZ,CACD,CAACC,OAAD,EAAuBH,KAAvB,KACEG,OAAO,CAACjI,GAAR,CAAY8H,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiB,CAAjB,EAAoB,CAApB,CAAZ,CAFD,EAGD,IAAIC,GAAJ,EAHC,CAFe,CAApB;IASA,MAAM1I,OAAO,GAAG,KAAKxB,YAAL,CAAkByB,KAAlB,CAAwBD,OAAxC;;IAEA,IAAI8D,IAAI,CAAC9D,OAAD,CAAR,EAAmB;MACjB,MAAM,KAAKxB,YAAL,CAAkB6I,UAAlB,CAA6BvD,IAA7B,CAAN;KADF,MAEO;MACL,MAAM,KAAKtF,YAAL,CAAkBmK,SAAlB,CAA4B7E,IAA5B,CAAN;;;IAGF,OAAOA,IAAP;;;EAGiB,MAAbkC,aAAa,CAAClC,IAAD,EAAUyB,OAAV,EAAwC;IACzD,MAAM,KAAK/G,YAAL,CAAkBwH,aAAlB,CAAgClC,IAAhC,EAAsCyB,OAAtC,CAAN;IACA,OAAOzB,IAAP;;;AA5KmB;;ACfhB,MAAM8E,WAAW,GAAG,eAApB;AAEA,MAAMC,mBAAmB,GAAG,CACjCC,GADiC,EAEjC9G,OAFiC,KAGV;;EAEvB,MAAMkC,OAAO,GAAG,IAAI6E,OAAJ,CAAYD,GAAZ,EAAiB,IAAjB,EAAyC,EACvD,GAAG9G,OADoD;IAEvDyC,MAAM,EAAE;GAFM,CAAhB;EAKA,OAAOP,OAAO,CAACP,GAAR,CAAYiF,WAAZ,CAAP;AACD,CAXM;;ACaP,MAAMI,iBAAiB,GAAGtI,SAAS,CAKjCuI,YAAY,CAACC,MALoB,CAAnC;;AAOA,MAAMC,eAAe,GAClBC,SAAD,IACA,OAAO9F,KAAP,EAAsB+F,WAAtB,KAA2E;EACzE,MAAMpH,MAAM,GAAG,MAAM+G,iBAAiB,CAAC1F,KAAD,EAAQ8F,SAAR,EAAmB;IACvDE,UAAU,EAAE,CAAC,OAAD,CAD2C;IAEvDC,QAAQ,EAAEF;GAF0B,CAAtC;EAIA,OAAQpH,MAAD,EAAiB1C,SAAxB;AACD,CARH;;AAeO,MAAMiK,0BAA0B,GAAG,CAIxCJ,SAJwC,EAKxC5K,YALwC,EAMxCwC,MANwC,KAOZ;EAC5B,MAAMyI,SAAS,GAAGN,eAAe,CAACC,SAAD,CAAjC;EAsBA,OApBsD,OACpDC,WADoD,EAEpD/F,KAFoD,KAGjD;IACH,IAAI,CAACA,KAAD,IAAU,CAAC+F,WAAf,EAA4B,OAAO,CAAC,IAAD,EAAO,IAAP,CAAP;IAE5B,IAAI9J,SAAJ;;IACA,IAAI;MACFA,SAAS,GAAG,MAAMkK,SAAS,CAACnG,KAAD,EAAQ+F,WAAR,CAA3B;KADF,CAEE,OAAOK,GAAP,EAAqB;MACrB1I,MAAM,CAACS,KAAP,CAAa,mCAAb,EAAkD;QAAEiI;OAApD;;;IAGF,IAAInK,SAAS,IAAI,IAAjB,EAAuB,OAAO,CAAC,IAAD,EAAO,IAAP,CAAP;IAEvB,MAAMuE,IAAI,GAAG,MAAMtF,YAAY,CAACmL,aAAb,CAA2BpK,SAA3B,CAAnB;IAEA,OAAO,CAACA,SAAD,EAAYuE,IAAZ,CAAP;GAGF;AACD,CA/BM;;ACtCQ,MAAM8F,iBAAN,CAGb;EAGAxI,WAAW,CAACnB,KAAD,EAAuB;IAChC,KAAKA,KAAL,GAAaA,KAAb;;;EAGF0J,aAAa,CAACpK,SAAD,EAA4C;IACvD,OAAO,KAAKU,KAAL,CAAW4J,SAAX,CAAqBtK,SAArB,CAAP;;;EAGFoJ,SAAS,CAAC7E,IAAD,EAAyC;IAChD,OAAO,KAAK7D,KAAL,CAAW0I,SAAX,CAAqB7E,IAArB,CAAP;;;EAGFuD,UAAU,CAACvD,IAAD,EAAwB;IAChC,OAAO,KAAK7D,KAAL,CAAWoH,UAAX,CAAsBvD,IAAtB,CAAP;;;EAGFgG,QAAQ,CAAChG,IAAD,EAAsB;IAC5B,OAAO,KAAKiG,gBAAL,CAAsBjG,IAAtB,CAAP;;;EAGF0D,wBAAwB,CAAC;IACvBzD,SADuB;IAEvBuD,MAFuB;IAGvBxB;GAHsB,EAQG;IACzB,IAAIhB,KAAU,GAAG;MACf,qBAAqBgB,QADN;MAEf,sBAAsB/B;KAFxB;;IAKA,IAAIuD,MAAM,IAAIA,MAAM,CAAC0C,MAAP,GAAgB,CAA9B,EAAiC;MAC/BlF,KAAK,GAAG;QACNmF,GAAG,EAAE,CACHnF,KADG,EAEH;UACEwC,MAAM,EAAE;YAAE4C,GAAG,EAAE5C;;SAHd;OADP;KAPuB;;;IAkBzB,OAAO,KAAKrH,KAAL,CAAWkK,OAAX,CAAmBrF,KAAnB,CAAP;;;EAGFkB,aAAa,CAAClC,IAAD,EAAUyB,OAAV,EAAwC;IACnD,MAAM6E,YAAY,GAAGtG,IAAI,CAAC6C,QAAL,CAAc0D,OAAd,CAAsB9E,OAAtB,CAArB;;IACA,IAAI6E,YAAY,KAAK,CAAC,CAAtB,EAAyB;MACvB,MAAM,IAAInL,KAAJ,CAAU,iBAAV,CAAN;;;IAGF,OAAO,KAAKgB,KAAL,CAAWqK,gBAAX,CAA4BxG,IAA5B,EAAkC;MACvCyG,IAAI,EAAE;QACJ,CAAE,YAAWH,YAAa,EAA1B,GAA8B7E;;KAF3B,CAAP;;;EAOQwE,gBAAgB,CAACjG,IAAD,EAAyB;IACjD,OAAO;MACLyC,GAAG,EAAEzC,IAAI,CAACyC,GADL;MAELiE,OAAO,EAAE1G,IAAI,CAAC0G,OAFT;MAGLC,OAAO,EAAE3G,IAAI,CAAC2G,OAHT;MAIL5C,WAAW,EAAE/D,IAAI,CAAC+D,WAJb;MAKLE,QAAQ,EAAEjE,IAAI,CAACiE,QALV;MAML/C,MAAM,EAAElB,IAAI,CAACkB,MANR;MAOLsC,MAAM,EAAExD,IAAI,CAACwD,MAPR;MAQLgB,YAAY,EAAExE,IAAI,CAACwE,YARd;MASL3B,QAAQ,EAAE7C,IAAI,CAAC6C,QAAL,CAAc+D,GAAd,CAAmBnF,OAAD,KAAuB;QACjDO,QAAQ,EAAEP,OAAO,CAACO,QAD+B;QAEjD/B,SAAS,EAAEwB,OAAO,CAACxB,SAF8B;QAGjDkE,IAAI,EAAE1C,OAAO,CAAC0C,IAHmC;QAIjDjD,MAAM,EAAEO,OAAO,CAACP,MAJiC;QAKjD+B,OAAO,EAAExB,OAAO,CAACwB;OALS,CAAlB;KATZ;;;AAlEF;;ACNF;AAMe,MAAM4D,wBAAN,CAEf;EAGEvJ,WAAW,CAACsF,eAAD,EAA+D;IACxE,KAAKA,eAAL,GAAuB,EACrB,GAAGA,eADkB;MAErB7H,KAAK,EAAE;KAFT;;;EAMF4I,WAAW,GAAG,QAAH;;EAEXT,UAAU,CAACvD,MAAD,EAA+B;IACvC,OAAOmH,KAAK,CACT,8DAA6DnH,MAAM,CAACnB,WAAY,EADvE,CAAL,CAELyD,IAFK,CAEC8E,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAFd,CAAP;;;EAKF7D,KAAK,CAACF,OAAD,EAAoB;IACvB,OAAOA,OAAO,CAACgE,EAAf;;;EAGF7C,cAAc,CAACnB,OAAD,EAA0C;IACtD,OAAOA,OAAO,CAACsB,KAAf;;;EAGFd,SAAS,CAACR,OAAD,EAAyB;IAChC,MAAMO,MAAgB,GAAG,EAAzB;;IAEA,IAAIP,OAAO,CAACsB,KAAZ,EAAmB;MACjBf,MAAM,CAACF,IAAP,CAAYL,OAAO,CAACsB,KAApB;;;IAGF,OAAOf,MAAP;;;EAGFQ,cAAc,CAACf,OAAD,EAA0C;IACtD,OAAOA,OAAO,CAACkB,IAAf;;;EAGFD,WAAW,CAACjB,OAAD,EAAyB;IAClC,OAAO;MACLiE,SAAS,EAAEjE,OAAO,CAACkE,UADd;MAELC,UAAU,EAAEnE,OAAO,CAACoE;KAFtB;;;EAMFC,eAAe,CAAC3E,QAAD,EAA6B;IAC1C,OAAO,KAAKxC,QAAL,CAAcoH,SAAd,EAAyB5E,QAAzB,CAAP;;;EAGFxC,QAAQ,CAACqH,QAAD,EAAiC7E,QAAjC,EAA6D;IACnE,OAAO,CAAC6E,QAAD,GACH7E,QAAQ,CAACgC,KAAT,CAAe,GAAf,CADG,GAEH,CAAC,GAAG6C,QAAJ,EAAc,GAAG7E,QAAQ,CAACgC,KAAT,CAAe,GAAf,CAAjB,EAAsC8C,MAAtC,CACE,CAACC,IAAD,EAAOC,CAAP,EAAUC,EAAV,KAAiBA,EAAE,CAACrB,OAAH,CAAWmB,IAAX,MAAqBC,CADxC,CAFJ;;;AApDJ;;ACRA;AAKA;AAEe,MAAME,uBAAN,CAEf;EAGEvK,WAAW,CAACsF,eAAD,EAA+D;IACxE,KAAKA,eAAL,GAAuB,EACrB,GAAGA,eADkB;MAErB7H,KAAK,EAAE;KAFT;;;EAMF4I,WAAW,GAAG,QAAH;;EAEXT,UAAU,CAACvD,MAAD,EAA+B;IACvC,OAAOmH,KAAK,CACT,8CAA6CnH,MAAM,CAACnB,WAAY,EADvD,CAAL,CAELyD,IAFK,CAEC8E,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAFd,CAAP;;;EAKF7D,KAAK,CAACF,OAAD,EAA8B;IACjC,IACE,CAACA,OAAD,IACA,CAACA,OAAO,CAAC6E,IADT,IAEA,CAAC7E,OAAO,CAAC6E,IAAR,CAAab,EAFd,IAGA,CAAChE,OAAO,CAACjD,IAHT,IAIA,CAACiD,OAAO,CAACjD,IAAR,CAAaiH,EALhB,EAME;MACA,OAAO,IAAP;;;IAEF,OAAQ,QAAOhE,OAAO,CAAC6E,IAAR,CAAab,EAAa,SACvChE,OAAO,CAACjD,IAAR,CAAaiH,EACd,EAFD;;;EAKF7C,cAAc,CAACnB,OAAD,EAA0C;IACtD,OAAOA,OAAO,CAACjD,IAAR,CAAauE,KAApB;;;EAGFd,SAAS,CAACR,OAAD,EAAyB;IAChC,OAAOA,OAAO,CAACjD,IAAR,CAAauE,KAAb,GAAqB,CAACtB,OAAO,CAACjD,IAAR,CAAauE,KAAd,CAArB,GAA4C,EAAnD;;;EAGFP,cAAc,CAACf,OAAD,EAA0C;IACtD,OAAOA,OAAO,CAACjD,IAAR,CAAamE,IAApB;;;EAGFD,WAAW,GAAgC;IACzC,OAAO,IAAP;;;EAGFoD,eAAe,CAAC3E,QAAD,EAA6B;IAC1C,OAAO,KAAKxC,QAAL,CAAcoH,SAAd,EAAyB5E,QAAzB,CAAP;;;EAGFxC,QAAQ,CAACqH,QAAD,EAAiC7E,QAAjC,EAA6D;IACnE,OAAO,CAAC6E,QAAD,GACH7E,QAAQ,CAACgC,KAAT,CAAe,GAAf,CADG,GAEH,CAAC,GAAG6C,QAAJ,EAAc,GAAG7E,QAAQ,CAACgC,KAAT,CAAe,GAAf,CAAjB,EAAsC8C,MAAtC,CACE,CAACC,IAAD,EAAOC,CAAP,EAAUC,EAAV,KAAiBA,EAAE,CAACrB,OAAH,CAAWmB,IAAX,MAAqBC,CADxC,CAFJ;;;AAtDJ;;ACDA,MAAMzK,QAAM,GAAG,IAAIC,MAAJ,CAAW,UAAX,CAAf;MAEa4K,YAAY,GAAG,CAC1BC,GAD0B,EAE1BtN,YAF0B,EAI1BuN,EAJ0B,KAMjB;EACT,MAAMC,oBAAoB,GAAGxC,0BAA0B,CACrDsC,GAAG,CAACzK,MAAJ,CAAWsC,GAAX,CAAoC,gBAApC,EAAsDA,GAAtD,CAA0D,WAA1D,CADqD,EAErDnF,YAFqD,EAGrDwC,QAHqD,CAAvD;EAMA,MAAMiL,KAAK,GAAG,IAAIC,GAAJ,EAAd;EACAH,EAAE,CAACE,KAAH,GAAWA,KAAX;EAEAF,EAAE,CAACI,GAAH,CAAO,OAAOC,MAAP,EAAoBC,IAApB,KAAkC;IACvC,MAAMC,aAAa,GAAGF,MAAM,CAACxI,OAA7B,CADuC;;IAGvC,MAAMN,KAAK,GAAGuF,mBAAmB,CAACyD,aAAD,CAAjC;IAEA,IAAI,CAAChJ,KAAL,EAAY,OAAO+I,IAAI,EAAX;IAEZ,MAAM,CAAC9M,SAAD,EAAYuE,IAAZ,IAAoB,MAAMkI,oBAAoB;IAElDM,aAAa,CAACC,OAAd,CAAsB,YAAtB,CAFkD,EAGlDjJ,KAHkD,CAApD;IAMA,IAAI,CAAC/D,SAAD,IAAc,CAACuE,IAAnB,EAAyB,OAAOuI,IAAI,EAAX;IAEzBD,MAAM,CAACtI,IAAP,GAAcA,IAAd;IACAmI,KAAK,CAAC9H,GAAN,CAAUiI,MAAM,CAACI,MAAP,CAAczB,EAAxB,EAA4BjH,IAA5B;IAEAsI,MAAM,CAACK,EAAP,CAAU,cAAV,EAA0B,MAAMR,KAAK,CAACS,MAAN,CAAaN,MAAM,CAACI,MAAP,CAAczB,EAA3B,CAAhC;IAEA,MAAMsB,IAAI,EAAV;GApBF;AAsBD;;ACxCD,MAAMrL,QAAM,GAAG,IAAIC,MAAJ,CAAW,UAAX,CAAf;;AAEA,MAAM0L,eAAe,GACnB7D,GADsB,IAEC;EACvB,IAAIA,GAAG,CAAC5E,OAAR,EAAiB,OAAO4E,GAAG,CAAC5E,OAAJ,CAAY0E,WAAZ,CAAP;EACjB,OAAOC,mBAAmB,CAACC,GAAD,CAA1B;AACD,CALD;AAOA;AACA;AACA;AACA;;;MACa8D,uBAAuB,GAAG,CACrCvL,MADqC,EAErC7C,YAFqC,KAG7B;EACR,MAAMwN,oBAAoB,GAAGxC,0BAA0B,CACrDnI,MAAM,CAACsC,GAAP,CAAgC,gBAAhC,EAAkDA,GAAlD,CAAsD,WAAtD,CADqD,EAErDnF,YAFqD,EAGrDwC,QAHqD,CAAvD;EAMA,OAAO,OAAO;IAAE8H,GAAF;IAAO+D;GAAd,KAA8D;IACnE,IAAIA,UAAU,EAAE/I,IAAhB,EAAsB;MACpB,OAAO;QAAEA,IAAI,EAAE+I,UAAU,CAAC/I;OAA1B;;;IAGF,IAAI,CAACgF,GAAL,EAAU,OAAO,IAAP,CALyD;;IAQnE,MAAMxF,KAAK,GAAGqJ,eAAe,CAAC7D,GAAD,CAA7B;IAEA,IAAI,CAACxF,KAAL,EAAY,OAAO;MAAEQ,IAAI,EAAEuH;KAAf;IAEZ,MAAM,GAAGvH,IAAH,IAAW,MAAMkI,oBAAoB;IAEzClD,GAAG,CAACyD,OAAJ,CAAY,YAAZ,CAFyC,EAGzCjJ,KAHyC,CAA3C;IAMA,OAAO;MAAEQ;KAAT;GAlBF;AAoBD;;ACGD,MAAM9C,MAAM,GAAG,IAAIC,MAAJ,CAAW,UAAX,CAAf;AAEA,MAAM6L,eAAoB,GAAGpM,SAAS,CAACuI,YAAY,CAAC8D,IAAd,CAAtC;AAMe,SAASC,IAAT,CAIb;EACAtO,aADA;EAEAF,YAFA;EAGA8C,UAHA;EAIA3C,eAJA;EAKA0H,iBALA;EAMAzH,SANA;EAOAyK;AAPA,CAJa,EAoBZ;;EAED,OAAQyC,GAAD,IAA0B;IAC/B,MAAMvK,mBAAmB,GAAG,IAAI6E,mBAAJ,CAC1B5H,YAD0B,EAE1B6H,iBAF0B,CAA5B;IAKA,MAAM5H,qBAAqB,GAAG,IAAIyC,qBAAJ,CAC5B4K,GAAG,CAACzK,MADwB,EAE5BC,UAF4B,EAG5BC,mBAH4B,CAA9B;IAMA,MAAMlB,UAAU,GAAG9B,oBAAoB,CAAC;MACtCC,YADsC;MAEtCC,qBAFsC;MAGtCC,aAHsC;MAItCC,eAJsC;MAKtCC;KALqC,CAAvC;;IAQAkN,GAAG,CAACmB,OAAJ,CAAY/M,YAAZ,GAA2B,gBAEzBX,SAFyB,EAGzBuE,IAHyB,EAIV;MACf9C,MAAM,CAACS,KAAP,CAAa,cAAb,EAA6B;QAAElC;OAA/B;;MACA,IAAI,CAACA,SAAL,EAAgB;QACd,MAAM,IAAIN,KAAJ,CAAU,gCAAV,CAAN;;;MAGF,KAAKK,KAAL,CAAWC,SAAX,GAAuBA,SAAvB;MACA,KAAKD,KAAL,CAAWwE,IAAX,GAAkBA,IAAlB;MAEA,MAAMR,KAAK,GAAG,MAAMwJ,eAAe,CACjC;QAAEvN,SAAF;QAAa2N,IAAI,EAAElK,IAAI,CAAC2C,GAAL;OADc,EAEjC,KAAKtE,MAAL,CACGsC,GADH,CAC6B,gBAD7B,EAEGA,GAFH,CAEO,WAFP,CAFiC,EAKjC;QACEwJ,SAAS,EAAE,OADb;QAEE5D,QAAQ,EAAEF,WAAW,IAAI,KAAKzF,OAAL,CAAa2I,OAAb,CAAqB,YAArB,CAF3B;QAGE3J,SAAS,EAAE;OARoB,CAAnC,CATe;;MAsBf,KAAKsB,OAAL,CAAaC,GAAb,CAAiByE,WAAjB,EAA8BtF,KAA9B,EAAqC;QACnCkB,QAAQ,EAAE,IADyB;QAEnCC,MAAM,EAAE,KAAKpD,MAAL,CAAYsC,GAAZ,CAAgB,YAAhB;OAFV;KA1BF;;IAgCAmI,GAAG,CAACmB,OAAJ,CAAY9M,MAAZ,GAAqB,YAA+B;MAClD,OAAO,KAAKb,KAAL,CAAWC,SAAlB;MACA,OAAO,KAAKD,KAAL,CAAWwE,IAAlB;MACA,KAAKI,OAAL,CAAaC,GAAb,CAAiByE,WAAjB,EAA8B,EAA9B,EAAkC;QAAExD,OAAO,EAAE,IAAIpC,IAAJ,CAAS,CAAT;OAA7C;KAHF;;IAMA,MAAMoK,mBAAmB,GAAG5D,0BAA0B,CACpDsC,GAAG,CAACzK,MAAJ,CACGsC,GADH,CAC6B,gBAD7B,EAEGA,GAFH,CAEO,WAFP,CADoD,EAIpDnF,YAJoD,EAKpDwC,MALoD,CAAtD;IAQA,OAAO;MACLqM,MAAM,EAAEjN,YAAY,CAACC,UAAD,CADf;MAGLiN,8BAA8B,EAC5BxE,GAD8B,IAEa;QAC3C,MAAMxF,KAAK,GAAGuF,mBAAmB,CAACC,GAAD,CAAjC;QACA,OAAOsE,mBAAmB,CACxB/D,WAAW,IAAIP,GAAG,CAACyD,OAAJ,CAAY,YAAZ,CADS,EAExBjJ,KAFwB,CAA1B;OAPG;MAYL8J,mBAZK;MAcLG,UAAU,EAAE,OACVzO,GADU,EAEVuN,IAFU,KAGK;QACf,MAAM/I,KAAK,GAAGxE,GAAG,CAACoF,OAAJ,CAAYP,GAAZ,CAAgBiF,WAAhB,CAAd;QACA,MAAM4E,SAAS,GAAG1O,GAAG,CAAC8E,OAAJ,CAAY2I,OAAZ,CAAoB,YAApB,CAAlB;QACAvL,MAAM,CAACS,KAAP,CAAa,YAAb,EAA2B;UAAE6B;SAA7B;;QAEA,MAAMmK,QAAQ,GAAG,CACflO,SADe,EAEfuE,IAFe,KAGN;UACThF,GAAG,CAACQ,KAAJ,CAAUC,SAAV,GAAsBA,SAAtB;UACAT,GAAG,CAACQ,KAAJ,CAAUwE,IAAV,GAAiBA,IAAjB;UACAhF,GAAG,CAAC4O,cAAJ,CAAmBnO,SAAnB,GAA+BA,SAA/B;UACAT,GAAG,CAAC4O,cAAJ,CAAmB5J,IAAnB,GAA0BA,IAAI,IAAItF,YAAY,CAACsL,QAAb,CAAsBhG,IAAtB,CAAlC;SAPF;;QAUA,MAAM,CAACvE,SAAD,EAAYuE,IAAZ,IAAoB,MAAMsJ,mBAAmB,CACjD/D,WAAW,IAAImE,SADkC,EAEjDlK,KAFiD,CAAnD;QAIAtC,MAAM,CAACS,KAAP,CAAa,YAAb,EAA2B;UAAElC;SAA7B;;QAEA,IAAIA,SAAS,IAAI,IAAb,IAAqBuE,IAAI,IAAI,IAAjC,EAAuC;UACrC,IAAIR,KAAJ,EAAWxE,GAAG,CAACoF,OAAJ,CAAYC,GAAZ,CAAgByE,WAAhB,EAA6B,EAA7B,EAAiC;YAAExD,OAAO,EAAE,IAAIpC,IAAJ,CAAS,CAAT;WAA5C;UACXyK,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR;UACA,OAAOpB,IAAI,EAAX;;;QAGFoB,QAAQ,CAAClO,SAAD,EAAYuE,IAAZ,CAAR;QACA,OAAOuI,IAAI,EAAX;;KA7CJ;GAlEF;AAmHD;;;;"}