{"version":3,"file":"index-node12-dev.mjs","sources":["../src/createAuthController.ts","../src/createRoutes.ts","../src/utils/generators.ts","../src/services/authentification/AuthenticationService.ts","../src/services/user/UserAccountsService.ts","../src/utils/cookies.ts","../src/utils/createFindConnectedAndUser.ts","../src/MongoUsersManager.ts","../src/services/user/UserAccountGoogleService.ts","../src/services/user/UserAccountSlackService.ts","../src/authSocketIO.ts","../src/authApolloContext.ts","../src/index.ts"],"sourcesContent":["import type { Context } from 'alp-node';\nimport 'alp-router';\nimport type MongoUsersManager from './MongoUsersManager';\nimport type {\n  AuthenticationService,\n  AccessResponseHooks,\n} from './services/authentification/AuthenticationService';\nimport type {\n  AllowedStrategyKeys,\n  AllowedMapParamsStrategy,\n} from './services/authentification/types';\n\nexport interface CreateAuthControllerParams<\n  StrategyKeys extends AllowedStrategyKeys\n> {\n  authenticationService: AuthenticationService<StrategyKeys>;\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager;\n  defaultStrategy?: StrategyKeys;\n  authHooks?: AuthHooks<StrategyKeys>;\n}\n\nexport interface AuthController {\n  login: (ctx: Context) => Promise<void>;\n  addScope: (ctx: Context) => Promise<void>;\n  loginResponse: (ctx: Context) => Promise<void>;\n  logout: (ctx: Context) => Promise<void>;\n}\n\ntype OptionalRecord<K extends keyof any, T> = { [P in K]?: T };\n\nexport interface AuthHooks<StrategyKeys extends AllowedStrategyKeys>\n  extends AccessResponseHooks<StrategyKeys> {\n  paramsForLogin?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    ctx: Context,\n  ) => // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n  | void\n    | Promise<void>\n    | OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>\n    | Promise<OptionalRecord<AllowedMapParamsStrategy[StrategyKey], any>>;\n}\n\nexport function createAuthController<StrategyKeys extends AllowedStrategyKeys>({\n  usersManager,\n  authenticationService,\n  homeRouterKey = '/',\n  defaultStrategy,\n  authHooks = {},\n}: CreateAuthControllerParams<StrategyKeys>): AuthController {\n  return {\n    async login(ctx: Context): Promise<void> {\n      const strategy: StrategyKeys = (ctx.namedParam('strategy') ||\n        defaultStrategy) as StrategyKeys;\n      if (!strategy) throw new Error('Strategy missing');\n      const params =\n        (authHooks.paramsForLogin &&\n          (await authHooks.paramsForLogin(strategy, ctx))) ||\n        {};\n      await authenticationService.redirectAuthUrl(ctx, strategy, {}, params);\n    },\n\n    async addScope(ctx: Context): Promise<void> {\n      if (ctx.state.connected) {\n        await ctx.redirectTo(homeRouterKey);\n        return;\n      }\n\n      const strategy: StrategyKeys = (ctx.namedParam('strategy') ||\n        defaultStrategy) as StrategyKeys;\n      if (!strategy) throw new Error('Strategy missing');\n      const scopeKey = ctx.namedParam('scopeKey');\n      if (!scopeKey) throw new Error('Scope missing');\n      await authenticationService.redirectAuthUrl(ctx, strategy, { scopeKey });\n    },\n\n    async loginResponse(ctx: Context): Promise<void> {\n      if (ctx.state.connected) {\n        await ctx.redirectTo(homeRouterKey);\n        return;\n      }\n\n      const strategy: StrategyKeys = ctx.namedParam('strategy') as StrategyKeys;\n      ctx.assert(strategy);\n\n      const connectedUser = await authenticationService.accessResponse(\n        ctx,\n        strategy,\n        ctx.state.connected as boolean | undefined,\n        {\n          afterLoginSuccess: authHooks.afterLoginSuccess,\n          afterScopeUpdate: authHooks.afterScopeUpdate,\n        },\n      );\n      const keyPath = usersManager.store.keyPath;\n      ctx.setConnected(connectedUser[keyPath], connectedUser);\n      await ctx.redirectTo(homeRouterKey);\n    },\n\n    async logout(ctx: Context): Promise<void> {\n      ctx.logout();\n      await ctx.redirectTo(homeRouterKey);\n    },\n  };\n}\n","import type { AuthController } from './createAuthController';\n\nexport interface AuthRoutes {\n  login: [string, (segment: any) => void];\n  addScope: [string, AuthController['addScope']];\n  logout: [string, AuthController['logout']];\n}\n\nexport const createRoutes = (controller: AuthController): AuthRoutes => ({\n  login: [\n    '/login/:strategy?',\n    (segment: any) => {\n      segment.add('/response', controller.loginResponse, 'loginResponse');\n      segment.defaultRoute(controller.login, 'login');\n    },\n  ],\n  addScope: ['/auth/add-scope/:strategy/:scopeKey', controller.addScope],\n  logout: ['/logout', controller.logout],\n});\n","import { randomBytes } from 'crypto';\nimport { promisify } from 'util';\n\nconst randomBytesPromisified = promisify(randomBytes);\n\nexport async function randomBase64(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('base64');\n}\n\nexport async function randomHex(size: number): Promise<string> {\n  const buffer = await randomBytesPromisified(size);\n  return buffer.toString('hex');\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable camelcase, max-lines */\nimport { EventEmitter } from 'events';\nimport 'alp-router';\nimport type { Context, NodeConfig } from 'alp-types';\nimport Logger from 'nightingale-logger';\nimport type { OAuthClient } from 'simple-oauth2';\nimport type { AccountId, User, Account } from '../../../types.d';\nimport { randomHex } from '../../utils/generators';\nimport type UserAccountsService from '../user/UserAccountsService';\nimport type { AllowedStrategyKeys, Tokens } from './types';\n\nconst logger = new Logger('alp:auth:authentication');\n\nexport interface GenerateAuthUrlOptions {\n  accessType?: string;\n  grantType?: string;\n  includeGrantedScopes?: boolean;\n  loginHint?: string;\n  prompt?: string;\n  redirectUri?: string;\n  scope?: string;\n  state?: string;\n}\n\nexport interface GetTokensOptions {\n  code: string;\n  redirectUri: string;\n}\n\nexport interface Strategy {\n  type: string;\n}\n\nexport interface Oauth2Strategy<Params extends string> extends Strategy {\n  oauth2: OAuthClient<Params>;\n}\n\nexport type Strategies<StrategyKeys extends AllowedStrategyKeys> = Record<\n  StrategyKeys,\n  Oauth2Strategy<any>\n>;\n\nexport interface AccessResponseHooks<StrategyKeys> {\n  afterLoginSuccess?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    connectedUser: any,\n  ) => void | Promise<void>;\n\n  afterScopeUpdate?: <StrategyKey extends StrategyKeys>(\n    strategy: StrategyKey,\n    scopeKey: string,\n    account: Account,\n    user: User,\n  ) => void | Promise<void>;\n}\n\nexport class AuthenticationService<\n  StrategyKeys extends AllowedStrategyKeys\n> extends EventEmitter {\n  config: NodeConfig;\n\n  strategies: Strategies<StrategyKeys>;\n\n  userAccountsService: UserAccountsService<StrategyKeys>;\n\n  constructor(\n    config: NodeConfig,\n    strategies: Strategies<StrategyKeys>,\n    userAccountsService: UserAccountsService<StrategyKeys>,\n  ) {\n    super();\n    this.config = config;\n    this.strategies = strategies;\n    this.userAccountsService = userAccountsService;\n  }\n\n  generateAuthUrl<T extends StrategyKeys>(strategy: T, params: any): string {\n    logger.debug('generateAuthUrl', { strategy, params });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2':\n        return strategyInstance.oauth2.authorizationCode.authorizeURL(params);\n      default:\n        throw new Error('Invalid strategy');\n    }\n  }\n\n  async getTokens(\n    strategy: StrategyKeys,\n    options: GetTokensOptions,\n  ): Promise<Tokens> {\n    logger.debug('getTokens', { strategy, options });\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const result = await strategyInstance.oauth2.authorizationCode.getToken(\n          {\n            code: options.code,\n            redirect_uri: options.redirectUri,\n          },\n        );\n        if (!result) return result;\n        return {\n          accessToken: result.access_token,\n          refreshToken: result.refresh_token,\n          tokenType: result.token_type,\n          expiresIn: result.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + result.expires_in * 1000);\n            return d;\n          })(),\n          idToken: result.id_token,\n        };\n        // return strategyInstance.accessToken.create(result);\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  async refreshToken(\n    strategy: StrategyKeys,\n    tokensParam: { refreshToken: string },\n  ): Promise<Tokens> {\n    logger.debug('refreshToken', { strategy });\n    if (!tokensParam.refreshToken) {\n      throw new Error('Missing refresh token');\n    }\n    const strategyInstance = this.strategies[strategy];\n    switch (strategyInstance.type) {\n      case 'oauth2': {\n        const token = strategyInstance.oauth2.accessToken.create({\n          refresh_token: tokensParam.refreshToken,\n        });\n        const result = await token.refresh();\n        const tokens = result.token;\n        return {\n          accessToken: tokens.access_token,\n          tokenType: tokens.token_type,\n          expiresIn: tokens.expires_in,\n          expireDate: (() => {\n            const d = new Date();\n            d.setTime(d.getTime() + tokens.expires_in * 1000);\n            return d;\n          })(),\n          idToken: tokens.id_token,\n        };\n      }\n\n      default:\n        throw new Error('Invalid stategy');\n    }\n  }\n\n  redirectUri(ctx: Context, strategy: string): string {\n    const host = `http${this.config.get('allowHttps') ? 's' : ''}://${\n      ctx.request.host\n    }`;\n    return `${host}${ctx.urlGenerator('loginResponse', { strategy })}`;\n  }\n\n  async redirectAuthUrl(\n    ctx: Context,\n    strategy: StrategyKeys,\n    {\n      refreshToken,\n      scopeKey,\n      user,\n      accountId,\n    }: {\n      refreshToken?: string | undefined;\n      scopeKey?: string | undefined;\n      user?: User;\n      accountId?: AccountId;\n    },\n    params?: any,\n  ): Promise<void> {\n    logger.debug('redirectAuthUrl', { strategy, scopeKey, refreshToken });\n    const state = await randomHex(8);\n    const isLoginAccess = !scopeKey || scopeKey === 'login';\n    const scope = this.userAccountsService.getScope(\n      strategy,\n      scopeKey || 'login',\n      user,\n      accountId,\n    );\n\n    if (!scope) {\n      throw new Error('Invalid empty scope');\n    }\n\n    ctx.cookies.set(\n      `auth_${strategy}_${state}`,\n      JSON.stringify({\n        scopeKey,\n        scope,\n        isLoginAccess,\n      }),\n      {\n        maxAge: 10 * 60 * 1000,\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      },\n    );\n    const redirectUri = this.generateAuthUrl(strategy, {\n      redirect_uri: this.redirectUri(ctx, strategy),\n      scope,\n      state,\n      access_type: refreshToken ? 'offline' : 'online',\n      ...params,\n    });\n\n    return ctx.redirect(redirectUri);\n  }\n\n  async accessResponse<StrategyKey extends StrategyKeys>(\n    ctx: any,\n    strategy: StrategyKey,\n    isConnected: undefined | boolean,\n    hooks: AccessResponseHooks<StrategyKeys>,\n  ): Promise<User> {\n    if (ctx.query.error) {\n      const error: any = new Error(ctx.query.error);\n      error.status = 403;\n      error.expose = true;\n      throw error;\n    }\n\n    const code = ctx.query.code;\n    const state = ctx.query.state;\n    const cookieName = `auth_${strategy}_${state as string}`;\n    let cookie = ctx.cookies.get(cookieName);\n    ctx.cookies.set(cookieName, '', { expires: new Date(1) });\n    if (!cookie) {\n      throw new Error('No cookie for this state');\n    }\n\n    cookie = JSON.parse(cookie);\n    if (!cookie || !cookie.scope) {\n      throw new Error('Unexpected cookie value');\n    }\n\n    if (!cookie.isLoginAccess) {\n      if (!isConnected) {\n        throw new Error('You are not connected');\n      }\n    }\n\n    const tokens: Tokens = await this.getTokens(strategy, {\n      code,\n      redirectUri: this.redirectUri(ctx, strategy),\n    });\n\n    if (cookie.isLoginAccess) {\n      const user = await this.userAccountsService.findOrCreateFromStrategy(\n        strategy,\n        tokens,\n        cookie.scope,\n        cookie.scopeKey,\n      );\n\n      if (hooks.afterLoginSuccess) {\n        await hooks.afterLoginSuccess(strategy, user);\n      }\n\n      return user;\n    }\n\n    const connectedUser = ctx.state.user;\n    const { account, user } = await this.userAccountsService.update(\n      connectedUser,\n      strategy,\n      tokens,\n      cookie.scope,\n      cookie.scopeKey,\n    );\n\n    if (hooks.afterScopeUpdate) {\n      await hooks.afterScopeUpdate(strategy, cookie.scopeKey, account, user);\n    }\n\n    return connectedUser;\n  }\n\n  refreshAccountTokens(user: User, account: Account): Promise<boolean> {\n    if (\n      account.tokenExpireDate &&\n      account.tokenExpireDate.getTime() > Date.now()\n    ) {\n      return Promise.resolve(false);\n    }\n    return this.refreshToken(account.provider as StrategyKeys, {\n      // accessToken: account.accessToken,\n      refreshToken: account.refreshToken as string,\n    }).then((tokens: Tokens) => {\n      if (!tokens) {\n        // serviceGoogle.updateFields({ accessToken:null, refreshToken:null, status: .OUTDATED });\n        return false;\n      }\n      account.accessToken = tokens.accessToken;\n      account.tokenExpireDate = tokens.expireDate;\n      return this.userAccountsService\n        .updateAccount(user, account)\n        .then(() => true);\n    });\n  }\n}\n","import { EventEmitter } from 'events';\nimport Logger from 'nightingale-logger';\nimport type { AccountId, User, Account } from '../../../types.d';\nimport type MongoUsersManager from '../../MongoUsersManager';\nimport type { AllowedStrategyKeys } from '../authentification/types';\nimport type { AccountService, TokensObject } from './types';\n\nconst logger = new Logger('alp:auth:userAccounts');\n\nexport const STATUSES = {\n  VALIDATED: 'validated',\n  DELETED: 'deleted',\n};\n\nexport default class UserAccountsService<\n  StrategyKeys extends AllowedStrategyKeys\n> extends EventEmitter {\n  private readonly strategyToService: Record<StrategyKeys, AccountService<any>>;\n\n  usersManager: MongoUsersManager;\n\n  constructor(\n    usersManager: MongoUsersManager,\n    strategyToService: Record<StrategyKeys, AccountService<any>>,\n  ) {\n    super();\n    this.usersManager = usersManager;\n    this.strategyToService = strategyToService;\n  }\n\n  getScope(\n    strategy: StrategyKeys,\n    scopeKey: string,\n    user?: User,\n    accountId?: AccountId,\n  ): string {\n    logger.debug('getScope', { strategy, userId: user?._id });\n    const service = this.strategyToService[strategy];\n    if (!service) {\n      throw new Error('Strategy not supported');\n    }\n\n    const newScope = service.scopeKeyToScope[scopeKey];\n    if (!user || !accountId) {\n      return newScope;\n    }\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      throw new Error('Could not found associated account');\n    }\n    return service.getScope(account.scope, newScope).join(' ');\n  }\n\n  async update(\n    user: User,\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<{ user: User; account: User['accounts'][number] }> {\n    const service = this.strategyToService[strategy];\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    const account = user.accounts.find(\n      (account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n    if (!account) {\n      // TODO check if already exists in other user => merge\n      // TODO else add a new account in this user\n      throw new Error('Could not found associated account');\n    }\n    account.status = 'valid';\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n    account.subservices = account.subservices || [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    await this.usersManager.replaceOne(user);\n    return { user, account };\n  }\n\n  async findOrCreateFromStrategy(\n    strategy: StrategyKeys,\n    tokens: TokensObject,\n    scope: string,\n    subservice: string,\n  ): Promise<User> {\n    const service = this.strategyToService[strategy];\n    if (!service) throw new Error('Strategy not supported');\n\n    const profile = await service.getProfile(tokens);\n    const accountId = service.getId(profile);\n    if (!accountId) throw new Error('Invalid profile: no id found');\n\n    const emails = service.getEmails(profile);\n\n    let user:\n      | Partial<User>\n      | undefined = await this.usersManager.findOneByAccountOrEmails({\n      provider: service.providerKey,\n      accountId,\n      emails,\n    });\n\n    logger.info(!user ? 'create user' : 'existing user', { emails, user });\n\n    if (!user) {\n      user = {};\n    }\n\n    Object.assign(user, {\n      displayName: service.getDisplayName(profile),\n      fullName: service.getFullName(profile),\n      status: STATUSES.VALIDATED,\n    });\n\n    if (!user.accounts) user.accounts = [];\n\n    let account: Partial<Account> | undefined = user.accounts.find(\n      (account: Account) =>\n        account.provider === strategy && account.accountId === accountId,\n    );\n\n    if (!account) {\n      account = { provider: strategy, accountId };\n      // @ts-expect-error well...\n      user.accounts.push(account);\n    }\n\n    account.name = service.getAccountName(profile);\n    account.status = 'valid';\n    account.profile = profile;\n    account.accessToken = tokens.accessToken;\n    if (tokens.refreshToken) {\n      account.refreshToken = tokens.refreshToken;\n    }\n    if (tokens.expireDate) {\n      account.tokenExpireDate = tokens.expireDate;\n    }\n    account.scope = service.getScope(account.scope, scope);\n\n    if (!account.subservices) account.subservices = [];\n    if (subservice && !account.subservices.includes(subservice)) {\n      account.subservices.push(subservice);\n    }\n\n    if (!user.emails) user.emails = [];\n    const userEmails = user.emails;\n    emails.forEach((email: string) => {\n      if (!userEmails.includes(email)) {\n        userEmails.push(email);\n      }\n    });\n\n    user.emailDomains = [\n      ...user.emails.reduce(\n        (domains: Set<string>, email: string) =>\n          domains.add(email.split('@', 2)[1]),\n        new Set<string>(),\n      ),\n    ];\n\n    const keyPath = this.usersManager.store.keyPath;\n\n    if (user[keyPath]) {\n      await this.usersManager.replaceOne(user as User);\n    } else {\n      await this.usersManager.insertOne(user as User);\n    }\n\n    return user as User;\n  }\n\n  async updateAccount(user: User, account: Account): Promise<User> {\n    await this.usersManager.updateAccount(user, account);\n    return user;\n  }\n}\n","import type { IncomingMessage } from 'http';\nimport type { Option } from 'cookies';\nimport Cookies from 'cookies';\n\nexport const COOKIE_NAME = 'connectedUser';\n\nexport const getTokenFromRequest = (\n  req: IncomingMessage,\n  options?: Pick<Option, Exclude<keyof Option, 'secure'>>,\n): string | undefined => {\n  const cookies = new Cookies(req, (null as unknown) as any, {\n    ...options,\n    secure: true,\n  });\n\n  return cookies.get(COOKIE_NAME);\n};\n","import { promisify } from 'util';\nimport type {\n  GetPublicKeyOrSecret,\n  Secret,\n  VerifyCallback,\n  VerifyOptions,\n} from 'jsonwebtoken';\nimport { verify } from 'jsonwebtoken';\nimport type Logger from 'nightingale-logger';\nimport type { User } from '../../types.d';\nimport type MongoUsersManager from '../MongoUsersManager';\n\ntype Verify = (\n  token: string,\n  secretOrPublicKey: Secret | GetPublicKeyOrSecret,\n  options?: VerifyOptions,\n  callback?: VerifyCallback,\n) => void;\n\nconst verifyPromisified = promisify<\n  Parameters<Verify>[0],\n  Parameters<Verify>[1],\n  Parameters<Verify>[2],\n  Parameters<VerifyCallback>[1]\n>(verify as Verify);\n\nconst createDecodeJWT = (secretKey: string) => async (\n  token: string,\n  userAgent: string,\n): Promise<string | undefined> => {\n  const result = await verifyPromisified(token, secretKey, {\n    algorithms: ['HS512'],\n    audience: userAgent,\n  });\n  return (result as any)?.connected as string | undefined;\n};\n\nexport type FindConnectedAndUser<U> = (\n  userAgent?: string,\n  token?: string,\n) => Promise<[null | string | number, null | undefined | U]>;\n\nexport const createFindConnectedAndUser = <U extends User>(\n  secretKey: string,\n  usersManager: MongoUsersManager<U>,\n  logger: Logger,\n): FindConnectedAndUser<U> => {\n  const decodeJwt = createDecodeJWT(secretKey);\n\n  const findConnectedAndUser: FindConnectedAndUser<U> = async (\n    userAgent,\n    token,\n  ) => {\n    if (!token || !userAgent) return [null, null];\n\n    let connected;\n    try {\n      connected = await decodeJwt(token, userAgent);\n    } catch (err: unknown) {\n      logger.debug('failed to verify authentification', { err });\n    }\n\n    if (connected == null) return [null, null];\n\n    const user = await usersManager.findConnected(connected);\n\n    return [connected, user];\n  };\n\n  return findConnectedAndUser;\n};\n","import type { MongoInsertType, MongoStore, Update } from 'liwi-mongo';\nimport type { User, Account, UserSanitized } from '../types.d';\n\nexport default class MongoUsersManager<\n  U extends User = User,\n  USanitized extends UserSanitized = UserSanitized\n> {\n  store: MongoStore<U>;\n\n  constructor(store: MongoStore<U>) {\n    this.store = store;\n  }\n\n  findConnected(connected: string): Promise<U | undefined> {\n    return this.store.findByKey(connected);\n  }\n\n  insertOne(user: MongoInsertType<U>): Promise<any> {\n    return this.store.insertOne(user);\n  }\n\n  replaceOne(user: U): Promise<any> {\n    return this.store.replaceOne(user);\n  }\n\n  sanitize(user: U): USanitized {\n    return this.sanitizeBaseUser(user) as USanitized;\n  }\n\n  findOneByAccountOrEmails({\n    accountId,\n    emails,\n    provider,\n  }: {\n    accountId: string | number;\n    emails?: string[];\n    provider: string;\n  }): Promise<U | undefined> {\n    let query: any = {\n      'accounts.provider': provider,\n      'accounts.accountId': accountId,\n    };\n\n    if (emails && emails.length > 0) {\n      query = {\n        $or: [\n          query,\n          {\n            emails: { $in: emails },\n          },\n        ],\n      };\n    }\n\n    return this.store.findOne(query);\n  }\n\n  updateAccount(user: U, account: Account): Promise<U> {\n    const accountIndex = user.accounts.indexOf(account);\n    if (accountIndex === -1) {\n      throw new Error('Invalid account');\n    }\n\n    return this.store.partialUpdateOne(user, {\n      $set: {\n        [`accounts.${accountIndex}`]: account,\n      },\n    } as Update<U>);\n  }\n\n  protected sanitizeBaseUser(user: U): UserSanitized {\n    return {\n      _id: user._id,\n      created: user.created,\n      updated: user.updated,\n      displayName: user.displayName,\n      fullName: user.fullName,\n      status: user.status,\n      emails: user.emails,\n      emailDomains: user.emailDomains,\n      accounts: user.accounts.map((account: Account) => ({\n        provider: account.provider,\n        accountId: account.accountId,\n        name: account.name,\n        status: account.status,\n        profile: account.profile,\n      })),\n    };\n  }\n}\n","/* global fetch */\nimport type { Tokens } from '../authentification/types';\nimport type { AccountService, FullName } from './types';\n\nexport default class UserAccountGoogleService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys> {\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'openid profile email',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens): Promise<any> {\n    return fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any): any {\n    return profile.id;\n  }\n\n  getAccountName(profile: any): string | null | undefined {\n    return profile.email;\n  }\n\n  getEmails(profile: any): string[] {\n    const emails: string[] = [];\n\n    if (profile.email) {\n      emails.push(profile.email);\n    }\n\n    return emails;\n  }\n\n  getDisplayName(profile: any): string | null | undefined {\n    return profile.name;\n  }\n\n  getFullName(profile: any): FullName {\n    return {\n      givenName: profile.given_name,\n      familyName: profile.family_name,\n    };\n  }\n\n  getDefaultScope(newScope: string): string[] {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string): string[] {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope\n          .concat(newScope.split(' '))\n          .filter((item: any, i: any, ar: string[]) => ar.indexOf(item) === i);\n  }\n}\n","/* global fetch */\nimport type { Tokens } from '../authentification/types';\nimport type { AccountService, FullName } from './types';\n\n// https://api.slack.com/methods/users.identity\n\nexport default class UserAccountSlackService<ScopeKeys extends 'login'>\n  implements AccountService<ScopeKeys> {\n  scopeKeyToScope: Record<ScopeKeys, string>;\n\n  constructor(scopeKeyToScope: Record<Exclude<'login', ScopeKeys>, string>) {\n    this.scopeKeyToScope = {\n      ...scopeKeyToScope,\n      login: 'identity.basic identity.email identity.avatar',\n    };\n  }\n\n  providerKey = 'google';\n\n  getProfile(tokens: Tokens): Promise<any> {\n    return fetch(\n      `https://slack.com/api/users.identity?token=${tokens.accessToken}`,\n    ).then((response) => response.json());\n  }\n\n  getId(profile: any): string | null {\n    if (\n      !profile ||\n      !profile.team ||\n      !profile.team.id ||\n      !profile.user ||\n      !profile.user.id\n    ) {\n      return null;\n    }\n    return `team:${profile.team.id as string};user:${\n      profile.user.id as string\n    }`;\n  }\n\n  getAccountName(profile: any): string | null | undefined {\n    return profile.user.email;\n  }\n\n  getEmails(profile: any): string[] {\n    return profile.user.email ? [profile.user.email] : [];\n  }\n\n  getDisplayName(profile: any): string | null | undefined {\n    return profile.user.name;\n  }\n\n  getFullName(profile: any): FullName | null {\n    return null;\n  }\n\n  getDefaultScope(newScope: string): string[] {\n    return this.getScope(undefined, newScope);\n  }\n\n  getScope(oldScope: string[] | undefined, newScope: string): string[] {\n    return !oldScope\n      ? newScope.split(' ')\n      : oldScope\n          .concat(newScope.split(' '))\n          .filter((item: any, i: any, ar: string[]) => ar.indexOf(item) === i);\n  }\n}\n","import type { NodeApplication } from 'alp-types';\nimport type { Option } from 'cookies';\nimport Logger from 'nightingale-logger';\nimport type { User } from '../types.d';\nimport type MongoUsersManager from './MongoUsersManager';\nimport { getTokenFromRequest } from './utils/cookies';\nimport { createFindConnectedAndUser } from './utils/createFindConnectedAndUser';\n\nconst logger = new Logger('alp:auth');\n\nexport const authSocketIO = <U extends User = User>(\n  app: NodeApplication,\n  usersManager: MongoUsersManager<U>,\n  io: any,\n  options?: Pick<Option, Exclude<keyof Option, 'secure'>>,\n): void => {\n  const findConnectedAndUser = createFindConnectedAndUser(\n    app.config\n      .get<Map<string, string>>('authentication')\n      .get('secretKey') as string,\n    usersManager,\n    logger,\n  );\n\n  const users = new Map();\n  io.users = users;\n\n  io.use(async (socket: any, next: any) => {\n    const handshakeData = socket.request;\n    const token = getTokenFromRequest(handshakeData);\n\n    if (!token) return next();\n\n    const [connected, user] = await findConnectedAndUser(\n      handshakeData.headers['user-agent'],\n      token,\n    );\n\n    if (!connected || !user) return next();\n\n    socket.user = user;\n    users.set(socket.client.id, user);\n\n    socket.on('disconnected', () => users.delete(socket.client.id));\n\n    await next();\n  });\n};\n","import type { IncomingMessage } from 'http';\nimport type { NodeConfig } from 'alp-types';\nimport Logger from 'nightingale-logger';\nimport type { User } from '../types.d';\nimport type MongoUsersManager from './MongoUsersManager';\nimport { getTokenFromRequest, COOKIE_NAME } from './utils/cookies';\nimport { createFindConnectedAndUser } from './utils/createFindConnectedAndUser';\n\nconst logger = new Logger('alp:auth');\n\nconst getTokenFromReq = (\n  req: IncomingMessage & { cookies?: Record<string, string> },\n): string | undefined => {\n  if (req.cookies) return req.cookies[COOKIE_NAME];\n  return getTokenFromRequest(req);\n};\n\n/*\n * Not tested yet.\n * @internal\n */\nexport const createAuthApolloContext = <U extends User = User>(\n  config: NodeConfig,\n  usersManager: MongoUsersManager<U>,\n): any => {\n  const findConnectedAndUser = createFindConnectedAndUser(\n    config\n      .get<Map<string, string>>('authentication')\n      .get('secretKey') as string,\n    usersManager,\n    logger,\n  );\n\n  return async ({ req, connection }: { req: any; connection: any }) => {\n    if (connection?.user) {\n      return { user: connection.user };\n    }\n\n    if (!req) return null;\n\n    const token = getTokenFromReq(req);\n\n    if (!token) return { user: undefined };\n\n    const [, user] = await findConnectedAndUser(\n      req.headers['user-agent'],\n      token,\n    );\n\n    return { user };\n  };\n};\n","import type { IncomingMessage } from 'http';\nimport { promisify } from 'util';\nimport type { Context } from 'alp-node';\nimport type {\n  ContextState,\n  ContextSanitizedState,\n  NodeApplication,\n} from 'alp-types';\nimport { sign } from 'jsonwebtoken';\nimport Logger from 'nightingale-logger';\nimport type { User, UserSanitized } from '../types.d';\nimport type MongoUsersManager from './MongoUsersManager';\nimport type {\n  AuthController as AuthControllerType,\n  AuthHooks,\n} from './createAuthController';\nimport { createAuthController } from './createAuthController';\nimport type { AuthRoutes as AuthRoutesType } from './createRoutes';\nimport { createRoutes } from './createRoutes';\nimport type { Strategies } from './services/authentification/AuthenticationService';\nimport { AuthenticationService } from './services/authentification/AuthenticationService';\nimport type { AllowedStrategyKeys } from './services/authentification/types';\nimport UserAccountsService from './services/user/UserAccountsService';\nimport type { AccountService } from './services/user/types';\nimport { getTokenFromRequest, COOKIE_NAME } from './utils/cookies';\nimport { createFindConnectedAndUser } from './utils/createFindConnectedAndUser';\n\nexport { AuthenticationService };\nexport { default as MongoUsersManager } from './MongoUsersManager';\nexport { default as UserAccountGoogleService } from './services/user/UserAccountGoogleService';\nexport { default as UserAccountSlackService } from './services/user/UserAccountSlackService';\nexport { authSocketIO } from './authSocketIO';\nexport { createAuthApolloContext } from './authApolloContext';\nexport { STATUSES } from './services/user/UserAccountsService';\n\ndeclare module 'alp-types' {\n  interface ContextState {\n    connected: NonNullable<ContextState['user']>['_id'] | null | undefined;\n    user: User | null | undefined;\n  }\n\n  interface ContextSanitizedState {\n    connected:\n      | NonNullable<ContextSanitizedState['user']>['_id']\n      | null\n      | undefined;\n    user: UserSanitized | null | undefined;\n  }\n\n  interface BaseContext {\n    setConnected: (\n      connected: NonNullable<ContextState['user']>['_id'],\n      user: NonNullable<ContextState['user']>,\n    ) => void;\n    logout: () => void;\n  }\n}\n\nconst logger = new Logger('alp:auth');\n\nconst signPromisified: any = promisify(sign);\n\nexport type AuthController = AuthControllerType;\nexport type AuthRoutes = AuthRoutesType;\n\nexport default function init<\n  StrategyKeys extends AllowedStrategyKeys = 'google'\n>({\n  homeRouterKey,\n  usersManager,\n  strategies,\n  defaultStrategy,\n  strategyToService,\n  authHooks,\n}: {\n  homeRouterKey?: string;\n  usersManager: MongoUsersManager<\n    NonNullable<ContextState['user']>,\n    NonNullable<ContextSanitizedState['user']>\n  >;\n  strategies: Strategies<StrategyKeys>;\n  defaultStrategy?: StrategyKeys;\n  strategyToService: Record<StrategyKeys, AccountService<any>>;\n  authHooks?: AuthHooks<StrategyKeys>;\n}) {\n  return (app: NodeApplication) => {\n    const userAccountsService = new UserAccountsService(\n      usersManager,\n      strategyToService,\n    );\n\n    const authenticationService = new AuthenticationService(\n      app.config,\n      strategies,\n      userAccountsService,\n    );\n\n    const controller = createAuthController({\n      usersManager,\n      authenticationService,\n      homeRouterKey,\n      defaultStrategy,\n      authHooks,\n    });\n\n    app.context.setConnected = async function (\n      this: Context,\n      connected: NonNullable<ContextState['user']>['_id'],\n      user: NonNullable<ContextState['user']>,\n    ): Promise<void> {\n      logger.debug('setConnected', { connected });\n      if (!connected) {\n        throw new Error('Illegal value for setConnected');\n      }\n\n      this.state.connected = connected;\n      this.state.user = user;\n\n      const token = await signPromisified(\n        { connected, time: Date.now() },\n        this.config\n          .get<Map<string, unknown>>('authentication')\n          .get('secretKey'),\n        {\n          algorithm: 'HS512',\n          audience: this.request.headers['user-agent'],\n          expiresIn: '30 days',\n        },\n      );\n\n      this.cookies.set(COOKIE_NAME, token, {\n        httpOnly: true,\n        secure: this.config.get('allowHttps'),\n      });\n    };\n\n    app.context.logout = function (this: Context): void {\n      delete this.state.connected;\n      delete this.state.user;\n      this.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n    };\n\n    const getConnectedAndUser = createFindConnectedAndUser(\n      app.config\n        .get<Map<string, unknown>>('authentication')\n        .get('secretKey') as string,\n      usersManager,\n      logger,\n    );\n\n    return {\n      routes: createRoutes(controller),\n\n      getConnectedAndUserFromRequest: (\n        req: IncomingMessage,\n      ): ReturnType<typeof getConnectedAndUser> => {\n        const token = getTokenFromRequest(req);\n        return getConnectedAndUser(req.headers['user-agent'], token);\n      },\n      getConnectedAndUser,\n\n      middleware: async <T>(\n        ctx: Context,\n        next: () => T | Promise<T>,\n      ): Promise<T> => {\n        const token = ctx.cookies.get(COOKIE_NAME);\n        const userAgent = ctx.request.headers['user-agent'];\n        logger.debug('middleware', { token });\n\n        const setState = (connected: any, user: ContextState['user']): void => {\n          ctx.state.connected = connected;\n          ctx.state.user = user;\n          ctx.sanitizedState.connected = connected;\n          ctx.sanitizedState.user = user && usersManager.sanitize(user);\n        };\n\n        const [connected, user] = await getConnectedAndUser(userAgent, token);\n        logger.debug('middleware', { connected });\n\n        if (connected == null || user == null) {\n          if (token) ctx.cookies.set(COOKIE_NAME, '', { expires: new Date(1) });\n          setState(null, null);\n          return next();\n        }\n\n        setState(connected, user);\n        return next();\n      },\n    };\n  };\n}\n"],"names":["createAuthController","usersManager","authenticationService","homeRouterKey","defaultStrategy","authHooks","login","ctx","strategy","namedParam","Error","params","paramsForLogin","redirectAuthUrl","addScope","state","connected","redirectTo","scopeKey","loginResponse","assert","connectedUser","accessResponse","afterLoginSuccess","afterScopeUpdate","keyPath","store","setConnected","logout","createRoutes","controller","segment","add","defaultRoute","randomBytesPromisified","promisify","randomBytes","randomHex","size","buffer","toString","logger","Logger","AuthenticationService","EventEmitter","constructor","config","strategies","userAccountsService","generateAuthUrl","debug","strategyInstance","type","oauth2","authorizationCode","authorizeURL","getTokens","options","result","getToken","code","redirect_uri","redirectUri","accessToken","access_token","refreshToken","refresh_token","tokenType","token_type","expiresIn","expires_in","expireDate","d","Date","setTime","getTime","idToken","id_token","tokensParam","token","create","refresh","tokens","host","get","request","urlGenerator","user","accountId","scope","getScope","cookies","set","JSON","stringify","isLoginAccess","maxAge","httpOnly","secure","access_type","redirect","isConnected","hooks","query","error","status","expose","cookieName","cookie","expires","parse","findOrCreateFromStrategy","account","update","refreshAccountTokens","tokenExpireDate","now","Promise","resolve","provider","then","updateAccount","STATUSES","VALIDATED","DELETED","UserAccountsService","strategyToService","userId","_id","service","newScope","scopeKeyToScope","accounts","find","join","subservice","profile","getProfile","getId","subservices","includes","push","replaceOne","emails","getEmails","findOneByAccountOrEmails","providerKey","info","Object","assign","displayName","getDisplayName","fullName","getFullName","name","getAccountName","userEmails","forEach","email","emailDomains","reduce","domains","split","Set","insertOne","COOKIE_NAME","getTokenFromRequest","req","Cookies","verifyPromisified","verify","createDecodeJWT","secretKey","userAgent","algorithms","audience","createFindConnectedAndUser","decodeJwt","err","findConnected","MongoUsersManager","findByKey","sanitize","sanitizeBaseUser","length","$or","$in","findOne","accountIndex","indexOf","partialUpdateOne","$set","created","updated","map","UserAccountGoogleService","fetch","response","json","id","givenName","given_name","familyName","family_name","getDefaultScope","undefined","oldScope","concat","filter","item","i","ar","UserAccountSlackService","team","authSocketIO","app","io","findConnectedAndUser","users","Map","use","socket","next","handshakeData","headers","client","on","delete","getTokenFromReq","createAuthApolloContext","connection","signPromisified","sign","init","context","time","algorithm","getConnectedAndUser","routes","getConnectedAndUserFromRequest","middleware","setState","sanitizedState"],"mappings":"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"}