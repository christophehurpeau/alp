{"version":3,"sources":["../src/index.js"],"names":["PropTypes","Component","SubscribeContainerComponent","props","dispatch","name","websocket","context","app","_handlerConnected","on","emit","then","action","isConnected","off","children","propTypes","func","isRequired","string","node","contextTypes","object"],"mappings":";;;;;;;;AAAA,SAASA,SAAT,EAAoBC,SAApB,QAAqC,OAArC;;IAEqBC,2B;;;;;;;;;;;wCAWC;AAAA,mBACS,KAAKC,KADd;AAAA,UACVC,QADU,UACVA,QADU;AAAA,UACAC,IADA,UACAA,IADA;AAAA,UAEQC,SAFR,GAE0B,KAAKC,OAF/B,CAEVA,OAFU,CAECC,GAFD,CAEQF,SAFR;;AAGlB,WAAKG,iBAAL,GAAyBH,UAAUI,EAAV,CAAa,SAAb,EAAwB,YAAM;AACrDJ,kBAAUK,IAAV,gBAA4BN,IAA5B,EACGO,IADH,CACQ;AAAA,iBAAUC,UAAUT,SAASS,MAAT,CAApB;AAAA,SADR;AAED,OAHwB,CAAzB;AAIA,UAAIP,UAAUQ,WAAV,EAAJ,EAA6B;AAC3B,aAAKL,iBAAL;AACD;AACF;;;2CAEsB;AAAA,UACbJ,IADa,GACJ,KAAKF,KADD,CACbE,IADa;AAAA,UAEbE,OAFa,GAED,KAAKA,OAFJ,CAEbA,OAFa;;AAGrB,UAAMD,YAAYC,QAAQC,GAAR,CAAYF,SAA9B;AACA,UAAIA,UAAUQ,WAAV,EAAJ,EAA6B;AAC3BR,kBAAUK,IAAV,kBAA8BN,IAA9B;AACD;;AAEDC,gBAAUS,GAAV,CAAc,SAAd,EAAyB,KAAKN,iBAA9B;AACD;;;6BAEQ;AACP,aAAO,KAAKN,KAAL,CAAWa,QAAlB;AACD;;;;EApCsDf,S;;AAApCC,2B,CACZe,S,GAAY;AACjBb,YAAUJ,UAAUkB,IAAV,CAAeC,UADR;AAEjBd,QAAML,UAAUoB,MAAV,CAAiBD,UAFN;AAGjBH,YAAUhB,UAAUqB;AAHH,C;AADAnB,2B,CAOZoB,Y,GAAe;AACpBf,WAASP,UAAUuB;AADC,C;eAPHrB,2B","file":"index.js","sourcesContent":["import { PropTypes, Component } from 'react';\n\nexport default class SubscribeContainerComponent extends Component {\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    children: PropTypes.node,\n  };\n\n  static contextTypes = {\n    context: PropTypes.object,\n  };\n\n  componentDidMount() {\n    const { dispatch, name } = this.props;\n    const { context: { app: { websocket } } } = this.context;\n    this._handlerConnected = websocket.on('connect', () => {\n      websocket.emit(`subscribe:${name}`)\n        .then(action => action && dispatch(action));\n    });\n    if (websocket.isConnected()) {\n      this._handlerConnected();\n    }\n  }\n\n  componentWillUnmount() {\n    const { name } = this.props;\n    const { context } = this.context;\n    const websocket = context.app.websocket;\n    if (websocket.isConnected()) {\n      websocket.emit(`unsubscribe:${name}`);\n    }\n\n    websocket.off('connect', this._handlerConnected);\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n"]}