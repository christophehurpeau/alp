{"version":3,"sources":["../src/index.js"],"names":["PropTypes","Component","connect","SubscribeContainerComponent","componentDidMount","dispatch","name","props","context","app","websocket","_handlerConnected","on","emit","then","action","isConnected","componentWillUnmount","off","render","children","propTypes","func","isRequired","string","node","contextTypes","object"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,SAApB,QAAqC,OAArC;AACA,SAASC,OAAT,QAAwB,iBAAxB;;IAEMC,2B,qBAAN,cAA0CF,SAA1C,CAAoD;;AAWlDG,sBAAoB;AAClB,UAAM,EAAEC,QAAF,EAAYC,IAAZ,KAAqB,KAAKC,KAAhC;AACA,UAAM,EAAEC,SAAS,EAAEC,KAAK,EAAEC,SAAF,EAAP,EAAX,KAAsC,KAAKF,OAAjD;AACA,SAAKG,iBAAL,GAAyBD,UAAUE,EAAV,CAAa,SAAb,EAAwB,YAAM;AACrDF,gBAAUG,IAAV,CAAgB,aAAYP,IAAK,EAAjC,EACGQ,IADH,CACQ;AAAA,eAAUC,UAAUV,SAASU,MAAT,CAApB;AAAA,OADR;AAED,KAHwB,CAAzB;AAIA,QAAIL,UAAUM,WAAV,EAAJ,EAA6B;AAC3B,WAAKL,iBAAL;AACD;AACF;;AAEDM,yBAAuB;AACrB,UAAM,EAAEX,IAAF,KAAW,KAAKC,KAAtB;AACA,UAAM,EAAEC,OAAF,KAAc,KAAKA,OAAzB;AACA,UAAME,YAAYF,QAAQC,GAAR,CAAYC,SAA9B;AACA,QAAIA,UAAUM,WAAV,EAAJ,EAA6B;AAC3BN,gBAAUG,IAAV,CAAgB,eAAcP,IAAK,EAAnC;AACD;;AAEDI,cAAUQ,GAAV,CAAc,SAAd,EAAyB,KAAKP,iBAA9B;AACD;;AAEDQ,WAAS;AACP,WAAO,KAAKZ,KAAL,CAAWa,QAAlB;AACD;AApCiD,C,SAC3CC,S,GAAY;AACjBhB,YAAUL,UAAUsB,IAAV,CAAeC,UADR;AAEjBjB,QAAMN,UAAUwB,MAAV,CAAiBD,UAFN;AAGjBH,YAAUpB,UAAUyB;AAHH,C,SAMZC,Y,GAAe;AACpBlB,WAASR,UAAU2B;AADC,C;;;AAgCxB,eAAezB,UAAUC,2BAAV,CAAf","file":"index.js","sourcesContent":["import { PropTypes, Component } from 'react';\nimport { connect } from 'alp-react-redux';\n\nclass SubscribeContainerComponent extends Component {\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    children: PropTypes.node,\n  };\n\n  static contextTypes = {\n    context: PropTypes.object,\n  };\n\n  componentDidMount() {\n    const { dispatch, name } = this.props;\n    const { context: { app: { websocket } } } = this.context;\n    this._handlerConnected = websocket.on('connect', () => {\n      websocket.emit(`subscribe:${name}`)\n        .then(action => action && dispatch(action));\n    });\n    if (websocket.isConnected()) {\n      this._handlerConnected();\n    }\n  }\n\n  componentWillUnmount() {\n    const { name } = this.props;\n    const { context } = this.context;\n    const websocket = context.app.websocket;\n    if (websocket.isConnected()) {\n      websocket.emit(`unsubscribe:${name}`);\n    }\n\n    websocket.off('connect', this._handlerConnected);\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default connect()(SubscribeContainerComponent);\n"]}