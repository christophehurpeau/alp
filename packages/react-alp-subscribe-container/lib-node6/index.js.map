{"version":3,"sources":["../src/index.js"],"names":["SubscribeContainerComponent","componentDidMount","props","dispatch","name","websocket","context","app","_handlerConnected","on","emit","then","action","isConnected","componentWillUnmount","off","render","children","propTypes","func","isRequired","string","node","contextTypes","object"],"mappings":";;;;;;AAAA;;AAEe,MAAMA,2BAAN,0BAAoD;;AAWjEC,sBAAoB;AAAA,iBACS,KAAKC,KADd;AAAA,UACVC,QADU,UACVA,QADU;AAAA,UACAC,IADA,UACAA,IADA;AAAA,UAEQC,SAFR,GAE0B,KAAKC,OAF/B,CAEVA,OAFU,CAECC,GAFD,CAEQF,SAFR;;AAGlB,SAAKG,iBAAL,GAAyBH,UAAUI,EAAV,CAAa,SAAb,EAAwB,MAAM;AACrDJ,gBAAUK,IAAV,CAAgB,cAAYN,IAAK,GAAjC,EACGO,IADH,CACQC,UAAUA,UAAUT,SAASS,MAAT,CAD5B;AAED,KAHwB,CAAzB;AAIA,QAAIP,UAAUQ,WAAV,EAAJ,EAA6B;AAC3B,WAAKL,iBAAL;AACD;AACF;;AAEDM,yBAAuB;AAAA,UACbV,IADa,GACJ,KAAKF,KADD,CACbE,IADa;AAAA,UAEbE,OAFa,GAED,KAAKA,OAFJ,CAEbA,OAFa;;AAGrB,UAAMD,YAAYC,QAAQC,GAAR,CAAYF,SAA9B;AACA,QAAIA,UAAUQ,WAAV,EAAJ,EAA6B;AAC3BR,gBAAUK,IAAV,CAAgB,gBAAcN,IAAK,GAAnC;AACD;;AAEDC,cAAUU,GAAV,CAAc,SAAd,EAAyB,KAAKP,iBAA9B;AACD;;AAEDQ,WAAS;AACP,WAAO,KAAKd,KAAL,CAAWe,QAAlB;AACD;AApCgE;kBAA9CjB,2B;AAAAA,2B,CACZkB,S,GAAY;AACjBf,YAAU,iBAAUgB,IAAV,CAAeC,UADR;AAEjBhB,QAAM,iBAAUiB,MAAV,CAAiBD,UAFN;AAGjBH,YAAU,iBAAUK;AAHH,C;AADAtB,2B,CAOZuB,Y,GAAe;AACpBjB,WAAS,iBAAUkB;AADC,C","file":"index.js","sourcesContent":["import { PropTypes, Component } from 'react';\n\nexport default class SubscribeContainerComponent extends Component {\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    children: PropTypes.node,\n  };\n\n  static contextTypes = {\n    context: PropTypes.object,\n  };\n\n  componentDidMount() {\n    const { dispatch, name } = this.props;\n    const { context: { app: { websocket } } } = this.context;\n    this._handlerConnected = websocket.on('connect', () => {\n      websocket.emit(`subscribe:${name}`)\n        .then(action => action && dispatch(action));\n    });\n    if (websocket.isConnected()) {\n      this._handlerConnected();\n    }\n  }\n\n  componentWillUnmount() {\n    const { name } = this.props;\n    const { context } = this.context;\n    const websocket = context.app.websocket;\n    if (websocket.isConnected()) {\n      websocket.emit(`unsubscribe:${name}`);\n    }\n\n    websocket.off('connect', this._handlerConnected);\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n"]}